@@ @Add Equipment
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: pickedItem = macro.args]

[H: goods = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), pickedItem)]

[H: screen1=input(
  "itemToAdd|"+goods+",(Enter Manually)|Select the item to add|LIST|select=0 value=string",
  "junkvar|---------|--OR--|Label",
  "enterManually|0|CHECK here to enter an item not in the database|CHECK"
)]
[H: abort(screen1)]

[H, if(enterManually == 1 || itemToAdd == "(Enter Manually)"), code:{
  [macro("Add Equipment Manually@Lib:inventory"):""]
};{
  [objectToAdd = json.get(getLibProperty(pickedItem+"Details", getMacroLocation()), itemToAdd)]
  [objectToAdd = json.set(objectToAdd, "itemQuantity", 1)]
  [setProperty("Items", json.append(getProperty("Items"), objectToAdd))]
  [macro("Invent Main Starter@Lib:inventory"):""]
}]

!!
@@ @Add Equipment Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: equipSpecialMaterial = "(None), Abysium, Adamantine, Alchemical Silver, Angelskin, Aszite, Blackwood, Blightburn, Blood Crystal, Bone, Bronze, Bulette, Caphorite, Cold Iron, Cryptstone, Darfleaf, Darkwood, Djezet, Dragonhide, Druchite, Eel Hide, Elysian Bronze, Fire-Forged Steel, Frost-Forged Steel, Glass, Glaucite, Gold, Greenwood, Griffon Mane, Heatstone Plating, Horacalcum, Inubrix, Irespan Basalt, Lazurite, Liquid Glass, Living Steel, Mithral, Nexavaran Steel, Noqual, Obsidian, Paueliel, Pyre Steel, Siccatite, Silversheen, Singing Steel, Spiresteel, Stone, Sunsilk, Sunsilver, Throneglass, Viridium, Voidglass, Whipwood, Wyroot"]
[H: equipModList = "(None), Adaptive, Advancing, Allying, Ambushing, Anarchic, Anchoring, Answering, Axiomatic, Bane, Benevolent, Blocking, Blood-Hunting, Bloodsong, Brawling, Brilliant Energy, Burning, Called, Catalytic, Conductive, Confounding, Conserving, Corrosive, Corrosive Burst, Countering, Courageous, Cruel, Cunning, Dancing, Deadly, Defending, Defiant, Designating (Greater), Designating (Lesser), Dispelling, Dispelling Burst, Disruption, Distance, Distracting, Distracting (Greater), Dry Load, Dueling, Endless Ammunition, Exclusionary, Exhausting, Fate-Stealing, Flamboyant, Flamboyant (Greater), Flaming, Flaming Burst, Flying, Fortuitous, Fragile, Frost, Furious, Furyborn, Ghost Touch, Glamered, Glorious, Grapple, Grayflame, Grounding, Guardian, Heartseeker, Holy, Huntsman, Icy Burst, Igniting, Impact, Impervious, Inspired, Invigorating, Jurist, Keen, Ki Focus, Ki Intensifying, Liberating, Lifesurge, Limning, Lucky, Lucky (Greater), Menacing, Merciful, Mighty Cleaving, Mimetic, Negating, Neutralizing, Nimble Shot, Nullifying, Ominous, Peaceful, Performance, Phantom Ammunition, Phase Locking, Planar, Plummeting, Prehensile, Quenching, Reach, Reliable, Reliable (Greater), Repositioning, Returning, Sacred, Sawback, Scatter, Seaborne, Second Chance, Seeking, Shock, Shocking Burst, Silencing, Slithering, Sneaky, Speed, Spell Storing, Spellstealing, Spirit-Hunting, Stalking, Thawing, Throwing, Thrown, Thundering, Transformative, Truthful, Umbral, Unholy, Unseen, Valiant, Vampiric, Vampiric (Greater), Vicious, Virulent, Vorpal, Wounding"]
[H: creatureSize = "Fine, Diminutive, Tiny, Small, Medium, Large, Huge, Gargantuan, Colossal"]

[H: screen=input(
  "itemName|Name|Item Name|TEXT|WIDTH=40","itemWeight|1|Weight|TEXT|WIDTH = 4",
  "itemContainer|0|Is this a container?|CHECK",
  "itemDescription|Description|Description|TEXT|WIDTH = 80"
)]
[H: abort(screen)]

[H: objectToAdd = json.set("{}", "itemName", itemname, "Wt", itemwt, "Cont", itemcont, "Description", itemdesc, "Qty", 1, "Location", itemname, "LocPrior", 0, "Cap", 0, "Capacity", 0, "WtCount", 1, "Class", "Goods", "Useinfo", "{}")]

[H: Items = getProperty("Items")]
[H: setProperty("Items", json.append(Items, objectToAdd))]
[macro("Invent Main Starter@Lib:inventory"):""]

!!
@@ @Add Ammo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: passedVars = macro.args]
[H: passedItems = json.get(macro.args, 0)]
[H: typeOfItems = json.get(macro.args, 1)]

[H, macro("List Items@Lib:Inventory"): typeOfItems]
[H: equipList = macro.return]
[H: equipList = json.append(equipList, "(Enter Manually - Item Isn't Listed)")]
[H: itemCategoryOptions = getLibProperty("itemCategoryOptions", getMacroLocation())]
[H: itemCategoryOptionList = json.toList(json.path.read(itemCategoryOptions, "."+passedItems))]
[H: itemCategoryList = getLibProperty("itemCategories", getMacroLocation())]
[H: itemLocationList = getLibProperty("itemLocation", getMacroLocation())]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]
[H: equipItemData = getLibProperty("itemData", getMacroLocation())]
[H: equipSpecialMaterial = json.toList(json.path.read(equipItemData, ".itemMaterial"))]
[H: equipModList = json.toList(json.path.read(equipItemData, ".weaponEnhancements"))]

[H: abort(input(
   "itemToAdd|"+equipList+"|Select the item to add|LIST|SELECT = 0 VALUE = STRING DELIMITER=JSON",
   "selItemQuantity|0|Quantity.",
   "selModify|0|Modify item?|CHECK"
))]

[H, if(itemToAdd == "(Enter Manually - Item Isn't Listed)"), code:{
   [H, macro("Add "+passedItems+" Manually@Lib:Inventory"): ""]
   [H: objectToAdd = macro.return]
   [H: itemToAdd = json.get(objectToAdd, "itemName")]
};{
   
}]

[H: '<!-- Grab item database -->']
[H: selItem = getLibProperty(typeOfItems, getMacroLocation())]
[H, if(json.isEmpty(selItem)): selItem = "{}"]

[H, if(selModify == 1  && itemToAdd != "(Enter Manually - Item Isn't Listed)"), code:{
   [H: '<!-- Grab from the database the previously selected item index -->']
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: selItemIndex = json.indexOf(selItem, justSelItem)]
   [H: '<!-- Write selected item into a variable -->']
	[H: objectToAdd = json.get(selItem, selItemIndex)]
   [H: '<!-- Grab the selected item data and put into variables -->']
   [H: selItemName = json.get(objectToAdd, "itemName")]
   [H: selItemDescription = json.get(objectToAdd, "itemDescription")]
   [H: selItemCategory = json.get(objectToAdd, "itemCategory")]
   [H: selListCategoryIndex = listFind(itemCategoryList, selItemCategory)]
   [H: selItemWeight = json.get(objectToAdd, "itemWeight")]
   [H: selItemWeightCount = json.get(objectToAdd, "itemWeightCount")]
   [H: selItemLocation = json.get(objectToAdd, "itemLocation")]
   [H: selListIndex = listFind(itemLocationList, selItemLocation)]
   [H: selItemLocationPrior = json.get(objectToAdd, "itemLocationPrior")]
   [H: selItemCost = json.get(objectToAdd, "itemCost")]
   [H: selItemClass = json.get(objectToAdd, "itemClass")]
   [H: selItemReference = json.get(objectToAdd, "itemReference")]
   [H: selItemContainer = json.get(objectToAdd, "itemContainer")]
   [H: selItemCapacity = json.get(objectToAdd, "itemCapacity")]
   [H: selItemUseInfo = json.get(objectToAdd, "useInfo")]
   [H: '<!-- Provide user with ability to modify selected items data -->']
   [H: abort(input(
      strformat('itemName|%{selItemName}|Name of item.|TEXT|WIDTH = 50'),
      strformat('itemDesc|%{selItemDescription}|Description.|TEXT|WIDTH = 50'), 
      strformat('itemCategory|%{itemCategoryList}|Category|LIST|SELECT = %{selListCategoryIndex} VALUE = STRING'), 
      strformat('itemWeight|%{selItemWeight}|Weight.'), 
      strformat('itemWeightCount|%{selItemWeightCount}|Quantity per weight.'), 
      strformat('itemLocation|%{itemLocationList}|Location|LIST|SELECT = %{selListIndex} VALUE = STRING'), 
      strformat('itemCost|%{selItemCost}|Cost?'),
      strformat('itemReference|%{selItemReference}|Reference.'), 
      strformat('itemContainer|0|Container?|CHECK'),
      strformat('itemCapacity|%{selItemCapacity}|Capacity of item.'),
      strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = 4 VALUE = STRING'),
      strformat('wMaterial|%{equipSpecialMaterial}|Select Any Special Materials|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnhance|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING'),
      strformat('wEnch1|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch2|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch3|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch4|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch5|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch6|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch7|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch8|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch9|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING')
   ))]
   [H: '<!-- Put item data into a JSON. -->']
   [H: objectToAdd = json.set("{}", 
      "itemName", itemName, 
      "itemCategory", itemCategory, 
      "itemDescription", itemDesc, 
      "itemWeight", itemWeight, 
      "itemWeightCount", itemWeightCount,
      "itemLocation", itemLocation, 
      "itemLocationPrior", 0, 
      "itemCost", itemCost,
      "itemClass", itemCategory,
      "itemReference", itemReference,
      "itemQuantity", selItemQuantity, 
      "itemContainer", itemContainer, 
      "itemCapacity", itemCapacity, 
      "useInfo", selItemUseInfo
   )]
   [H: useInfo = json.get(objectToAdd, "useInfo")]
   
   [H: moniker = ""]
   [H, switch(wEnhance):
      case "Masterwork": moniker = json.append(moniker, "Mwk");
      case 0: "";
      default: moniker = json.append(moniker, strformat("+%{wEnhance}"))
   ]
   [H, if(itemSize != "Medium"): moniker = json.append(moniker, itemSize)]
   [H, if(wMaterial != "(None)"): moniker = json.append(moniker, wMaterial)]
   
   [H: enchantments = ""]
   [H, count(9), code: {
      [H: wEnchNum = eval("wEnch"+add(roll.count, 1))]
      [H, if(wEnchNum != "(None)"): enchantments = listAppend(enchantments, wEnchNum)]
   }]

   [H: wDesig = json.toList(moniker, " ") + listFormat(enchantments, " %list ", "%item", " ") + itemToAdd]
   [H: newDescription = json.get(objectToAdd, "itemDescription")]
   [H, if(itemSize != "Medium"): objectToAdd = json.set(objectToAdd, "itemDescription", newDescription+" ("+itemSize+")")]
   [H: useInfo = json.set(useInfo, "itemSize", itemSize, "itemMaterial", wMaterial, "itemEnhancement", wEnhance, "itemEnchantments", enchantments, "itemDesigination", wDesig)]
   [H: '<!-- "itemType":"","itemUse":"","itemSize":"","isMelee":"","isRanged":"","isBrace":"","isDouble":"","Ammunition":"","itemSDamage":"","itemMDamage":"","itemCriticalRange":"",
      "itemCriticalMultiplier":"","itemRange":"","itemDamageType":"","itemNotes":"","itemSpecial":"","itemTrainingGroup":"" -->']
   [H: objectToAdd = json.set(objectToAdd, "useInfo", useInfo, "itemName", wDesig)]

   [H, macro("Adjust Item Weight@Lib:Inventory"): objectToAdd]
   [H: curItemWeight = macro.return]
   
   [H: objectToAdd = json.set(objectToAdd, "itemWeight", curItemWeight)]
   
   [H: tokItems = getProperty("Items")]
   [H: setProperty("Items", json.append(tokItems, objectToAdd))]
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H, if(! json.isEmpty(objectToAdd)): setLibProperty(typeOfItems, json.append(selItem, objectToAdd), getMacroLocation())]
};{
   
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: justSelItem = json.set(justSelItem, "itemQuantity", selItemQuantity)]
   [H: tokItems = getProperty("Items")]
   [H, if(! json.isEmpty(justSelItem)): setProperty("Items", json.append(tokItems, justSelItem))]
}]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Add Ammo Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
	"name|Name|BASE name of the ammo type",
	"Weight|1|How much does a MEDIUM version weigh?",
	"description|Ammunition for ???|Enter text to display in inventory menu"
)]
[H: abort(screen)]

[H: object = "Name = "+name+"##Weight = "+Weight+"##WeightCount = 1##Description = "+description+"##Qty = 1##Location = "+name+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Ammo##Container = 0##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]

[H: useInfo = "Desig = "+name]
[H: useInfo = json.fromStrProp(useInfo,"##")]

[H: object = json.set(object,"useInfo",useInfo)]

[H: macro.return = object]

!!
@@ @Add Armor
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: passedVars = macro.args]
[H: passedItems = json.get(macro.args, 0)]
[H: typeOfItems = json.get(macro.args, 1)]

[H, macro("List Items@Lib:Inventory"): typeOfItems]
[H: equipList = macro.return]
[H: equipList = json.append(equipList, "(Enter Manually - Item Isn't Listed)")]
[H: itemCategoryOptions = getLibProperty("itemCategoryOptions", getMacroLocation())]
[H: itemCategoryOptionList = json.toList(json.path.read(itemCategoryOptions, "."+passedItems))]
[H: itemCategoryList = getLibProperty("itemCategories", getMacroLocation())]
[H: itemLocationList = getLibProperty("itemLocation", getMacroLocation())]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]
[H: equipItemData = getLibProperty("itemData", getMacroLocation())]
[H: equipSpecialMaterial = json.toList(json.path.read(equipItemData, ".itemMaterial"))]
[H: equipModList = json.toList(json.path.read(equipItemData, ".armorEnhancements"))]

[H: abort(input(
   "itemToAdd|"+equipList+"|Select the item to add|LIST|SELECT = 0 VALUE = STRING DELIMITER=JSON",
   "selItemQuantity|0|Quantity.",
   "selModify|0|Modify item?|CHECK"
))]

[H, if(itemToAdd == "(Enter Manually - Item Isn't Listed)"), code:{
   [H, macro("Add "+passedItems+" Manually@Lib:Inventory"): ""]
   [H: objectToAdd = macro.return]
   [H: itemToAdd = json.get(objectToAdd, "itemName")]
};{
   
}]

[H: '<!-- Grab item database -->']
[H: selItem = getLibProperty(typeOfItems,getMacroLocation())]
[H, if(json.isEmpty(selItem)): selItem = "{}"]

[H, if(selModify == 1  && itemToAdd != "(Enter Manually - Item Isn't Listed)"), code:{
   
   [H: '<!-- Grab from the database the previously selected item index -->']
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: selItemIndex = json.indexOf(selItem, justSelItem)]
   [H: '<!-- Write selected item into a variable -->']
	[H: objectToAdd = json.get(selItem, selItemIndex)]
   [H: '<!-- Grab the selected item data and put into variables -->']
   [H: selItemName = json.get(objectToAdd, "itemName")]
   [H: selItemDescription = json.get(objectToAdd, "itemDescription")]
   [H: selItemCategory = json.get(objectToAdd, "itemCategory")]
   [H: selListCategoryIndex = listFind(itemCategoryList, selItemCategory)]
   [H: selItemWeight = json.get(objectToAdd, "itemWeight")]
   [H: selItemWeightCount = json.get(objectToAdd, "itemWeightCount")]
   [H: selItemLocation = json.get(objectToAdd, "itemLocation")]
   [H: selListIndex = listFind(itemLocationList, selItemLocation)]
   [H: selItemLocationPrior = json.get(objectToAdd, "itemLocationPrior")]
   [H: selItemCost = json.get(objectToAdd, "itemCost")]
   [H: selItemClass = json.get(objectToAdd, "itemClass")]
   [H: selItemReference = json.get(objectToAdd, "itemReference")]
   [H: selItemContainer = json.get(objectToAdd, "itemContainer")]
   [H: selItemCapacity = json.get(objectToAdd, "itemCapacity")]
   [H: selItemUseInfo = json.get(objectToAdd, "useInfo")]
   [H: '<!-- Provide user with ability to modify selected items data -->']
   [H: abort(input(
      strformat('itemName|%{selItemName}|Name of item.|TEXT|WIDTH = 50'),
      strformat('itemDesc|%{selItemDescription}|Description.|TEXT|WIDTH = 50'), 
      strformat('itemCategory|%{itemCategoryList}|Category|LIST|SELECT = %{selListCategoryIndex} VALUE = STRING'), 
      strformat('itemWeight|%{selItemWeight}|Weight.'), 
      strformat('itemWeightCount|%{selItemWeightCount}|Quantity per weight.'), 
      strformat('itemLocation|%{itemLocationList}|Location|LIST|SELECT = %{selListIndex} VALUE = STRING'), 
      strformat('itemCost|%{selItemCost}|Cost?'),
      strformat('itemReference|%{selItemReference}|Reference.'), 
      strformat('itemContainer|0|Container?|CHECK'),
      strformat('itemCapacity|%{selItemCapacity}|Capacity of item.'),
      strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = 4 VALUE = STRING'),
      strformat('wMaterial|%{equipSpecialMaterial}|Select Any Special Materials|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnhance|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING'),
      strformat('wEnch1|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch2|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch3|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch4|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch5|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch6|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch7|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch8|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING'),
      strformat('wEnch9|%{equipModList}|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING')
   ))]
   [H: '<!-- Put item data into a JSON. -->']
   [H: objectToAdd = json.set("{}", 
      "itemName", itemName, 
      "itemCategory", itemCategory, 
      "itemDescription", itemDesc, 
      "itemWeight", itemWeight, 
      "itemWeightCount", itemWeightCount,
      "itemLocation", itemLocation, 
      "itemLocationPrior", 0, 
      "itemCost", itemCost,
      "itemClass", itemCategory,
      "itemReference", itemReference,
      "itemQuantity", selItemQuantity, 
      "itemContainer", itemContainer, 
      "itemCapacity", itemCapacity, 
      "useInfo", selItemUseInfo
   )]
   [H: useInfo = json.get(objectToAdd, "useInfo")]
   
   [H: moniker = ""]
   [H, switch(wEnhance):
      case "Masterwork": moniker = json.append(moniker, "Mwk");
      case 0: "";
      default: moniker = json.append(moniker, strformat("+%{wEnhance}"))
   ]
   [H, if(itemSize != "Medium"): moniker = json.append(moniker, itemSize)]
   [H, if(wMaterial != "(None)"): moniker = json.append(moniker, wMaterial)]
   
   [H: enchantments = ""]
   [H, count(9), code: {
      [H: wEnchNum = eval("wEnch"+add(roll.count, 1))]
      [H, if(wEnchNum != "(None)"): enchantments = listAppend(enchantments, wEnchNum)]
   }]

   [H: wDesig = json.toList(moniker, " ") + listFormat(enchantments, " %list ", "%item", " ") + itemToAdd]
   [H: newDescription = json.get(objectToAdd, "itemDescription")]
   [H, if(itemSize != "Medium"): objectToAdd = json.set(objectToAdd, "itemDescription", newDescription+" ("+itemSize+")")]
   [H: useInfo = json.set(useInfo, "itemSize", itemSize, "itemMaterial", wMaterial, "itemEnhancement", wEnhance, "itemEnchantments", enchantments, "itemDesigination", wDesig)]
   [H: '<!-- "itemType":"","itemUse":"","itemSize":"","isMelee":"","isRanged":"","isBrace":"","isDouble":"","Ammunition":"","itemSDamage":"","itemMDamage":"","itemCriticalRange":"",
      "itemCriticalMultiplier":"","itemRange":"","itemDamageType":"","itemNotes":"","itemSpecial":"","itemTrainingGroup":"" -->']
   [H: objectToAdd = json.set(objectToAdd, "useInfo", useInfo, "itemName", wDesig)]

   [H, macro("Adjust Item Weight@Lib:Inventory"): objectToAdd]
   [H: curItemWeight = macro.return]
   
   [H: objectToAdd = json.set(objectToAdd, "itemWeight", curItemWeight)]
   
   [H: tokItems = getProperty("Items")]
   [H: setProperty("Items", json.append(tokItems, objectToAdd))]
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H, if(! json.isEmpty(objectToAdd)): setLibProperty(typeOfItems, json.append(selItem, objectToAdd), getMacroLocation())]
};{
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: justSelItem = json.set(justSelItem, "itemQuantity", "selItemQuantity")]
   [H: tokItems = getProperty("Items")]
   [H, if(! json.isEmpty(justSelItem)): setProperty("Items", json.append(tokItems, justSelItem))]
}]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Add Gear
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: passedVars = macro.args]
[H: passedItems = json.get(macro.args, 0)]
[H: typeOfItems = json.get(macro.args, 1)]

[H, macro("List Items@Lib:Inventory"): typeOfItems]
[H: equipList = macro.return]
[H: equipList = json.append(equipList, "(Enter Manually - Item Isn't Listed)")]
[H: itemCategoryOptions = getLibProperty("itemCategoryOptions", getMacroLocation())]
[H: itemCategoryOptionList = json.toList(json.path.read(itemCategoryOptions, ".Good"))]
[H: itemCategoryList = getLibProperty("itemCategories", getMacroLocation())]
[H: itemLocationList = getLibProperty("itemLocation", getMacroLocation())]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "itemToAdd|"+equipList+"|Select the item to add|LIST|SELECT = 0 VALUE = STRING DELIMITER = JSON",
   "selItemQuantity|0|Quantity.",
   "selModify|0|Modify item?|CHECK"
))]


[H, if(selModify == 1  && itemToAdd != "(Enter Manually - Item Isn't Listed)"), code:{
   [H: '<!-- Grab database -->']
   [H: selItem = getLibProperty(typeOfItems,getMacroLocation())]
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H: '<!-- Grab from the Item database the previously selected Item index -->']
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: selItemIndex = json.indexOf(selItem, justSelItem)]
   [H: '<!-- Write selected Item into a variable -->']
   [H: objectToAdd = json.get(selItem, selItemIndex)]
   [H: '<!-- Grab the selected Item data and put into variables -->']
   [H: selItemName = json.get(objectToAdd, "itemName")]
   [H: selItemDescription = json.get(objectToAdd, "itemDescription")]
   [H: selItemCategory= json.get(objectToAdd, "itemCategory")]
   [H: selItemCategoryIndex = listFind(itemCategoryOptionList, selItemCategory)]
   [H: selItemWeight = json.get(objectToAdd, "itemWeight")]
   [H: selItemWeightCount = json.get(objectToAdd, "itemWeightCount")]
   [H: selItemLocation = json.get(objectToAdd, "itemLocation")]
   [H: selListIndex = listFind(itemLocationList, selItemLocation)]
   [H: selItemLocationPrior = json.get(objectToAdd, "itemLocationPrior")]
   [H: selItemCost = json.get(objectToAdd, "itemCost")]
   [H: selItemClass= json.get(objectToAdd, "itemClass")]
   [H: selListClassIndex = listFind(itemCategoryList, passedItems)]
   [H: selItemReference = json.get(objectToAdd, "itemReference")]
   [H: selItemContainer = json.get(objectToAdd, "itemContainer")]
   [H: selItemCapacity = json.get(objectToAdd, "itemCapacity")]
   [H: selItemClassIndex = listFind(itemCategoryList, selItemClass)]
   [H: selItemUseInfo = json.get(objectToAdd, "useInfo")]
   [H: selItemSize = json.get(selItemUseInfo, "itemSize")]
   [H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
   [H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
   [H: '<!-- Provide user with ability to modify selected items data -->']
   [H: abort(input(
      strformat('itemName|%{selItemName}|Name of item.|TEXT|WIDTH = 50'),
      strformat('itemCategory|%{itemCategoryOptionList}|Category|LIST|SELECT = %{selItemCategoryIndex} VALUE = STRING'), 
      strformat('itemDesc|%{selItemDescription}|Description.|TEXT|WIDTH = 50'), 
      strformat('itemWeight|%{selItemWeight}|Weight.'), 
      strformat('itemWeightCount|%{selItemWeightCount}|Quantity per weight.'), 
      strformat('itemLocation|%{itemLocationList}|Location|LIST|SELECT = %{selListIndex} VALUE = STRING'), 
      strformat('itemCost|%{selItemCost}|Cost?'),
      strformat('itemReference|%{selItemReference}|Reference.'), 
      strformat('itemContainer|0|Container?|CHECK'),
      strformat('itemCapacity|%{selItemCapacity}|Capacity of item.'),
      strformat('itemClass|%{itemCategoryList}|Select the class of the item.|LIST|SELECT = %{selItemClassIndex} VALUE = STRING'),
      strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
      strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
   ))]
   [H: '<!-- Put item data into a JSON. -->']
   [H: objectToAdd = json.set("{}", 
      "itemName", itemName, 
      "itemCategory", itemCategory, 
      "itemDescription", itemDesc, 
      "itemWeight", itemWeight, 
      "itemWeightCount", itemWeightCount,
      "itemLocation", itemLocation, 
      "itemLocationPrior", 0, 
      "itemCost", itemCost,
      "itemClass", itemClass,
      "itemReference", itemReference,
      "itemQuantity", selItemQuantity, 
      "itemContainer", itemContainer, 
      "itemCapacity", itemCapacity, 
      "useInfo", selItemUseInfo
   )]
   [H: useInfo = json.get(objectToAdd, "useInfo")]
   [H: useInfo = json.set(useInfo, "itemSize", itemSize, "itemNotes", itemNotes, "itemDesigination", itemName)]
   [H: objectToAdd = json.set(objectToAdd, "useInfo", useInfo)]
   [H: tokItems = getProperty("Items")]
   [H: setProperty("Items", json.append(tokItems, objectToAdd))]
   [H: setLibProperty(typeOfItems, json.set(selItem, selItemIndex, objectToAdd), getMacroLocation())]
};{
   [H: libItems = getLibProperty(typeOfItems, getMacroLocation())]
   [H, if(json.isEmpty(libItems)): libItems = "{}"]
   [H: justSelItem = json.get(json.path.read(libItems, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: justSelItem = json.set(justSelItem, "itemQuantity", selItemQuantity)]
   [H: tokItems = getProperty("Items")]
   [H, if(! json.isEmpty(justSelItem)): setProperty("Items", json.append(tokItems, justSelItem))]
}]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Add Good
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: passedVars = macro.args]
[H: passedItems = json.get(macro.args, 0)]
[H: typeOfItems = json.get(macro.args, 1)]

[H, macro("List Items@Lib:Inventory"): typeOfItems]
[H: equipList = macro.return]
[H: equipList = json.append(equipList, "(Enter Manually - Item Isn't Listed)")]
[H: itemCategoryOptions = getLibProperty("itemCategoryOptions", getMacroLocation())]
[H: itemCategoryOptionList = json.toList(json.path.read(itemCategoryOptions, ".Good"))]
[H: itemCategoryList = getLibProperty("itemCategories", getMacroLocation())]
[H: itemLocationList = getLibProperty("itemLocation", getMacroLocation())]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "itemToAdd|"+equipList+"|Select the item to add.|LIST|SELECT = 0 VALUE = STRING DELIMITER = JSON",
   "selItemQuantity|0|Quantity.",
   "selModify|0|Modify item?|CHECK"
))]


[H, if(selModify == 1  && itemToAdd != "(Enter Manually - Item Isn't Listed)"), code:{
   [H: '<!-- Grab database -->']
   [H: selItem = getLibProperty(typeOfItems,getMacroLocation())]
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H: '<!-- Grab from the Item database the previously selected Item index -->']
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: selItemIndex = json.indexOf(selItem, justSelItem)]
   [H: '<!-- Write selected Item into a variable -->']
   [H: objectToAdd = json.get(selItem, selItemIndex)]
   [H: '<!-- Grab the selected Item data and put into variables -->']
   [H: selItemName = json.get(objectToAdd, "itemName")]
   [H: selItemDescription = json.get(objectToAdd, "itemDescription")]
   [H: selItemCategory= json.get(objectToAdd, "itemCategory")]
   [H: selItemCategoryIndex = listFind(itemCategoryOptionList, selItemCategory)]
   [H: selItemWeight = json.get(objectToAdd, "itemWeight")]
   [H: selItemWeightCount = json.get(objectToAdd, "itemWeightCount")]
   [H: selItemLocation = json.get(objectToAdd, "itemLocation")]
   [H: selListIndex = listFind(itemLocationList, selItemLocation)]
   [H: selItemLocationPrior = json.get(objectToAdd, "itemLocationPrior")]
   [H: selItemCost = json.get(objectToAdd, "itemCost")]
   [H: selItemClass= json.get(objectToAdd, "itemClass")]
   [H: selListClassIndex = listFind(itemCategoryList, passedItems)]
   [H: selItemReference = json.get(objectToAdd, "itemReference")]
   [H: selItemContainer = json.get(objectToAdd, "itemContainer")]
   [H: selItemCapacity = json.get(objectToAdd, "itemCapacity")]
   [H: selItemClassIndex = listFind(itemCategoryList, selItemClass)]
   [H: selItemUseInfo = json.get(objectToAdd, "useInfo")]
   [H: selItemSize = json.get(selItemUseInfo, "itemSize")]
   [H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
   [H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
   [H: '<!-- Provide user with ability to modify selected items data -->']
   [H: abort(input(
      strformat('itemName|%{selItemName}|Name of item.|TEXT|WIDTH = 50'),
      strformat('itemCategory|%{itemCategoryOptionList}|Category|LIST|SELECT = %{selItemCategoryIndex} VALUE = STRING'), 
      strformat('itemDesc|%{selItemDescription}|Description.|TEXT|WIDTH = 50'), 
      strformat('itemWeight|%{selItemWeight}|Weight.'), 
      strformat('itemWeightCount|%{selItemWeightCount}|Quantity per weight.'), 
      strformat('itemLocation|%{itemLocationList}|Location|LIST|SELECT = %{selListIndex} VALUE = STRING'), 
      strformat('itemCost|%{selItemCost}|Cost?'),
      strformat('itemReference|%{selItemReference}|Reference.'), 
      strformat('itemContainer|0|Container?|CHECK'),
      strformat('itemCapacity|%{selItemCapacity}|Capacity of item.'),
      strformat('itemClass|%{itemCategoryList}|Select the class of the item.|LIST|SELECT = %{selItemClassIndex} VALUE = STRING'),
      strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
      strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
   ))]
   [H: '<!-- Put item data into a JSON. -->']
   [H: objectToAdd = json.set("{}", 
      "itemName", itemName, 
      "itemCategory", itemCategory, 
      "itemDescription", itemDesc, 
      "itemWeight", itemWeight, 
      "itemWeightCount", itemWeightCount,
      "itemLocation", itemLocation, 
      "itemLocationPrior", 0, 
      "itemCost", itemCost,
      "itemClass", itemClass,
      "itemReference", itemReference,
      "itemQuantity", selItemQuantity, 
      "itemContainer", itemContainer, 
      "itemCapacity", itemCapacity, 
      "useInfo", selItemUseInfo
   )]
   [H: useInfo = json.get(objectToAdd, "useInfo")]
   [H: useInfo = json.set(useInfo, "itemSize", itemSize, "itemNotes", itemNotes, "itemDesigination", itemName)]
   [H: objectToAdd = json.set(objectToAdd, "useInfo", useInfo)]
   [H: tokItems = getProperty("Items")]
   [H: setProperty("Items", json.append(tokItems, objectToAdd))]
   [H: setLibProperty(typeOfItems, json.set(selItem, selItemIndex, objectToAdd), getMacroLocation())]
};{
   [H: libItems = getLibProperty(typeOfItems, getMacroLocation())]
   [H, if(json.isEmpty(libItems)): libItems = "{}"]
   [H: justSelItem = json.get(json.path.read(libItems, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: justSelItem = json.set(justSelItem, "itemQuantity", selItemQuantity)]
   [H: tokItems = getProperty("Items")]
   [H, if(! json.isEmpty(justSelItem)): setProperty("Items", json.append(tokItems, justSelItem))]
}]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Add Good Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140

[H, if(selModify == 1  && itemToAdd != "(Enter Manually - Item Isn't Listed)"), code:{
   [H: '<!-- Grab database -->']
   [H: selItem = getLibProperty(typeOfItems,getMacroLocation())]
   [H, if(json.isEmpty(selItem)): selItem = "{}"]
   [H: '<!-- Grab from the Item database the previously selected Item index -->']
   [H: justSelItem = json.get(json.path.read(selItem, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: selItemIndex = json.indexOf(selItem, justSelItem)]
   [H: '<!-- Write selected Item into a variable -->']
   [H: objectToAdd = json.get(selItem, selItemIndex)]
   [H: '<!-- Grab the selected Item data and put into variables -->']
   [H: selItemName = json.get(objectToAdd, "itemName")]
   [H: selItemDescription = json.get(objectToAdd, "itemDescription")]
   [H: selItemCategory= json.get(objectToAdd, "itemCategory")]
   [H: selItemCategoryIndex = listFind(itemCategoryOptionList, selItemCategory)]
   [H: selItemWeight = json.get(objectToAdd, "itemWeight")]
   [H: selItemWeightCount = json.get(objectToAdd, "itemWeightCount")]
   [H: selItemLocation = json.get(objectToAdd, "itemLocation")]
   [H: selListIndex = listFind(itemLocationList, selItemLocation)]
   [H: selItemLocationPrior = json.get(objectToAdd, "itemLocationPrior")]
   [H: selItemCost = json.get(objectToAdd, "itemCost")]
   [H: selItemClass= json.get(objectToAdd, "itemClass")]
   [H: selListClassIndex = listFind(itemCategoryList, passedItems)]
   [H: selItemReference = json.get(objectToAdd, "itemReference")]
   [H: selItemContainer = json.get(objectToAdd, "itemContainer")]
   [H: selItemCapacity = json.get(objectToAdd, "itemCapacity")]
   [H: selItemClassIndex = listFind(itemCategoryList, selItemClass)]
   [H: selItemUseInfo = json.get(objectToAdd, "useInfo")]
   [H: selItemSize = json.get(selItemUseInfo, "itemSize")]
   [H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
   [H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
   [H: '<!-- Provide user with ability to modify selected items data -->']
   [H: abort(input(
      strformat('itemName|%{selItemName}|Name of item.|TEXT|WIDTH = 50'),
      strformat('itemCategory|%{itemCategoryOptionList}|Category|LIST|SELECT = %{selItemCategoryIndex} VALUE = STRING'), 
      strformat('itemDesc|%{selItemDescription}|Description.|TEXT|WIDTH = 50'), 
      strformat('itemWeight|%{selItemWeight}|Weight.'), 
      strformat('itemWeightCount|%{selItemWeightCount}|Quantity per weight.'), 
      strformat('itemLocation|%{itemLocationList}|Location|LIST|SELECT = %{selListIndex} VALUE = STRING'), 
      strformat('itemCost|%{selItemCost}|Cost?'),
      strformat('itemReference|%{selItemReference}|Reference.'), 
      strformat('itemContainer|0|Container?|CHECK'),
      strformat('itemCapacity|%{selItemCapacity}|Capacity of item.'),
      strformat('itemClass|%{itemCategoryList}|Select the class of the item.|LIST|SELECT = %{selItemClassIndex} VALUE = STRING'),
      strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
      strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
   ))]
   [H: '<!-- Put item data into a JSON. -->']
   [H: objectToAdd = json.set("{}", 
      "itemName", itemName, 
      "itemCategory", itemCategory, 
      "itemDescription", itemDesc, 
      "itemWeight", itemWeight, 
      "itemWeightCount", itemWeightCount,
      "itemLocation", itemLocation, 
      "itemLocationPrior", 0, 
      "itemCost", itemCost,
      "itemClass", itemClass,
      "itemReference", itemReference,
      "itemQuantity", selItemQuantity, 
      "itemContainer", itemContainer, 
      "itemCapacity", itemCapacity, 
      "useInfo", selItemUseInfo
   )]
   [H: useInfo = json.get(objectToAdd, "useInfo")]
   [H: useInfo = json.set(useInfo, "itemSize", itemSize, "itemNotes", itemNotes, "itemDesigination", itemName)]
   [H: objectToAdd = json.set(objectToAdd, "useInfo", useInfo)]
   [H: tokItems = getProperty("Items")]
   [H: setProperty("Items", json.append(tokItems, objectToAdd))]
   [H: setLibProperty(typeOfItems, json.set(selItem, selItemIndex, objectToAdd), getMacroLocation())]
};{
   [H: libItems = getLibProperty(typeOfItems, getMacroLocation())]
   [H, if(json.isEmpty(libItems)): libItems = "{}"]
   [H: justSelItem = json.get(json.path.read(libItems, "[?(@.itemName == '"+itemToAdd+"')]"), 0)]
   [H: justSelItem = json.set(justSelItem, "itemQuantity", selItemQuantity)]
   [H: tokItems = getProperty("Items")]
   [H, if(! json.isEmpty(justSelItem)): setProperty("Items", json.append(tokItems, justSelItem))]
}]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Add Item
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: options = getLibProperty("itemCategories", getMacroLocation())]
[H: options = json.path.read(options, ".itemName")]
[H: options = json.toList(options)]

[H: abort(input(
	"passedItems|"+options+"|To what category does the item belong?|radio|select = 0 VALUE = STRING"
))]
[H: typeOfItems = strformat('%{passedItems}%s', 'Details')]
[H: if(typeOfItems == "Wondrous ItemDetails", "WondrousItemDetails", typeOfItems)]
[H: passedVars = json.append("", passedItems, typeOfItems)]

[H: '<!-- Ammo, Armor, Good, Potion, Ring, Rod, Scroll, Staff, Wand, Weapon, Wondrous Item -->']
[H, switch(passedItems), code:
case "Ammo":{
   [H, macro("Add Ammo@Lib:Inventory"): passedVars]
   };
case "Armor":{
   [H, macro("Add Armor@Lib:Inventory"): passedVars]
   };
case "Good":{
   [H, macro("Add Good@Lib:Inventory"): passedVars]
   };
case "Potion":{
   [H, macro("Add Potion@Lib:Inventory"): passedVars]
   };
case "Ring":{
   [H, macro("Add Ring@Lib:Inventory"): passedVars]
   };
case "Rod":{
   [H, macro("Add Rod@Lib:Inventory"): passedVars]
   };
case "Scroll":{
   [H, macro("Add Scroll@Lib:Inventory"): passedVars]
   };
case "Staff":{
   [H, macro("Add Staff@Lib:Inventory"): passedVars]
   };
case "Wand":{
   [H, macro("Add Wand@Lib:Inventory"): passedVars]
   };
case "Weapon":{
   [H, macro("Add Weapon@Lib:Inventory"): passedVars]
   };
case "Wondrous Item":{
   [H, macro("Add Wondrous Item@Lib:Inventory"): passedVars]
   };
default:{
   [H, macro("Add Equipment@Lib:Inventory"): passedVars]
}]

!!
@@ @Add Ammo to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Ammo")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]

[H: abort(input(
	"itemName||Name of item.|TEXT|WIDTH = 50",
   "itemDescription||Description.|TEXT|WIDTH = 50", 
   "itemCategory|"+itemCategoryList+"|Category|LIST|SELECT = 1 VALUE = STRING",
   "itemWeight|0|Weight.", 
   "itemWeightCount|0|Quantity per weight.", 
   "itemLocation|"+itemLocationList+"|Location|LIST|SELECT = 3 VALUE = STRING", 
   "itemCost|0|Cost?",
   "itemReference||Reference.|TEXT|WIDTH = 10", 
   "itemQuantity|0|Quantity.", 
   "itemContainer|0|Container?|CHECK",
   "itemCapacity|0|Capacity of item."
))]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", 1,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Ammo",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", "{}"
)]

[H: newAmmoList = json.append(getLibProperty("AmmoDetails", getMacroLocation()), objectToAdd)
[H: srtAmmoList = json.sort(newAmmoList, "a", "itemCategory", "itemName")]
[H: setLibProperty("AmmoDetails", srtAmmoList, getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Add Armor to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Armor")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]

[H: abort(input(
	"itemName||Name of item.|TEXT|WIDTH = 50",
   "itemDescription||Description.|TEXT|WIDTH = 50", 
   "itemCategory|"+itemCategoryList+"|Category|LIST|SELECT = 0 VALUE = STRING",
   "itemWeight|0|Weight.", 
   "itemWeightCount|0|Quantity per weight.", 
   "itemLocation|"+itemLocationList+"|Location|LIST|SELECT = 3 VALUE = STRING", 
   "itemCost|0|Cost?",
   "itemReference||Reference.|TEXT|WIDTH = 10", 
   "itemQuantity|0|Quantity.", 
   "itemContainer|0|Container?|CHECK",
   "itemCapacity|0|Capacity of item."
))]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", 1,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Armor",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", "{}"
)]

[H: newArmorList = json.append(getLibProperty("ArmorDetails", getMacroLocation()), objectToAdd)]
[H: srtArmorList = json.sort(newArmorList, "a", "itemCategory", "itemName")]
[H: setLibProperty("ArmorDetails", srtArmorList, getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Add Good to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Good")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]

[H: abort(input(
	"itemName||Name of item.|TEXT|WIDTH = 50",
   "itemDescription||Description.|TEXT|WIDTH = 50", 
   "itemCategory|"+itemCategoryList+"|Category|LIST|SELECT = 0 VALUE = STRING",
   "itemWeight|0|Weight.", 
   "itemWeightCount|0|Quantity per weight.", 
   "itemLocation|"+itemLocationList+"|Location|LIST|SELECT = 3 VALUE = STRING", 
   "itemCost|0|Cost?",
   "itemReference||Reference.|TEXT|WIDTH = 10", 
   "itemQuantity|0|Quantity.", 
   "itemContainer|0|Container?|CHECK",
   "itemCapacity|0|Capacity of item."
))]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", 1,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Good",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", "{}"
)]

[H: newGoodList = json.append(getLibProperty("GoodDetails", getMacroLocation()), objectToAdd)]
[H: srtGoodList = json.sort(newGoodList, "a", "itemCategory", "itemName")]
[H: setLibProperty("GoodDetails", srtGoodList, getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Add Weapon to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Weapon")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]

[H: abort(input(
	"itemName||Name of item.|TEXT|WIDTH = 50",
   "itemDescription||Description.|TEXT|WIDTH = 50", 
   "itemCategory|"+itemCategoryList+"|Category|LIST|SELECT = 0 VALUE = STRING",
   "itemWeight|0|Weight.", 
   "itemWeightCount|0|Quantity per weight.", 
   "itemLocation|"+itemLocationList+"|Location|LIST|SELECT = 3 VALUE = STRING", 
   "itemCost|0|Cost?",
   "itemReference||Reference.|TEXT|WIDTH = 10", 
   "itemQuantity|0|Quantity.", 
   "itemContainer|0|Container?|CHECK",
   "itemCapacity|0|Capacity of item."
))]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", itemWeightCount,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Weapon",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", "{}"
)]

[H: newWeaponList = json.append(getLibProperty("WeaponDetails", getMacroLocation()), objectToAdd)]
[H: srtWeaponList = json.sort(newWeaponList, "a", "itemCategory", "itemName")]
[H: setLibProperty("WeaponDetails", srtWeaponList, getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Modify Ammo In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Ammo")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]
[H: curAmmoDetail = getLibProperty("AmmoDetails", getMacroLocation())]
[H: curAmmoList = json.toList(json.path.read(curAmmoDetail, ".itemName"))]

[H: abort(input(
   "selItem|"+curAmmoList+"|What item do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curAmmoItem = json.get(json.path.read(curAmmoDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curAmmoItemIndex = json.indexOf(curAmmoDetail, curAmmoItem)]
[H: curAmmoItem = json.get(curAmmoDetail, curAmmoItemIndex)]

[H: selCategoryIndex = listFind(itemCategoryList, json.get(curAmmoItem,"itemCategory"))]
[H: selLocationIndex = listFind(itemLocationList, json.get(curAmmoItem,"itemLocation"))]

[H: abort(input(
   strformat("itemName|%s|Name.|TEXT|WIDTH=50", json.get(curAmmoItem,"itemName")),
   strformat("itemDescription|%s|Description.|TEXT|WIDTH=50", json.get(curAmmoItem,"itemDescription")),
   strformat("itemCategory|%s|Category|LIST|SELECT = "+selCategoryIndex+" VALUE = STRING", itemCategoryList),
   strformat("itemWeight|%s|Weight.|TEXT|WIDTH=10", json.get(curAmmoItem,"itemWeight")),
   strformat("itemWeightCount|%s|Quantity per weight.|TEXT|WIDTH=10", json.get(curAmmoItem,"itemWeightCount")),
   strformat("itemLocation|%s|Location|LIST|SELECT = "+selLocationIndex+" VALUE = STRING", itemLocationList),
   strformat("itemCost|%s|Cost?|TEXT|WIDTH=10", json.get(curAmmoItem,"itemCost")),
   strformat("itemReference|%s|Reference.|TEXT|WIDTH=10", json.get(curAmmoItem,"itemReference")),
   strformat("itemQuantity|%s|Quantity.|TEXT|WIDTH=10", json.get(curAmmoItem,"itemQuantity")),
   strformat("itemContainer|%s|Container?|CHECK", json.get(curAmmoItem,"itemContainer")),
   strformat("itemCapacity|%s|Capacity of item.|TEXT|WIDTH=10", json.get(curAmmoItem,"itemCapacity"))
))]
[H: tmpUseInfo = json.get(curAmmoItem, "useInfo")]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", itemWeightCount,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Ammo",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", tmpUseInfo
)]

[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtAmmoList = json.sort(curAmmoDetail, "a", "itemCategory", "itemName")]
[H: curAmmoDetailItem = json.get(json.path.read(srtAmmoList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curAmmoIndex = json.indexOf(srtAmmoList, curAmmoDetailItem)]
[H, if(! json.isEmpty(srtAmmoList)): setLibProperty("AmmoDetails", json.set(srtAmmoList, curAmmoIndex, objectToAdd), getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Modify Armor In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Armor")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]
[H: curArmorDetail = getLibProperty("ArmorDetails", getMacroLocation())]
[H: curArmorList = json.toList(json.path.read(curArmorDetail, ".itemName"))]

[H: abort(input(
   "selItem|"+curArmorList+"|What item do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curArmorItem = json.get(json.path.read(curArmorDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curArmorItemIndex = json.indexOf(curArmorDetail, curArmorItem)]
[H: curArmorItem = json.get(curArmorDetail, curArmorItemIndex)]

[H: selCategoryIndex = listFind(itemCategoryList, json.get(curArmorItem,"itemCategory"))]
[H: selLocationIndex = listFind(itemLocationList, json.get(curArmorItem,"itemLocation"))]

[H: abort(input(
   strformat("itemName|%s|Name.|TEXT|WIDTH=50", json.get(curArmorItem,"itemName")),
   strformat("itemDescription|%s|Description.|TEXT|WIDTH=50", json.get(curArmorItem,"itemDescription")),
   strformat("itemCategory|%s|Category|LIST|SELECT = "+selCategoryIndex+" VALUE = STRING", itemCategoryList),
   strformat("itemWeight|%s|Weight.|TEXT|WIDTH=10", json.get(curArmorItem,"itemWeight")),
   strformat("itemWeightCount|%s|Quantity per weight.|TEXT|WIDTH=10", json.get(curArmorItem,"itemWeightCount")),
   strformat("itemLocation|%s|Location|LIST|SELECT = "+selLocationIndex+" VALUE = STRING", itemLocationList),
   strformat("itemCost|%s|Cost?|TEXT|WIDTH=10", json.get(curArmorItem,"itemCost")),
   strformat("itemReference|%s|Reference.|TEXT|WIDTH=10", json.get(curArmorItem,"itemReference")),
   strformat("itemQuantity|%s|Quantity.|TEXT|WIDTH=10", json.get(curArmorItem,"itemQuantity")),
   strformat("itemContainer|%s|Container?|CHECK", json.get(curArmorItem,"itemContainer")),
   strformat("itemCapacity|%s|Capacity of item.|TEXT|WIDTH=10", json.get(curArmorItem,"itemCapacity"))
))]
[H: tmpUseInfo = json.get(curArmorItem, "useInfo")]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", itemWeightCount,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Armor",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", tmpUseInfo
)]

[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtArmorList = json.sort(curArmorDetail, "a", "itemCategory", "itemName")]
[H: curArmorDetailItem = json.get(json.path.read(srtArmorList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curArmorIndex = json.indexOf(srtArmorList, curArmorDetailItem)]
[H, if(! json.isEmpty(srtArmorList)): setLibProperty("ArmorDetails", json.set(srtArmorList, curArmorIndex, objectToAdd), getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Modify Good In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Good")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]
[H: curGoodDetail = getLibProperty("GoodDetails", getMacroLocation())]
[H: curGoodList = json.toList(json.path.read(curGoodDetail, ".itemName"))]

[H: abort(input(
   "selItem|"+curGoodList+"|What item do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curGoodItem = json.get(json.path.read(curGoodDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curGoodItemIndex = json.indexOf(curGoodDetail, curGoodItem)]
[H: curGoodItem = json.get(curGoodDetail, curGoodItemIndex)]

[H: selCategoryIndex = listFind(itemCategoryList, json.get(curGoodItem,"itemCategory"))]
[H: selLocationIndex = listFind(itemLocationList, json.get(curGoodItem,"itemLocation"))]

[H: abort(input(
   strformat("itemName|%s|Name.|TEXT|WIDTH=50", json.get(curGoodItem,"itemName")),
   strformat("itemDescription|%s|Description.|TEXT|WIDTH=50", json.get(curGoodItem,"itemDescription")),
   strformat("itemCategory|%s|Category|LIST|SELECT = "+selCategoryIndex+" VALUE = STRING", itemCategoryList),
   strformat("itemWeight|%s|Weight.|TEXT|WIDTH=10", json.get(curGoodItem,"itemWeight")),
   strformat("itemWeightCount|%s|Quantity per weight.|TEXT|WIDTH=10", json.get(curGoodItem,"itemWeightCount")),
   strformat("itemLocation|%s|Location|LIST|SELECT = "+selLocationIndex+" VALUE = STRING", itemLocationList),
   strformat("itemCost|%s|Cost?|TEXT|WIDTH=10", json.get(curGoodItem,"itemCost")),
   strformat("itemReference|%s|Reference.|TEXT|WIDTH=10", json.get(curGoodItem,"itemReference")),
   strformat("itemQuantity|%s|Quantity.|TEXT|WIDTH=10", json.get(curGoodItem,"itemQuantity")),
   strformat("itemContainer|%s|Container?|CHECK", json.get(curGoodItem,"itemContainer")),
   strformat("itemCapacity|%s|Capacity of item.|TEXT|WIDTH=10", json.get(curGoodItem,"itemCapacity"))
))]
[H: tmpUseInfo = json.get(curGoodItem, "useInfo")]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", itemWeightCount,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Good",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", tmpUseInfo
)]

[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtGoodList = json.sort(curGoodDetail, "a", "itemName")]
[H: curGoodDetailItem = json.get(json.path.read(srtGoodList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curGoodIndex = json.indexOf(srtGoodList, curGoodDetailItem)]
[H, if(! json.isEmpty(srtGoodList)): setLibProperty("GoodDetails", json.set(srtGoodList, curGoodIndex, objectToAdd), getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Modify Weapon In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: itemCategoryList = json.get(getLibProperty("itemCategoryOptions", getMacroLocation()), "Weapon")]
[H: itemLocationList = json.get(getLibProperty("itemData", getMacroLocation()), "itemLocations")]
[H: curWeaponDetail = getLibProperty("WeaponDetails", getMacroLocation())]
[H: curWeaponList = json.toList(json.path.read(curWeaponDetail, ".itemName"))]

[H: abort(input(
   "selItem|"+curWeaponList+"|What item do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curWeaponItem = json.get(json.path.read(curWeaponDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curWeaponItemIndex = json.indexOf(curWeaponDetail, curWeaponItem)]
[H: curWeaponItem = json.get(curWeaponDetail, curWeaponItemIndex)]

[H: selCategoryIndex = listFind(itemCategoryList, json.get(curWeaponItem,"itemCategory"))]
[H: selLocationIndex = listFind(itemLocationList, json.get(curWeaponItem,"itemLocation"))]

[H: abort(input(
   strformat("itemName|%s|Name.|TEXT|WIDTH=50", json.get(curWeaponItem,"itemName")),
   strformat("itemDescription|%s|Description.|TEXT|WIDTH=50", json.get(curWeaponItem,"itemDescription")),
   strformat("itemCategory|%s|Category|LIST|SELECT = "+selCategoryIndex+" VALUE = STRING", itemCategoryList),
   strformat("itemWeight|%s|Weight.|TEXT|WIDTH=10", json.get(curWeaponItem,"itemWeight")),
   strformat("itemWeightCount|%s|Quantity per weight.|TEXT|WIDTH=10", json.get(curWeaponItem,"itemWeightCount")),
   strformat("itemLocation|%s|Location|LIST|SELECT = "+selLocationIndex+" VALUE = STRING", itemLocationList),
   strformat("itemCost|%s|Cost?|TEXT|WIDTH=10", json.get(curWeaponItem,"itemCost")),
   strformat("itemReference|%s|Reference.|TEXT|WIDTH=10", json.get(curWeaponItem,"itemReference")),
   strformat("itemQuantity|%s|Quantity.|TEXT|WIDTH=10", json.get(curWeaponItem,"itemQuantity")),
   strformat("itemContainer|%s|Container?|CHECK", json.get(curWeaponItem,"itemContainer")),
   strformat("itemCapacity|%s|Capacity of item.|TEXT|WIDTH=10", json.get(curWeaponItem,"itemCapacity"))
))]
[H: tmpUseInfo = json.get(curWeaponItem, "useInfo")]
[H: '<!-- itemName, itemDescription, itemCategory, itemWeight, itemWeightCount, itemLocation, itemLocationPrior, itemCost, itemClass, itemReference, itemQuantity, itemContainer, itemCapacity, useInfo -->']

[H: objectToAdd = json.set("{}", 
   "itemName", itemName, 
   "itemDescription", itemDescription, 
   "itemCategory", itemCategory, 
   "itemWeight", itemWeight, 
   "itemWeightCount", itemWeightCount,
   "itemLocation", itemLocation, 
   "itemLocationPrior", 0, 
   "itemCost", itemCost,
   "itemClass", "Weapon",
   "itemReference", itemReference,
   "itemQuantity", itemQuantity, 
   "itemContainer", itemContainer, 
   "itemCapacity", itemCapacity, 
   "useInfo", tmpUseInfo
)]

[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtWeaponList = json.sort(curWeaponDetail, "a", "itemCategory", "itemName")]
[H: curWeaponDetailItem = json.get(json.path.read(srtWeaponList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curWeaponIndex = json.indexOf(srtWeaponList, curWeaponDetailItem)]
[H, if(! json.isEmpty(srtWeaponList)): setLibProperty("WeaponDetails", json.set(srtWeaponList, curWeaponIndex, objectToAdd), getMacroLocation())]

[R: itemName] added to database.

!!
@@ @Set Ammo UseInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: curAmmoDetail = getLibProperty("AmmoDetails", getMacroLocation())]
[H: curAmmoList = json.toList(json.path.read(curAmmoDetail, ".itemName"))]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "selItem|"+curAmmoList+"|What items 'use information' do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curAmmoItem = json.get(json.path.read(curAmmoDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curAmmoItemIndex = json.indexOf(curAmmoDetail, curAmmoItem)]
[H: curAmmoItem = json.get(curAmmoDetail, curAmmoItemIndex)]
[H: selItemName = json.get(curAmmoItem, "itemName")]
[H: selItemUseInfo = json.get(curAmmoItem, "useInfo")]
[H: selItemSize = json.get(selItemUseInfo, "itemSize")]
[H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
[H: if(selItemSizeIndex = -1, selItemSizeIndex = 0, selItemSizeIndex = selItemSizeIndex)]
[H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]

[H: abort(input(
	strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
	strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
))]

[H: '<!-- "useInfo":{"itemSize":"","itemNotes":""} -->']
[H: selItemUseInfo = json.set(selItemUseInfo, "itemSize", itemSize)]
[H: selItemUseInfo = json.set(selItemUseInfo, "itemNotes", itemNotes)]

[H: curAmmoItem = json.set(curAmmoItem, "useInfo", selItemUseInfo)]
[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtAmmoList = json.sort(curAmmoDetail, "a", "itemCategory", "itemName")]
[H: curAmmoDetailItem = json.get(json.path.read(srtAmmoList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curAmmoIndex = json.indexOf(srtAmmoList, curAmmoDetailItem)]
[H, if(! json.isEmpty(srtAmmoList)): setLibProperty("AmmoDetails", json.set(srtAmmoList, curAmmoIndex, curAmmoItem), getMacroLocation())]

[R: selItemName+' "useInfo" set up.']

!!
@@ @Set Armor useInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: curArmorDetail = getLibProperty("ArmorDetails", getMacroLocation())]
[H: curArmorList = json.toList(json.path.read(curArmorDetail, ".itemName"))]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "selItem|"+curArmorList+"|What items 'use information' do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curArmorItem = json.get(json.path.read(curArmorDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curArmorItemIndex = json.indexOf(curArmorDetail, curArmorItem)]
[H: curArmorItem = json.get(curArmorDetail, curArmorItemIndex)]
[H: selItemName = json.get(curArmorItem, "itemName")]
[H: selItemUseInfo = json.get(curArmorItem, "useInfo")]
[H: selItemSize = json.get(selItemUseInfo, "itemSize")]
[H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
[H: if(selItemSizeIndex = -1, selItemSizeIndex = 0, selItemSizeIndex = selItemSizeIndex)]
[H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
[R: p.watch('curArmorItem')]
[R: p.watch('curArmorItemIndex')]
[R: p.watch('selItemName')]
[R: p.watch('selItemUseInfo')]
[R: p.watch('selItemSize')]
[R: p.watch('selItemSizeIndex')]
[R: p.watch('selItemNotes')]

[H: abort(input(
	strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
	strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
))]

[H: '<!-- "useInfo":{"itemSize":"","itemNotes":""} -->']
[H: selItemUseInfo = json.set(selItemUseInfo, "itemSize", itemSize)]
[H: selItemUseInfo = json.set(selItemUseInfo, "itemNotes", itemNotes)]

[H: curArmorItem = json.set(curArmorItem, "useInfo", selItemUseInfo)]
[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtArmorList = json.sort(curArmorDetail, "a", "itemCategory", "itemName")]
[H: curArmorDetailItem = json.get(json.path.read(srtArmorList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curArmorIndex = json.indexOf(srtArmorList, curArmorDetailItem)]
[H, if(! json.isEmpty(srtArmorList)): setLibProperty("ArmorDetails", json.set(srtArmorList, curArmorIndex, curArmorItem), getMacroLocation())]

[R: selItemName+' "useInfo" set up.']

!!
@@ @Set Good useInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: curGoodDetail = getLibProperty("GoodDetails", getMacroLocation())]
[H: curGoodList = json.toList(json.path.read(curGoodDetail, ".itemName"))]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "selItem|"+curGoodList+"|What items 'use information' do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curGoodItem = json.get(json.path.read(curGoodDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curGoodItemIndex = json.indexOf(curGoodDetail, curGoodItem)]
[H: curGoodItem = json.get(curGoodDetail, curGoodItemIndex)]
[H: selItemName = json.get(curGoodItem, "itemName")]
[H: selItemUseInfo = json.get(curGoodItem, "useInfo")]
[H: selItemSize = json.get(selItemUseInfo, "itemSize")]
[H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
[H: if(selItemSizeIndex = -1, selItemSizeIndex = 0, selItemSizeIndex = selItemSizeIndex)]
[H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
[R: p.watch('curGoodItem')]
[R: p.watch('curGoodItemIndex')]
[R: p.watch('selItemName')]
[R: p.watch('selItemUseInfo')]
[R: p.watch('selItemSize')]
[R: p.watch('selItemSizeIndex')]
[R: p.watch('selItemNotes')]

[H: abort(input(
	strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
	strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
))]

[H: '<!-- "useInfo":{"itemSize":"","itemNotes":""} -->']
[H: selItemUseInfo = json.set(selItemUseInfo, "itemSize", itemSize)]
[H: selItemUseInfo = json.set(selItemUseInfo, "itemNotes", itemNotes)]

[H: curGoodItem = json.set(curGoodItem, "useInfo", selItemUseInfo)]
[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtGoodList = json.sort(curGoodDetail, "a", "itemCategory", "itemName")]
[H: curGoodDetailItem = json.get(json.path.read(srtGoodList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curGoodIndex = json.indexOf(srtGoodList, curGoodDetailItem)]
[H, if(! json.isEmpty(srtGoodList)): setLibProperty("GoodDetails", json.set(srtGoodList, curGoodIndex, curGoodItem), getMacroLocation())]

[R: selItemName+' "useInfo" set up.']

!!
@@ @Set Weapon UseInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: curWeaponDetail = getLibProperty("WeaponDetails", getMacroLocation())]
[H: curWeaponList = json.toList(json.path.read(curWeaponDetail, ".itemName"))]
[H: creatureSize = getLibProperty("creatureSize", getMacroLocation())]

[H: abort(input(
   "selItem|"+curWeaponList+"|What items 'use information' do you want to modify?|LIST|SELECT = 0 VALUE = STRING"
))]
[H: curWeaponItem = json.get(json.path.read(curWeaponDetail, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curWeaponItemIndex = json.indexOf(curWeaponDetail, curWeaponItem)]
[H: curWeaponItem = json.get(curWeaponDetail, curWeaponItemIndex)]
[H: selItemName = json.get(curWeaponItem, "itemName")]
[H: selItemUseInfo = json.get(curWeaponItem, "useInfo")]
[H: selItemSize = json.get(selItemUseInfo, "itemSize")]
[H: selItemSizeIndex = listFind(creatureSize, selItemSize)]
[H: if(selItemSizeIndex = -1, selItemSizeIndex = 0, selItemSizeIndex = selItemSizeIndex)]
[H: selItemNotes = json.get(selItemUseInfo, "itemNotes")]
[R: p.watch('curWeaponItem')]
[R: p.watch('curWeaponItemIndex')]
[R: p.watch('selItemName')]
[R: p.watch('selItemUseInfo')]
[R: p.watch('selItemSize')]
[R: p.watch('selItemSizeIndex')]
[R: p.watch('selItemNotes')]

[H: abort(input(
	strformat('itemSize|%{creatureSize}|Select size of the item.|LIST|SELECT = %{selItemSizeIndex} VALUE = STRING'),
	strformat('itemNotes|%{selItemNotes}|Any item notes? Such as provides +2 to Knowledge(Arcana)...|TEXT|WIDTH = 50')
))]

[H: '<!-- "useInfo":{"itemSize":"","itemNotes":""} -->']
[H: selItemUseInfo = json.set(selItemUseInfo, "itemSize", itemSize)]
[H: selItemUseInfo = json.set(selItemUseInfo, "itemNotes", itemNotes)]

[H: curWeaponItem = json.set(curWeaponItem, "useInfo", selItemUseInfo)]
[H, if(json.isEmpty(selItem)): selItem = "{}"]
[H: srtWeaponList = json.sort(curWeaponDetail, "a", "itemCategory", "itemName")]
[H: curWeaponDetailItem = json.get(json.path.read(srtWeaponList, "[?(@.itemName == '"+selItem+"')]"), 0)]
[H: curWeaponIndex = json.indexOf(srtWeaponList, curWeaponDetailItem)]
[H, if(! json.isEmpty(srtWeaponList)): setLibProperty("WeaponDetails", json.set(srtWeaponList, curWeaponIndex, curWeaponItem), getMacroLocation())]

[R: selItemName+' "useInfo" set up.']

!!
@@ @<b>Open Inventory</b>
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=true ; group=1 General ; tooltip=Drag this to a token or the campaign or global panels to use on selected tokens. ; minWidth=140
[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Empty Invent Main
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[frame5("Inventory"):{
	[macro("Empty Invent Main Text@Lib:Inventory"): ""]
}]

!!
@@ @Empty Invent Main Text
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H, if(sortby == ""): sortby = "Location.Name"; sortby = sortby]

[H: curToken              = token.name+"'s"]
[H: linkAddItem           = macroLink("Add An Item","Add Item@Lib:Inventory","self","",token.name)]
[H: linkClearInventory    = macroLink("Empty Inventory","Clear Invent@Lib:Inventory","none","",token.name)]
[H,                         macro("Coinpurse HTML@Lib:Inventory"): ""]
[H: htmlCoinpurse         = macro.return]
[H: linkMainInventoryName = macroLink("Name","Invent Main@Lib:Inventory","none","Location.Name",token.name)]
[H: linkMainInventoryWeight   = macroLink("Weight.","Invent Main@Lib:Inventory","none","Weight",token.name)]
[H: linkMainInventoryQty  = macroLink("Qty.","Invent Main@Lib:Inventory","none","qty",token.name)]
[H,                         macro("List Populate@Lib:Inventory"): sortby]
[H: htmlInventoryList     = macro.return]
[H,                         macro("Weight Total@Lib:Inventory"): ""]
[H: weightCarried         = macro.return]
[H: weightLoad            = getProperty("weightLoad")]
[H, if(string(weightLoad) == ""): weightLoad = "Light"]
[H: linkWeightLoad        = macroLink(weightLoad,"Set Weight Load@Lib:Inventory","none",weightCarried,token.name)]
[H: cssText = "
body {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
}
a {
	color: black;
}
table {
	width: 100%;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
	color: black;
	border-collapse: collapse;
	border-spacing: 0;
	text-decoration: none;
}
th {
	height: 30px;
}
tr {
	height: 30px;
}
td {
	padding: 0px;
}
table.banded {
	width: 100%;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
	color: black;
	border-collapse: collapse;
	border-spacing: 0;
	text-decoration: none;
}
table.banded th {
	height:30px;
	color: orange;
	background-color: #4b4b4b;
}
table.banded th a {
	color: orange;
}
table.banded tr:hover a {
	color: orange;
}
table.banded tr:hover {
	color: orange !important;
	background-color: #4b4b4b !important;
}
table.banded tr:nth-child(odd) {
	color: black;
	background-color: rgb(242, 242, 242, 0.5);
}
"]

[H: output =        strformat('<html><head><style>%{cssText}</style></head>')]
[H: output = output+strformat('<body><table><tr style="width:100%;"><td style="width:50%; text-align:center;"><table>')]
[H: output = output+strformat('<tr><td colspan="2" style="width:50%; text-align:center;"><b>%{curToken} Inventory</b></td></tr>')]
[H: output = output+strformat('<tr><td style="text-align:center;">%{linkAddItem}</td>')]
[H: output = output+strformat('<td style="text-align:center;">%{linkClearInventory}</td></tr></table></td>')]
[H: output = output+strformat('<td style="width=50%;">%{htmlCoinpurse}</td></tr></table>')]
[H: output = output+strformat('<table class="banded" style="overflow-x:auto;"><tr>')]
[H: output = output+strformat('<th style="width:25%; text-align:left;">%{linkMainInventoryName}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryWeight}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryQty}</th>')]
[H: output = output+strformat('<th style="width:50%; text-align:left;">Details</th>')]
[H: output = output+strformat('</tr><tr>')]
[H: output = output+strformat('<td style="width:25%; text-align:left;"><b>Total Weight:</b></td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{weightCarried}</td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{linkWeightLoad}</td>')]
[H: output = output+strformat('<td style="width:50%; text-align:left;"></td>')]
[H: output = output+strformat('</tr></table>')]
[H: output = output+strformat('<table><tr><td>Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions ')]
[H: output = output+strformat('represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions ')]
[H: output = output+strformat('are kept within your Stash.</td></tr></table>')]
[H: output = output+strformat('</body></html>')]
[H: setProperty("tm.Test", output)]
[R: output]

!!
@@ @Invent Main
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]

[R, frame5("Inventory"):{
	[R, macro("Invent Main Text@Lib:Inventory"): sortby]
}]

!!
@@ @Invent Main Starter
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: itemcheck = getProperty("Items")]
[H, if(json.type(itemcheck) !=  "ARRAY"): itemcheck = "[]"]

[H, if(json.isEmpty(itemcheck) == 1), code:{
	[macro("Empty Invent Main@Lib:Inventory"): ""]
};{
	[macro("Invent Main@Lib:Inventory"): "Location.Name"]
}]

!!
@@ @Invent Main Text
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H, if(sortby == ""): sortby = "Location.Name"; sortby = sortby]

[H: curToken                  = token.name+"'s"]
[H: linkAddItem               = macroLink("Add An Item", "Add Item@Lib:Inventory", "self", "", token.name)]
[H: linkClearInventory        = macroLink("Empty Inventory", "Clear Invent@Lib:Inventory", "none", "",token.name)]
[H,                             macro("Coinpurse HTML@Lib:Inventory"): ""]
[H: htmlCoinpurse             = macro.return]
[H: linkMainInventoryName     = macroLink("Name", "Invent Main@Lib:Inventory", "none", "Location.Name", token.name)]
[H: linkMainInventoryWeight   = macroLink("Weight.", "Invent Main@Lib:Inventory", "none", "Weight", token.name)]
[H: linkMainInventoryQty      = macroLink("Qty.", "Invent Main@Lib:Inventory", "none", "qty", token.name)]
[H: curItems                  = getProperty("Items")]
[H, if(json.type(curItems)   !=  "ARRAY"): curItems = "[]"]
[H, if(curItems == "[]"), code:{
   [H: htmlInventoryList      = ""]
   };{
   [H,                          macro("List Populate@Lib:Inventory"): sortby]
   [H: htmlInventoryList      = macro.return]
}]
[H,                             macro("Weight Total@Lib:Inventory"): ""]
[H: weightCarried             = macro.return]
[H: weightLoad                = getProperty("weightLoad")]
[H, if(string(weightLoad)    == ""): weightLoad = "Light"]
[H: linkWeightLoad            = macroLink(weightLoad, "Set Weight Load@Lib:Inventory", "none", weightCarried, token.name)]
[H: cssText = "
body {
	font-family: Arial, Helvetica, sans-serif;
	font-size: 12px;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
}
a {
	color: black;
}
table {
	width: 100%;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
	color: black;
	border-collapse: collapse;
	border-spacing: 0;
	text-decoration: none;
}
th {
	height: 30px;
}
tr {
	height: 30px;
}
td {
	padding: 0px;
}
table.banded {
	width: 100%;
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
	color: black;
	border-collapse: collapse;
	border-spacing: 0;
	text-decoration: none;
}
table.banded th {
	height:30px;
	color: orange;
	background-color: #4b4b4b;
}
table.banded th a {
	color: orange;
}
table.banded tr:hover a {
	color: orange;
}
table.banded tr:hover {
	color: orange !important;
	background-color: #4b4b4b !important;
}
table.banded tr:nth-child(odd) {
	color: black;
	background-color: rgb(242, 242, 242, 0.5);
}
"]

[H: output =        strformat('<html><head><style>%{cssText}</style></head>')]
[H: output = output+strformat('<body><table><tr style="width:100%;"><td style="width:50%; text-align:center;"><table>')]
[H: output = output+strformat('<tr><td colspan="2" style="width:50%; text-align:center;"><b>%{curToken} Inventory</b></td></tr>')]
[H: output = output+strformat('<tr><td style="text-align:center;">%{linkAddItem}</td>')]
[H: output = output+strformat('<td style="text-align:center;">%{linkClearInventory}</td></tr></table></td>')]
[H: output = output+strformat('<td style="width=50%;">%{htmlCoinpurse}</td></tr></table>')]
[H: output = output+strformat('<table class="banded" style="overflow-x:auto;"><tr>')]
[H: output = output+strformat('<th style="width:25%; text-align:left;">%{linkMainInventoryName}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryWeight}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryQty}</th>')]
[H: output = output+strformat('<th style="width:50%; text-align:left;">Details</th>')]
[H: output = output+strformat('</tr>%{htmlInventoryList}<tr>')]
[H: output = output+strformat('<td style="width:25%; text-align:left;"><b>Total Weight:</b></td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{weightCarried}</td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{linkWeightLoad}</td>')]
[H: output = output+strformat('<td style="width:50%; text-align:left;"></td>')]
[H: output = output+strformat('</tr></table>')]
[H: output = output+strformat('<table><tr><td>Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions ')]
[H: output = output+strformat('represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions ')]
[H: output = output+strformat('are kept within your Stash.</td></tr></table>')]
[H: output = output+strformat('</body></html>')]
[H: setProperty("tm.Test", output)]
[R: output]

!!
@@ @List Populate
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H, if(sortby == ""): sortby = "Location.Name"; sortby = sortby]
[H: sortMacro = "List Sort "+sortby+"@Lib:Inventory"]

[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) !=  "ARRAY"): curItems = "[]"]

[H, macro(sortMacro): curItems]
[H: curItems = macro.return]
[H: setProperty("Items", curItems)]
[H: output = ""]

[H, foreach(itemInventory, curItems, ""), code:{
	
	[H: itemQty = json.get(itemInventory, "itemQuantity")]
	[H: itemWeight = json.get(itemInventory, "itemWeight")]
   [H: itemCount = json.get(itemInventory, "itemWeightCount")]
	[H: isContainer = json.get(itemInventory, "itemContainer")]
	[H: itemLocation = json.get(itemInventory, "itemLocation")]
	[H: itemName = json.get(itemInventory, "itemName")]
	[H: itemCategory = json.get(itemInventory, "itemCategory")]
	[H: itemDescription = json.get(itemInventory, "itemDescription")]
	[H, if(itemCategory == "Wands"), code:{
		[H: itemUseInfo = json.get(itemInventory, "useInfo")]
		[H: itemCharges = json.get(itemUseInfo, "Charges")]
		[H: displayName = itemName+" (x"+itemCharges+")"]
	};{
		[H: displayName = itemName]
	}]
	[H: output = output+strformat('<tr>')]
	[H, if(itemLocation == "General" || itemLocation == itemName), code:{
		[H: linkItemClick = macroLink(displayName, "Item Click@Lib:Inventory", "none", itemInventory, token.name)]
		[H: output = output+strformat('<td style="width:25%;"><b>%{linkItemClick}</b></td>')]
	};{
		[H: linkItemClick = macroLink(displayName, "Item Click@Lib:Inventory", "none", itemInventory, token.name)]
		[H: output = output+strformat('<td style="width:25%;">%{linkItemClick}</td>')]
	}]
	[H, if(itemCount == 0), code:{
		[H: linkWeightCount = "["+macroLink(itemWeight*itemQty, "Weight Count Toggle@this", "none", itemInventory, token.name)+"]"]
		[H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkWeightCount}</b></td>')]
	};{
		[H: linkWeightCount = macroLink(itemWeight*itemQty, "Weight Count Toggle@this", "none", itemInventory, token.name)]
		[H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkWeightCount}</b></td>')]
	}]
	[H: linkAdjustQuantity = macroLink(itemQty, "Adjust Quantity@this", "none", itemInventory, token.name)]
	[H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkAdjustQuantity}</b></td>')]
	[H: output = output+strformat('<td style="width=50%;">%{itemDescription}</td></tr>')]
}]
[H: macro.return = output]

!!
@@ @List Sort Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = macro.args]

[H: sortItems = json.sort(curItems, "d", "itemWeight")]

[H: macro.return = sortItems]

!!
@@ @List Sort Location.Name
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = macro.args]

[H: sortItems = json.sort(curItems, "a", "itemLocation", "itemLocationPrior", "itemName")]

[H: macro.return = sortItems]

!!
@@ @List Sort Name
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = macro.args]

[H: sortItems = json.sort(curItems, "a", "itemCategory", "itemName", "itemLocation", "itemLocationPrior")]

[H: macro.return = sortItems]

!!
@@ @List Sort Quantity
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = macro.args]

[H: sortItems = json.sort(curItems, "d", "itemQuantity")]

[H: macro.return = sortItems]

!!
@@ @Set Weight Load
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=90 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: weightCarried = macro.args]
[H: weightLoad = getProperty("weightLoad")]
[H, if(string(weightLoad) == ""): weightLoad = "Light"]
[H: weightList = "Light,Medium,Heavy,Overburdened!!"]

[H: curStrength = getProperty("Strength")]
[H, if(! isNumber(curStrength) ): curStrength = 0]
[H: heavyFloor = curStrength * 10]
[H: heavyCeiling = curStrength * 20]

[H, if(weightCarried < heavyCeiling): num = 1; num = 2]
[H, if(weightCarried < heavyFloor): num = 0]
[H, switch(curStrength), code:
      case 1: {
         [H: weightLoad = if(weightCarried >= 10, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 6, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 3, "Medium", "Light")]
      };
      case 2: {
         [H: weightLoad = if(weightCarried >= 20, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 13, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 6, "Medium", "Light")]
		};
      case 3: {
         [H: weightLoad = if(weightCarried >= 30, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 20, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 10, "Medium", "Light")]
		};
      case 4: {
         [H: weightLoad = if(weightCarried >= 40, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 26, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 13, "Medium", "Light")]
		};
      case 5: {
         [H: weightLoad = if(weightCarried >= 50, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 33, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 16, "Medium", "Light")]
		};
      case 6: {
         [H: weightLoad = if(weightCarried >= 60, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 40, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 20, "Medium", "Light")]
		};
      case 7: {
         [H: weightLoad = if(weightCarried >= 70, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 46, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 23, "Medium", "Light")]
		};
      case 8: {
         [H: weightLoad = if(weightCarried >= 80, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 53, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 26, "Medium", "Light")]
		};
      case 9: {
         [H: weightLoad = if(weightCarried >= 90, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 60, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 30, "Medium", "Light")]
		};
      case 10: {
         [H: weightLoad = if(weightCarried >= 100, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 66, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 33, "Medium", "Light")]
		};
      case 11: {
         [H: weightLoad = if(weightCarried >= 115, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 76, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 38, "Medium", "Light")]
		};
      case 12: {
         [H: weightLoad = if(weightCarried >= 130, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 86, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 43, "Medium", "Light")]
		};
      case 13: {
         [H: weightLoad = if(weightCarried >= 150, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 100, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 50, "Medium", "Light")]
		};
      case 14: {
         [H: weightLoad = if(weightCarried >= 175, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 116, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 58, "Medium", "Light")]
		};
      case 15: {
         [H: weightLoad = if(weightCarried >= 200, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 133, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 66, "Medium", "Light")]
		};
      case 16: {
         [H: weightLoad = if(weightCarried >= 230, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 153, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 76, "Medium", "Light")]
		};
      case 17: {
         [H: weightLoad = if(weightCarried >= 260, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 173, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 86, "Medium", "Light")]
		};
      case 18: {
         [H: weightLoad = if(weightCarried >= 300, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 200, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 100, "Medium", "Light")]
		};
      case 19: {
         [H: weightLoad = if(weightCarried >= 350, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 233, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 116, "Medium", "Light")]
		};
      case 20: {
         [H: weightLoad = if(weightCarried >= 400, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 266, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 133, "Medium", "Light")]
		};
      case 21: {
         [H: weightLoad = if(weightCarried >= 460, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 306, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 153, "Medium", "Light")]
		};
      case 22: {
         [H: weightLoad = if(weightCarried >= 520, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 346, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 173, "Medium", "Light")]
		};
      case 23: {
         [H: weightLoad = if(weightCarried >= 600, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 400, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 200, "Medium", "Light")]
		};
      case 24: {
         [H: weightLoad = if(weightCarried >= 700, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 466, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 233, "Medium", "Light")]
		};
      case 25: {
         [H: weightLoad = if(weightCarried >= 800, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 533, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 266, "Medium", "Light")]
		};
      case 26: {
         [H: weightLoad = if(weightCarried >= 920, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 613, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 306, "Medium", "Light")]
		};
      case 27: {
         [H: weightLoad = if(weightCarried >= 1040, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 693, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 346, "Medium", "Light")]
		};
      case 28: {
         [H: weightLoad = if(weightCarried >= 1200, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 800, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 400, "Medium", "Light")]
		};
      case 29: {
         [H: weightLoad = if(weightCarried >= 1400, "Overburdened!!", "")]
         [H: weightLoad = if(weightCarried >= 933, "Heavy", "")]
         [H: weightLoad = if(weightCarried >= 466, "Medium", "Light")]
		};
      default: {
         [H: weightLoad = "Overburdened!!")]
   }]

[H: abort(input(
	"junkvar|"+weightLoad+"|Your weightLoad is currently set to|Label",
	"junk1|"+curStrength+"|Your strength is listed as|Label",
	"junk4|"+weightCarried+"|You currently carry|Label",
	"junk2|"+heavyFloor+"|You can carry w/o penalty up to|Label",
	"junk3|"+heavyCeiling+"|With effort, you can carry up to|Label",
	"weightLoad|"+weightList+"|Where does your current weight carried put you?|radio|select = "+num+" VALUE = STRING"
))]

[H: setProperty("weightLoad", weightLoad)]
[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Weight Total
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=30 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) != "ARRAY"): curItems = "[]"]
[H: cpData  = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]
[H: countWeight           = json.get(cpData, "countWeight")]
[H: countPartyWeight      = json.get(cpData, "countPartyWeight")]

[H: totalWeight           = 0]
[H, foreach(item, curItems), code:{
	[itemQuantity          = json.get(item, "itemQuantity")]
	[itemWeight            = json.get(item, "itemWeight")]
	[itemWeightCount       = json.get(item, "itemWeightCount")]
	[ttlItemWeight         = (itemQuantity * itemWeight) * itemWeightCount]
	[totalWeight           = totalWeight + ttlItemWeight]
}]

[H, if(countWeight       == 1), code:{
	[macro("Calc Coin Weight@Lib:Inventory"): "Personal"]
	[totalWeight           = totalWeight + macro.return]
}]

[H, if(countPartyWeight  == 1), code:{
	[macro("Calc Coin Weight@Lib:Inventory"): "Party"]
	[totalWeight           = totalWeight + macro.return]
}]

[H: macro.return          = totalWeight]

!!
@@ @cssPageName
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
body {
	font-family:Arial, sans-serif; 
	font-size:12; 
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3); 
	color:#ff0201; 
}

a {
	text-decoration:none; 
	color:black; 
}

tr:nth-child(odd) {
	background-color: Lightgreen; 
}
.oddRow {
	background-color: #FFFFFF;
}

.evenRow {
	background-color: #EEEEAA
}

table (
	cellspacing:0;
	padding:0px; 
	border:0px;
)

!!
@@ @List Items
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: curItemList = macro.args]

[H: curItems = getLibProperty(curItemList, getMacroLocation())]
[H, if(json.type(curItems) !=  "ARRAY"): curItems = "[]"]
[H: sortMacro = "List Sort Name@Lib:Inventory"]
[H, macro(sortMacro): curItems]
[H: curItems = macro.return]

[H: macro.return = json.path.read(curItems, ".itemName")]

!!
@@ @Test List Items
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: testItemList = "Ammodetails"]

[H, macro("List Items@Lib:Inventory"): testItemList]
[R: macro.return]

!!
@@ @Add Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]
[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: denom0 = json.get(denomData, "Denom0")]
[H: abbvDenom0 = json.get(denomData, "abbvDenom0")]

[H: screen = input(
	"thisDenom|Silver Pieces|Full name",
	"thisAbbvDenom|SP|Short name",
	"thisValue|10|Number of "+abbvDenom0+" one of these can buy",
	"thisWeight|.02|Weight of one of these"
)]
[H: abort(screen)]

[H: thisValueReport = "1 "+thisAbbvDenom+" = "+thisValue+" "+abbvDenom0]
[H: denomData = json.set(denomData, "Denom"+numDenoms, thisDenom, "abbvDenom"+numDenoms, thisAbbvDenom, "Value"+numDenoms, thisValue, "ValueReport"+numDenoms, thisValueReport, "Weight"+numDenoms, thisWeight)]
[H: setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]

!!
@@ @Adjust Party Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: numToChange = macro.args]

[H: denomData = json.get(getProperty("Coinpurse"), "denomData")]
[H: numDenoms = json.length(denomData) / 5]
[H: denomList = ""]
[H, c(numDenoms): denomList = listAppend(denomList, json.get(denomData, "Denom" + roll.count))]
[H: denomToChange = listGet(denomList, numToChange)]
[H: partyCpData = json.get(getProperty("Coinpurse"), "Party")]
[H, if(json.type(partyCpData) != "OBJECT"): partyCpData = "{}"]
[H: thisAmount = json.get(partyCpData, denomToChange)]

[H: abort(input(
	"newAmount|" + thisAmount + "|How many " + denomToChange + "?",
	"junk|OR-------------|--------------|Label",
	"changeAmount|0|Change by how much?"
))]

[H: assert(isNumber(newAmount) && isNumber(changeAmount), "Entries must be numbers", 0)]

[H, if(changeAmount != 0): newAmount = thisAmount + changeAmount]
[H: partyCpData = json.set(partyCpData, denomToChange, newAmount)]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Party", partyCpData))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Personal Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: numToChange = macro.args]

[H: denomData = json.get(getProperty("Coinpurse"), "denomData")]
[H: numDenoms = json.length(denomData) / 5]
[H: denomList = ""]
[H, c(numDenoms): denomList = listAppend(denomList, json.get(denomData, "Denom" + roll.count))]
[H: denomToChange = listGet(denomList, numToChange)]
[H: personalCpData = json.get(getProperty("Coinpurse"), "Personal")]
[H, if(json.type(personalCpData) != "OBJECT"): personalCpData = "{}"]
[H: thisAmount = json.get(personalCpData, denomToChange)]

[H: abort(input(
	"newAmount|" + thisAmount + "|How many " + denomToChange + "?",
	"junk|OR-------------|--------------|Label",
	"changeAmount|0|Change by how much?"
))]

[H: assert(isNumber(newAmount) && isNumber(changeAmount), "Entries must be numbers", 0)]

[H, if(changeAmount != 0): newAmount = thisAmount + changeAmount]
[H: personalCpData = json.set(personalCpData, denomToChange, newAmount)]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Personal", personalCpData))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Calc Coin Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: calcWhich = macro.args]
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]

[H: wealthData = json.get(cpData, calcWhich)]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) != "OBJECT"): denomData = "{}"]
[H, if(json.type(wealthData) != "OBJECT"): wealthData = "{}"]

[H: numDenoms = json.length(denomData)/5]

[H: weightTotal = 0]
[H, c(numDenoms), code:{
	[thisDenom = json.get(denomData, "Denom"+roll.count)]
	[thisWeight = json.get(denomData, "Weight"+roll.count)]
	[thisAmount = json.get(wealthData, thisDenom)]
	[if( !isNumber(thisAmount) ): thisAmount = 0]
	[weightTotal = weightTotal + (thisWeight * thisAmount)]
}]

[H: macro.return = round(weightTotal, 3)]

!!
@@ @Change Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]

[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: list = ""]
[H, c(numDenoms), code:{
	[addthis = json.get(denomData, "Denom"+roll.count)+" "+json.get(denomData, "Valreport"+roll.count)]
	[list = listAppend(list, addthis)]
}]

[H: screen = input(
	"optionpick|"+list+"|Change Which?|radio|"
)][H: abort(screen)]

[H: baseshort = json.get(denomData, "abbvDenom0")]

[H: thisDenom = json.get(denomData, "Denom"+optionpick)]
[H: thisabbvDenom = json.get(denomData, "abbvDenom"+optionpick)]
[H: thisValue = json.get(denomData, "Value"+optionpick)]
[H: thisWeight = json.get(denomData, "Weight"+optionpick)]

[H, if(optionpick == 0), code:{
	[screen = input(
		"thisDenom|"+thisDenom+"|Full Name",
		"thisabbvDenom|"+thisabbvDenom+"|Short Name",
		"thisWeight|"+thisWeight+"|Weight of One"
	)][abort(screen)]
};{
	[screen = input(
		"thisDenom|"+thisDenom+"|Full Name",
		"thisabbvDenom|"+thisabbvDenom+"|Short Name",
		"thisValue|"+thisValue+"|How many "+baseshort+" can 1 of these buy?",
		"thisWeight|"+thisWeight+"|Weight of One"
	)]
}]

[H: thisvalreport = "1 "+thisabbvDenom+" = "+thisValue+" "+baseshort]
[H: denomData = json.set(denomData, "Denom"+optionpick, thisDenom, "abbvDenom"+optionpick, thisabbvDenom, "Value"+optionpick, thisValue, "Valreport"+optionpick, thisvalreport, "Weight"+optionpick, thisWeight)]

[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "denomData", denomData))]

!!
@@ @Coinpurse Frame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[frame5("Coinpurse"):{
	[macro("Coinpurse HTML@this"): ""]
}]

!!
@@ @Coinpurse HTML
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) !=  "OBJECT"): cpData = "{}"]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) !=  "OBJECT"): denomData = "{}"]
[H: denomLength = json.length(denomData)]
[H: countDenoms = denomLength/5]
[H, if(countDenoms > 0): cellWidth = (100/countDenoms); cellWidth = "25"]
[H: denomList = ""]
[H: abbvDenomList = ""]
[H, c(countDenoms), code:{
	[denomList = listAppend(denomList, json.get(denomData, "Denom"+roll.count))]
	[abbvDenomList = listAppend(abbvDenomList, json.get(denomData, "abbvDenom"+roll.count))]
}]

[H: personalCpData = json.get(cpData, "Personal")]
[H, if(json.type(personalCpData) !=  "OBJECT"): personalCpData = "{}"]
[H: partyCpData = json.get(cpData, "Party")]
[H, if(json.type(partyCpData) !=  "OBJECT"): partyCpData = "{}"]
[H: personalwealthlist = ""]
[H: partywealthlist = ""]
[H, foreach(denom, denomList), code:{
	[varvar = json.get(personalCpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[personalWealthList = listAppend(personalWealthList,varvar)]
	[varvar = json.get(partyCpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[partyWealthList = listAppend(partyWealthList,varvar)]
}]
[H: showParty = json.get(cpData, "showParty")]
[H, if(showParty ==  ""): showParty = "Open"]
[H: countWeight = json.get(cpData, "Countweight")]
[H: countPartyWeight = json.get(cpData, "Countpartyweight")]
[H, if( !isNumber(countWeight) ): countWeight = 1]
[H, if( !isNumber(countPartyWeight) ): countPartyWeight = 0]
[H: curToken = upper(token.name)+"'S COINPURSE"]
[H, macro("Calc Coin Weight@this"):"Party"]
[H: partyCalcWealth = macro.return]
[H, if(countPartyWeight ==  0): coinWeight = "["+round(macro.return,3)+"]"; coinWeight = macro.return]

[H: linkConfigCurrency = macroLink('Configure Currency','Configure Currency@this','none','',token.name)]
[H: linkPartyWealth = macroLink(showParty+' Party Wealth', 'Toggle Party@this', 'none', '', token.name)]
[H, macro("Calc Coin Weight@this"): "Personal"]
[H: resultVar = macro.return]
[H, if(countWeight ==  0): coinWeight = '['+round(macro.return,3)+']'; coinWeight = macro.return]
[H: linkCountCoinWeight = macroLink(coinWeight, 'Count Coinweight@this', 'none', 'Personal', token.name)]

[H: output =          strformat('<table>')]
[H: output = output + strformat('<tr style="width:100%;"><td colspan="%{countDenoms}" style="width:100%; text-align:center;"><b>%{curToken}</b></td></tr>')]
[H: output = output + strformat('<tr style="width:100%;"><td colspan="2" style="width:100%; text-align:center;">%{linkConfigCurrency}</td><td colspan="2" style="width:100%; text-align:center;">%{linkPartyWealth}</td></tr>')]
[H: output = output + strformat('<tr><td colspan="%{countDenoms}" style="width:100%; text-align:center;"><b>Personal</b>&nbsp; weight: %{linkCountCoinWeight}</td></tr>')]

[H: output = output+strformat('<tr>')]
[H, foreach(abbvDenom, abbvDenomList, ""), code:{
	[H: output = output+strformat('<td style="width:%{cellWidth}%; text-align:center;">%{abbvDenom}</td>')]
}]
[H: output = output+strformat('</tr>')]
[H: output = output+strformat('<tr>')]
[H, foreach(bitowealth, personalWealthList, ""), code:{
	[H: linkAdjPersonalWealth = macroLink(bitowealth, "Adjust Personal Wealth@this", "none", roll.count, token.name)]
	[H: output = output+strformat('<td style="width:%{cellWidth}%; text-align:center;">%{linkAdjPersonalWealth}</td>')]
}]
[H: output = output+strformat('</tr>')]

[H, if(showParty == "Hide"), code:{
	[H: linkCountCoinWeightParty = macroLink(coinweight, "Count Coinweight@this", "none", "Party", token.name)]
	[H: output = output+strformat('<tr><td style="width:100%; text-align:center;"><b>Party</b>&nbsp; weight: &nbsp;%{partyCalcWealth}%{linkCountCoinWeightParty}</td></tr>')]
	[H, foreach(abbvDenom, abbvDenomList, ""), code:{
		[H: output = output+strformat('<tr><td style="width:%{cellWidth}%; text-align:center;">%{abbvDenom}</td></tr>')]
	}]
	[H, foreach(bitowealth, partyWealthList, ""), code:{
		[H: linkAdjPartyWealth = macroLink(bitowealth, "Adjust Party Wealth@this", "none", roll.count, token.name)]
		[H: output = output+strformat('<tr><td style="width:%{cellWidth}%; text-align:center;"><b>%{linkAdjPartyWealth}</b></td></tr>')]
	}]
};{}]

[H, if(isGM()), code:{
	[H: linkShowPlayerWealth = macroLink("Show All Player Wealth", "Get All Player Wealth@this", "none", "", getMacroLocation())]
	[H: linkCheckPlayerWealth = macroLink("Check A Player's Wealth", "Get Particular Player Wealth@this", "none", "", getMacroLocation())]
	[H: output = output+strformat('<tr style="width:100%;"><td colspan="2" style="width:100%;">%{linkShowPlayerWealth}</td><td colspan="2" style="width:100%;">%{linkCheckPlayerWealth}</td></tr>')]
};{}]
[H: output = output+strformat('</table>')]
[H: macro.return = output]

!!
@@ @Configure Currency
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]

[H: denomData = json.get(cpData, "denomData")]
[H, if(string(denomData) ==  ""): denomData = "{}"]
[H, if(json.contains(denomData, "Denom0")), code:{
	[if(json.get(denomData, "Denom0") == ""): check = 1; check = 0]
};{
	[check = 1]
}]

[H, if(check ==  1), code:{
	[screen = input(
		"tab0|Base Currency||tab",
		"denom0|Copper Pieces|Base Currency",
		"abbvDenom0|CP|Abbreviation",
		"weight0|.02|Weight of One Piece",
		"tab1|Instructions||tab",
		"junk1|A long and a short label|Each denomination needs|Label",
		"junk2|Value of other denominations is based on this|Start by setting a base denomination|Label",
		"junk4|Value of others will be set in terms of how much of the base they can buy|It is easiest to have base denomination be the lowest available|Label",
		"junk3|You may change it or add/remove other forms of currency through the configure link|Once this is set|Label"
	)][abort(screen)]
	[denomData = json.set(denomData, "Denom0", denom0, "abbvDenom0", abbvDenom0, "Value0", 1, "Valreport0", "1 "+abbvDenom0+" = 1 "+abbvDenom0, "Weight0", weight0)]
	[setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]
};{
	[numofden = json.length(denomData)]
	[numtorun = (numofden/5)-1]
	[list = json.get(denomData, "Denom0")+" (Base)"]
	[c(numtorun), code:{
		[list = listAppend(list, json.get(denomData, "Denom"+(roll.count+1)))]
	}]	
	[screen = input(
		"junk1|"+list+"|Denoms currently defined|Label",
		"optionpick|Change A Denomination,Add A New Denomination,Remove A Denomination|What would you like to do?|radio|"
	)][abort(screen)]
	[if(optionpick == 0), code:{[macro("Change Denom@this"): ""]};{}]
	[if(optionpick == 1), code:{[macro("Add Denom@this"): ""]};{}]
	[if(optionpick == 2), code:{[macro("Remove Denom@this"): ""]};{}]
}]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Count Coinweight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H, if(macro.args ==  "Party"): countWeight = "Countpartyweight"; countWeight = "Countweight"]

[H: cpData = getProperty("Coinpurse")]
[H: varvar = json.get(cpData, countWeight)]
[H, if(varvar ==  1): varvar = 0; varvar = 1]
[H: setProperty("Coinpurse", json.set(cpData, countWeight, varvar))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Get All Player Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cond = '{ pc:1 }']
[H: tokenList = getTokenNames(",", cond)]
[H, if(macro.args != ""): tokenList = macro.args]

[H: displayJson = "{}"]
[H, foreach(token, tokenList), code:{
	[token(token), code:{
		[H: thisPersonalWealth = json.get(getProperty("Coinpurse"), "Personal")]
		[H, if(string(thisPersonalWealth) ==  ""): thisPersonalWealth = "{}"]
		[H, if(json.length(thisPersonalWealth) > 0): displayJson = json.set(displayJson, token+"'s Personal", thisPersonalWealth)]
		[H: thisPartyWealth = json.get(getProperty("Coinpurse"), "Party")]
		[H, if(string(thisPartyWealth) ==  ""): thisPartyWealth = "{}"]
		[H, if(json.length(thisPartyWealth) > 0): displayJson = json.set(displayJson, token+"'s Party", thisPartyWealth)]
	}]
}]

[H: output = ""]
[H, foreach(entry, displayJson), code:{
	[H: entryData = json.get(displayJson, entry)]
	[H: numDenoms = json.length(entryData)]
	[H: cellWidth = 100/numDenoms+"%"]
	[H: output = output+strformat('%{entry}<table style="cellspacing:0px; cellpadding:0px; border:1px solid black; width:50%;">')]
	[H, foreach(denom, entryData), code:{ 
      [H: output = output+strformat('<tr><td style="width:%{cellwidth}">%{denom}</td>')]
      [H: testValue = json.get(entrydata, denom)]
      [H: output = output+strformat('<td style="width:%{cellwidth}">%{testValue}</td></tr>')]
   }]
	[H: output = output+strformat('</table><br>')]
}]
[H: setProperty("tm.Test", output)]

[frame5("Player Wealth"):{
	[R: output]
}]

!!
@@ @Get Particular Player Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cond = '{ pc:1 }']
[H: tokenList = getTokenNames(",", cond)]

[H: screen = input(
	"playerPicked|"+tokenList+"|Which player do you want to spy on?|radio|VALUE = STRING"
)][H: abort(screen)]

[macro("Get All Player Wealth@this"): playerPicked]

!!
@@ @Remove Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]

[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: list = ""]
[H, c(numDenoms), code:{
	[addthis = json.get(denomData, "Denom"+roll.count)+" "+json.get(denomData, "Valreport"+roll.count)]
	[list = listAppend(list, addthis)]
}]

[H: screen = input(
	"optionpick|"+list+"|Change Which?|radio|"
)][H: abort(screen)]

[H: assert(optionpick>0, "Cannot Remove Base Denomination", 0)]

[H: numtorun = numDenoms-optionpick]
[H, c(numtorun), code:{
	[nextdenom = json.get(denomData, "Denom"+(optionpick+1))]
	[nextabbvDenom = json.get(denomData, "abbvDenom"+(optionpick+1))]
	[nextvalue = json.get(denomData, "Value"+(optionpick+1))]
	[nextvalreport = json.get(denomData, "Valreport"+(optionpick+1))]
	[nextweight = json.get(denomData, "Weight"+(optionpick+1))]
	[denomData = json.set(denomData, "Denom"+optionpick, nextdenom, "abbvDenom"+optionpick, nextabbvDenom, "Value"+optionpick, nextvalue, "Valreport"+optionpick, nextvalreport, "Weight"+optionpick, nextweight)]
	[optionpick = optionpick+1]
}]

[H: lastone = numDenoms-1]
[H: denomData = json.remove(denomData, "Denom"+lastone)]
[H: denomData = json.remove(denomData, "abbvDenom"+lastone)]
[H: denomData = json.remove(denomData, "Value"+lastone)]
[H: denomData = json.remove(denomData, "Valreport"+lastone)]
[H: denomData = json.remove(denomData, "Weight"+lastone)]

[H: setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]

!!
@@ @Toggle Party
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]
[H: showparty = json.get(cpData, "Showparty")]
[H, if(showparty ==  ""): showparty = "Hide"]
[H, if(showparty ==  "Hide"): showparty = "Open"; showparty = "Hide"]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Showparty", showparty))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Description
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: selItemIndex = json.indexOf(getProperty("Items"), selItem)]
[H: selItemDescription = json.get(selItem, "itemDescription")]

[H: abort(input(
	"newSelItemDescription|"+selItemDescription+"|Enter new description."
))]

[H: newSelItem = json.set(selItem, "itemDescription", newSelItemDescription)]
[H: setProperty("Items", json.set(getProperty("Items"), selItemIndex, newSelItem))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Location.Name
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: tknPropItems = getProperty("Items")]
[H: selItemIndex = json.indexOf(tknPropItems, selItem)]
[H: selItemName = json.get(selItem, "itemName")]
[H: selItemLocation = json.get(selItem, "itemLocation")]
[H: selItemLocationPrior = json.get(selItem, "itemLocationPrior")]

[H: listContainer = ""]
[H, foreach(entry, tknPropItems), code:{
	[H, if(json.get(entry, "itemContainer") == 1), code:{
      [H: listContainer = listAppend(listContainer, json.get(entry, "itemName"))]
	};{
   }]
}]

[H: abort(input(
   "selListItem|General Inventory,"+listContainer+"|Where would you like to place this Item?|LIST|select = 0 value = number"
))]
[H, if(selListItem == 0), code:{
   [H: selItem = json.set(selItem, "itemLocation", selItemLocation)]
   [H: selItem = json.set(selItem, "itemLocationPrior", 0)]
   [H: setProperty("Items", json.set(tknPropItems, selItemIndex, selItem))]
};{
   [H: newItemLocation = listGet(listContainer, selListItem - 1)]
   [H: selItem = json.set(selItem, "itemLocation", newItemLocation)]
   [H: selItem = json.set(selItem, "itemLocationPrior", 1)]
   [H: setProperty("Items", json.set(tknPropItems, selItemIndex, selItem))]
}]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Quantity
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: tknPropItems = getProperty("Items")]
[H: selItemIndex = json.indexOf(tknPropItems, selItem)]
[H: oldSelItemQty = json.get(selItem,"itemQuantity")]

[H: abort(input(
	"newSelItemQty|"+oldSelItemQty+"|What is your current quantity?"
))]

[H: selItem = json.set(selItem,"itemQuantity", newSelItemQty)]
[H: setProperty("Items",json.set(tknPropItems, selItemIndex, selItem))]

[R: "You now have "+newSelItemQty+" x "+json.get(selItem, "itemName")]
[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: tknPropItems = getProperty("Items")]
[H: selItemIndex = json.indexOf(tknPropItems, selItem)]
[H: oldWeight = json.get(selItem, "itemWeight")]

[H: abort(input(
	"newWeight|"+oldWeight+"|What's it weigh?"
))]

[H: selItem = json.set(selItem,"itemWeight", newWeight)]
[H: setProperty("Items", json.set(tknPropItems, selItemIndex, selItem))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Adjust Item Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: curItemWeight = json.get(selItem, "itemWeight")]
[H: curItemSize = json.get(json.get(selItem, "useInfo"), "itemSize")]


[H, if(curItemSize == "Small"), code:{
   [H: curItemWeight = curItemWeight / 2]
};{
}]
[H, if(curItemSize != "Small" && curItemSize != "Medium"), code:{
   [H, if(curItemSize == "Large"), code:{
      [H: curItemWeight = curItemWeight * 2]
   };{
      [H: abort(input(
         "junkvar|You have to help us out|We are missing some info|Label",
         "Weight|5|Enter the correct weight of the ammo"
      ))]
   }]
};{
}]

[H: macro.return = curItemWeight]

!!
@@ @Item Click
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: selClass = json.get(selItem, "Class")]

[H, if(selClass ==  "Wands"): curList = "Use Wand, Recharge Wand"; curList = ""]
[H: curList = listAppend(curList, "Organize, Modify, Give, Remove")]

[H: abort(input(
	"pickedItem|"+curList+"|What would you like to do?|radio|select = 0 VALUE = STRING"
))]

[if(pickedItem == "Use Wand"), code:{
   [macro("Use Wand@Lib:Inventory"): selItem]
   };{
   }]
[if(pickedItem == "Recharge Wand"), code:{
   [macro("Recharge Wand@Lib:Inventory"): selItem]
   };{
   }]
[if(pickedItem == "Organize"), code:{
   [macro("Adjust Location.Name@Lib:Inventory"): selItem]
   };{
   }]
[if(pickedItem == "Remove"), code:{
   [macro("Remove Item@Lib:Inventory"): selItem]
   };{
   }]
[if(pickedItem == "Modify"), code:{
   [macro("Modify Entry@Lib:Inventory"): selItem]
   };{
   }]
[if(pickedItem == "Give"), code:{
   [macro("Give Item@Lib:Inventory"): selItem]
   };{
   }]

!!
@@ @Modify Entry
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: index = json.indexOf(getProperty("Items"), selItem)]
[H: oldSelItemWeight = json.get(selItem, "itemWeight")]
[H: oldSelItemContainer = json.get(selItem, "itemContainer")]
[H: oldSelItemDescription = json.get(selItem, "itemDescription")]

[H: abort(input(
	"newSelItemWeight|"+oldSelItemWeight+"|Weight per unit.",
	"newSelItemDescription|"+oldSelItemDescription+"|Description of item.",
	"newSelItemContainer|"+oldSelItemContainer+"|Treat as a container?|CHECK"
))]

[H: newSelItem = json.set(selItem, "itemContainer", newSelItemContainer,"itemWeight",newSelItemWeight,"itemDescription",newSelItemDescription)]
[H: setProperty("Items", json.set(getProperty("Items"), index, newSelItem))]

[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Recharge Wand
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: wandDetails = macro.args]

[H: itemindex = json.indexOf(getProperty("Items"), wandDetails)]
[H: useInfo = json.get(wandDetails, "useInfo")]
[H: charges = json.get(useInfo, "Charges")]

[H: abort(input(
	"var|"+charges+" charges|You currently have|Label",
	"charges|50|Enter the number of charges this wand should have"
))]

[H: itemName = json.get(wandDetails,"Name")]
[H: useInfo = json.set(useInfo,"Charges",charges)]
[H: wandDetails = json.set(wandDetails,"useInfo",useInfo)]
[H: setProperty("Items", json.set(getProperty("Items"),itemindex, wandDetails))]

[R: itemName+" recharged. "+charges+" charges now remain."]
[macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Use 1 Ammo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=3 ; color=default ; playerEditable=true ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: ammoName = macro.args]
[H: done = 0]

[H, foreach(item, Items), code:{
	[H: name = json.get(item, "itemName")]
	[H, if(name == ammoName && done != 1), code:{
      [H: qty = json.get(item, "itemQuantity")]
      [H: newitem = json.set(item, "itemQuantity", qty - 1)]
      [H: Items = json.set(Items, roll.count, newitem)]
      [H: done = 1]
	};{
   }]
}]

!!
@@ @Use Wand
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: wandDetails = macro.args]
[H: itemindex = json.indexOf(getProperty("Items"), wandDetails)]

[H: useInfo = json.get(wandDetails, "useInfo")]
[H: charges = json.get(useInfo, "Charges")]
[H: useInfo = json.set(useInfo, "Charges",charges-1)]
[H: wandDetails = json.set(wandDetails, "useInfo", useInfo)]

[H: itemName = json.get(wandDetails, "Name")]
[H: setProperty("Items", json.set(getProperty("Items"), itemindex, wandDetails))]

[H: plo.specOutput("all", token.name + " uses " + itemName)]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Weight Count Toggle
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: selIndex = json.indexOf(getProperty("Items"), selItem)]
[H: oldcountIt = json.get(selItem, "itemWeightCount")]
[H, if(oldcountIt == 1): newCountIt = 0; newCountIt = 1]

[H: newSelItem = json.set(selItem, "itemWeightCount", newcountIt)]
[H: setProperty("Items", json.set(getProperty("Items"), selIndex, newSelItem))]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Clear Inventory
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=4 Removing Items ; tooltip= ; minWidth=140
[H: abort(input(
	"conf|No,Yes|This will completely blank your inventory. Are you sure you want to do this?|radio"
))]

[H, if(conf == 1), code:{
	[H: setProperty("Items", "{}")]
	[R, macro("Invent Main Starter@Lib:Inventory"): ""]
};{
}]

!!
@@ @Remove Item
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=4 Removing Items ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: selItemList = getProperty("Items")]
[H: rmvItemName = json.get(selItem, "itemName")]

[H: index = json.indexOf(selItemList, selItem)]
[H: selItemList = json.remove(selItemList, index)]

[H, foreach(entry, selItemList), code:{
	[H, if(json.get(entry, "itemName") == rmvItemName), code:{
      [H: entry = json.set(entry, "itemName", json.get(entry, "itemName"))]
      [H: selItemList = json.set(selItemList, roll.count, entry)]
	};{
   }]
}]

[H: setProperty("Items", selItemList)]

[R, macro("Invent Main Starter@Lib:Inventory"): ""]

!!
@@ @Complete Gift
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy=3 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: passed = macro.args]
[H: giverID = json.get(passed, "Giver")]
[H: recipientID = json.get(passed, "Recipient")]
[H: giveQty = json.get(passed, "Give Qty")]
[H: selItemDetails = json.get(passed, "ItemDetails")]
[H: itemName = json.get(selItemDetails, "itemName")]

[H, token(giverID): assert(isOwner(), "<font color = 'red'>Dude! Keep your hands to yourself!</font>", 0)]

[H: itemIndex = json.indexOf(getProperty("Items"), selItemDetails)]

[H: assert(itemIndex > -1, "<font color = red>Numbers are not lining up - you may have already removed this item, or it may have been altered by another function. You will have to manually fix things.</font>")]

[H: newSelItemQty = json.get(selItemDetails, "itemQuantity")]

[H, if(newSelItemQty == giveQty || newSelItemQty < giveQty), code:{
	[H: setProperty("Items", json.remove(getProperty("Items"), itemIndex))]
};{
	[H: newItemDetails = json.set(selItemDetails, "itemQuantity", newSelItemQty - giveQty)]
	[H: setProperty("Items", json.set(getProperty("Items"), itemIndex, newItemDetails))]
}]

[R: giveQty+" x "+itemName+" removed from your inventory."]
[H: plo.specOutput('gm', giverID+" has removed "+giveqty+" x "+itemName+" from inventory.")]

!!
@@ @Get Targets
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: listTokens = listSort(getVisibleTokenNames(), "A")]
[H: listImages = listTokens]
[H: listAmount = listCount(listImages)]
[H, COUNT(listAmount), code:{
	[H: tokenName = listGet(listImages, roll.count)]
	[H, token(tokenName): image = getTokenImage()]
	[H: distance = getDistance(tokenName)]
	[H: listImages = listReplace(listImages, roll.count, tokenName + " (" + distance + " feet) " + image)] 
}]
[H: listTargets = listImages]
[H: macro.return = listTargets]

!!
@@ @Give Item
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: selItem = macro.args]
[H: selItemName = json.get(selItem, "itemName")]
[H: selItemQty = json.get(selItem, "itemQuantity")]

[H: get.targets()]
[H: targetImageList = macro.return]
[H: targetIDList = listSort(getVisibleTokenNames(), "A")]
[H: curToken = token.name]

[H, if(selItemQty == 1), code:{
	[H: abort(input(
	"recipient|"+targetImageList+"|Who would you like to give this item?|LIST|ICON = TRUE ICONSIZE = 20"
	))]
	[H: giveQuantity = 1]
	[H: curToken = curToken+" offers a "+selItemName]
};{
	[H: abort(input(
	"recipient|"+targetImageList+"|Who would you like to give some of these?|LIST|ICON = TRUE ICONSIZE = 20",
	"giveQuantity|1|Give how many (you currently have "+selItemQty+")?"
	))]
	[H: curToken = curToken+" offers "+giveQuantity+" x "+selItemName]
}]

[H: recipientID = listGet(targetIDList, recipient)]
[H: curToken = curToken+" to "+recipientID]
[H: giverID = token.name]
[H: pass = json.set("{}","itemDetails", selItem, "Recipient", recipientID, "Giver", giverID, "Give Qty", giveQuantity)]

[H: linkReceiveItem = macroLink("Click Here", "Receive Item@Lib:Inventory", "self", pass, recipientID)]

[H: listOwners = getOwners(",", recipientID)]
[H, if(isOwnedByAll(recipientID)): listOwners = getAllPlayerNames()]
[H: assert(listOwners != "", "<font color = red>The chosen token is unowned - please ask the GM to assign it an owner to proceed.</font>", 0)]
[H: recipientOwner = listGet(listOwners, 0)]
[H: linktarget = json.append("", recipientOwner)]
[H: plo.specOutput('gm', curToken+" "+linkReceiveItem+" to accept it")]

!!
@@ @Receive Item
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: passedItem = macro.args]
[H: giverID = json.get(passedItem, "Giver")]
[H: recipientID = json.get(passedItem, "Recipient")]
[H: giveQty = json.get(passedItem, "Give Qty")]
[H: selItemDetails = json.get(passedItem, "Itemdetails")]
[H: selItemName = json.get(selItemDetails, "itemName")]
[H: selItemLocation = json.get(selItemDetails, "itemLocation")]

[H, token(recipientID): assert(isOwner(), "<font color = 'red'>Dude! Keep your hands to yourself!</font>", 0)]

[H: newSelItemDetails = json.set(selItemDetails, "itemQuantity", giveQty, "itemLocation", selItemLocation, "itemLocationPrior", 0)]
[H: setProperty("Items", json.append(getProperty("Items"), newSelItemDetails))]

[H: linkCompleteGift = macroLink("Click Here", "Complete Gift@Lib:Inventory", "self", passedItem, giverID)]

[H, if(isOwnedByAll(giverID)): listOwners = getAllPlayerNames(); listOwners = getOwners(",", giverID)]
[H: assert(listOwners != "", "<font color = red>The token that started all this doesn't have an owner assigned - please ask the GM to assign it an owner to proceed.</font>", 0)]
[H: giverOwner = listGet(listOwners, 0)]

[H: linktarget = json.append("", giverOwner)]
[H: output = strformat('<b><i>%{recipientID} has received %{selItemName} x %{giveQty} from %{giverID}.</i></b>')]
[R: output]

!!
@@ @am.csvToObj
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
<!-- csvToObj(data,prefix,keyIndexes): returnObj

	data - raw csv tabbed data with header row. Last column must have data or dummy column else empty data could be truncated.
		note: be sure to delete the last tab in the header when having a dummy column.
	prefix - prefix to add to key name
	keyIndexes - for generating unique identifiers. Uses index of table and defaults to 0
	
	returnObj - object of objects representing the table
	
-->

[H: data = arg(0)]
[H, if(argCount() >= 2): prefix = arg(1); prefix =""]
[H, if(argCount() >= 3): keyIndexes = arg(2); keyIndexes = "0"]

[H: TAB = decode("%09")]
[H: EOL = decode("%0A")]

[H: data = json.fromList(data,EOL)]
[H: headers = json.fromList(json.get(data,0),TAB)]
[H: data = json.remove(data,0)]

[H: returnObj = "{}"]
[H, foreach(line,data), code: {
	[H: keyProp = prefix]
	[H, foreach(index,keyIndexes): keyProp = keyProp + "_" + replace(lower(listGet(line,index,TAB)),"[^0-9a-z_]","")]
	[H: obj = "{}"]
	[H, foreach(header,headers): obj = json.set(obj,header,listGet(line,roll.count,TAB))]
	[H: returnObj = json.set(returnObj,keyProp,obj)]
}]

[H: macro.return = returnObj]

!!
@@ @am.csvToRecord
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
<!-- csvToRecord(data): returnRecord

	data - raw csv tabbed data with header row. Last column must have data in every row or you can have a
		dummy column with data in each row, but that column must not have a header. Otherwise, empty data could be truncated.
	
	returnRecord - array of objects representing the table
	
-->

[H: data = arg(0)]

[H: TAB = decode("%09")]
[H: EOL = decode("%0A")]

[H: data = json.fromList(data,EOL)]
[H: headers = json.fromList(json.get(data,0),TAB)]
[H: data = json.remove(data,0)]

[H: returnRecord = "[]"]
[H, foreach(line,data), code: {
	[H: obj = "{}"]
	[H, foreach(header,headers): obj = json.set(obj,header,listGet(line,roll.count,TAB))]
	[H: returnRecord = json.append(returnRecord,obj)]
}]

[H: macro.return = returnRecord]

!!
@@ @plo.conditionalOutput
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
[R: json.get(macro.args, 'toSend')]

!!
@@ @plo.specOutput
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
[H: toSend = '{}']
[H: argTest = json.type(macro.args)]
[H, if(argTest == 'ARRAY'), code:
{
	[H: toWho = 'list']
	[H: toSend = json.set(toSend, 'mlOutputList', macro.args)]
};{
	[H: toWho = macro.args]
}]
[H: toSend = json.set(toSend, 'toSend', arg(1))]
[H: conditionalOutput = macroLinkText('plo.conditionalOutput@this', toWho, toSend)]
[H: execLink(conditionalOutput, 1)]

!!
@@ @onCampaignLoad
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=green ; playerEditable=false ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
[H: assetid = getTokenImage()]
[H: setLibProperty("ImgID", assetid, getMacroLocation())]
[H: defineFunction("get.targets", "Get Targets@this", 1)]
[H: defineFunction("plo.specOutput", "plo.specOutput@this")]
[H: defineFunction("am.csvToObj", "am.csvToObj@this")]
[H: defineFunction("am.csvToRecord", "am.csvToRecord@this")]

!!