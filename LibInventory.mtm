@@ @onCampaignLoad
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=green ; playerEditable=false ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: assetid = getTokenImage()]
[H: setLibProperty("ImgID", assetid, getMacroLocation())]
[H: defineFunction("get.targets", "Get Targets@this", 1)]
[H: defineFunction("plo.specOutput","plo.specOutput@this")]
[H: defineFunction("am.csvToObj","am.csvToObj@this")]
[H: defineFunction("am.csvToRecord","am.csvToRecord@this")]

!!
@@ @(new)
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: theseDetails = WeaponsDetails]
[H: newDetails = theseDetails]
[H, foreach(entry, theseDetails), code:{
	[H: entryDetails = json.get(theseDetails, entry)]
	[H: thisDesc = json.get(entryDetails, "Description")]
	[H: screen = input("thisDesc|"+thisDesc+"|Description for "+entry+"|text|width = 100")]
   [H: abort(screen)]
	[H: newEntryDetails = json.set(entryDetails, "Description", thisDesc)]
	[H: newDetails = json.set(newDetails, entry, newEntryDetails)]
}]

[H: WeaponsDetails = newDetails]

!!
@@ @Add 4E Ammo to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "itemName||Name","itemWeight||Weight","itemDesc||Description|text|width = 50","itemContainer|0|Container?|check"
)]
[H: abort(screen)]

[H: objectToAdd = json.set("{}", "Name", itemName, "Weight", itemWeight, "Container", itemContainer, "Capacity", 0, "Cap", 0, "Location", itemName, "LocPrior", 0, "Class","Goods", "Description", itemDesc, "useInfo", "{}", "WeightCount", 1)]

[H: setLibProperty("AmmoDetails", json.set(getLibProperty("AmmoDetails", "Lib:inventory"), itemName, objectToAdd), getMacroLocation())]

[H: list = ""]
[H, foreach(item, getLibProperty("AmmoDetails", "Lib:inventory")), code:{
 [list = listAppend(list, item)]
}]

[H: list = listSort(list,"A")]
[H: setLibProperty("ItemCategoryOptions", json.set(ItemCategoryOptions,"Ammo",list), getMacroLocation())]

[R: itemName] added.

!!
@@ @Add 4E Armor to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "itemName||Name","itemAC||Armor Class Value","itemCheckPenalty||Armor Check Penalty","itemspeedpen||Speed Penalty","itemWeight||Weight","itemWeightClass|Light Armor,Heavy Armor,Shield|Class|radio|value = string"
)]
[H: abort(screen)]

[H, if(itemWeightClass ==  "Shield"): itemClass = "Shield"; itemClass = "Armor"]
[H: itemDesc = itemWeightClass+" - AC;"+itemAC+", Check Pen: "+itemCheckPenalty+", Speed Red: "+itemspeedpen]
[H: objectToAdd = json.set("{}", "Name", itemName, "Weight", itemWeight, "Container", 0, "Capacity", 0, "Cap", 0, "Location", itemName, "LocPrior", 0, "Class", itemClass, "Description", itemDesc, "useInfo", "{}", "WeightCount", 1)]

[H: setLibProperty("ArmorDetails", json.set(getLibProperty("ArmorDetails", "Lib:inventory"),itemName,objectToAdd), "Lib:inventory")]

[H: listArmor = ""]
[H, foreach(item, getLibProperty("ArmorDetails", "Lib:inventory")), code:{
 [listArmor = listAppend(listArmor, item)]
}]

[H: listArmorSort = listSort(listArmor, "A")]
[H: setProperty("ItemCategoryOptions", json.set(getLibProperty("ItemCategoryOptions", "Lib:inventory"), "Armor", listArmorSort), "Lib:inventory")]

[R: itemName] added.

!!
@@ @Add 4E Goods to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "itemName||Name","itemWeight||Weight","itemDesc||Description|text|width = 50","itemContainer|0|Container?|check"
)]
[H: abort(screen)]

[H: objectToAdd = json.set("{}", "Name", itemName, "Weight", itemWeight, "Container", itemContainer, "Capacity", 0, "Cap", 0, "Location", itemName, "LocPrior", 0, "Class","Goods", "Description", itemDesc, "useInfo", "{}", "WeightCount", 1)]

[H: setLibProperty("GoodsDetails", json.set(getLibProperty("GoodsDetails", "Lib:inventory"),itemName,objectToAdd), "Lib:inventory")]

[H: list = ""]
[H, foreach(item,getLibProperty("GoodsDetails")), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: setLibProperty("ItemCategoryOptions", json.set(getLibProperty("ItemCategoryOptions", "Lib:inventory"),"Goods",list), "Lib:inventory")]

[R: itemName] added.

!!
@@ @Add 4E Weapon to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: weapongroups = "Axe, Bow, Crossbow, Flail, Hammer, Heavy Blade, Light Blade, Mace, Pick, Polearm, Sling, Spear, Staff, Unarmed"]
[H: weaponprops = "Heavy_Thrown = 0; High_Crit = 0; Light_Thrown = 0; Load = 0; Off_Hand = 0; Reach = 0; Small = 0; Versatile = 0"]

[H: screen = input(
 "itemName||Name","itemprof||Proficiency Bonus","itemdmg||Damage Die","itemrange|--|Range Incr.","itemWeight||Weight","itemgroup|"+weapongroups+"|Group|list|value = string","itemproperties|"+weaponprops+"|Properties|props|span = true","itemuse|1H Weapon, 2H Weapon|Class|radio|value = string"
)]
[H: abort(screen)]

[H: weaponprops = json.fromStrProp(itemproperties)]
[H: proptext = ""]
[H, foreach(weaponprop, weaponprops): proptext = if(json.get(weaponprops, weaponprop) == 1, listAppend(proptext, weaponprop), proptext)]
[H, if(proptext ==  ""): proptext = "--"]
[H: itemDesc = itemuse+" ("+itemgroup+") - Dmg;"+itemdmg+", Prof;"+itemprof+", Range;"+itemrange+", Properties: "+proptext]
[H: objectToAdd = json.set("{}", "Name", itemName, "Weight", itemWeight, "Container", 0, "Capacity", 0, "Cap", 0, "Location", itemName, "LocPrior", 0, "Class", "Weapon", "Description", itemDesc, "useInfo", "{}", "WeightCount", 1)]

[H: setLibProperty("WeaponsDetails", json.set(getLibProperty("WeaponsDetails", "Lib:inventory"),itemName,objectToAdd), "Lib:inventory")]

[H: list = ""]
[H, foreach(item,WeaponsDetails), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: setLibProperty("ItemCategoryOptions", json.set(getLibProperty("ItemCategoryOptions", "Lib:inventory"),"Weapons",list), "Lib:inventory")]

[R: itemName] added.

!!
@@ @Add Goods to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name","Weight","description","container"
)]
[H: abort(screen)]

[H: object = "Name = "+name+",Weight = "+Weight+",Description = "+description+",Qty = 1,Location = "+name+",LocPrior = 0,Cap = 0,Class = Goods,Container = "+container+",useInfo = {}"]
[H: object = json.fromStrProp(object,",")]

[H: GoodsDetails = json.set(GoodsDetails,name,object)]

[H: list = ""]
[H, foreach(item,GoodsDetails), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: ItemCategoryOptions = json.set(ItemCategoryOptions,"Goods",list)]

[R: name] added.

!!
@@ @Add Special to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name","Weight","description","container"
)]
[H: abort(screen)]

[H: object = "Name = "+name+",Weight = "+Weight+",Description = "+description+",Qty = 1,Location = "+name+",LocPrior = 0,Cap = 0,Class = Special,Container = "+container+",useInfo = {}"]
[H: object = json.fromStrProp(object,",")]

[H: SpecialDetails = json.set(SpecialDetails,name,object)]

[H: list = ""]
[H, foreach(item,SpecialDetails), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: ItemCategoryOptions = json.set(ItemCategoryOptions,"Special",list)]

[R: name] added.

!!
@@ @Add Tool to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name","Weight","description","container"
)]
[H: abort(screen)]

[H: object = "Name = "+name+",Weight = "+Weight+",Description = "+description+",Qty = 1,Location = "+name+",LocPrior = 0,Cap = 0,Class = Tool,Container = "+container+",useInfo = {}"]
[H: object = json.fromStrProp(object,",")]

[H: ToolsDetails = json.set(ToolsDetails,name,object)]

[H: list = ""]
[H, foreach(item,ToolsDetails), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: ItemCategoryOptions = json.set(ItemCategoryOptions,"Tools",list)]

[R: name] added.

!!
@@ @Add Weapons to Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name","Weight","description","container"
)]
[H: abort(screen)]

[H: object = "Name = "+name+",Weight = "+Weight+",Description = "+description+",Qty = 1,Location = "+name+",LocPrior = 0,Cap = 0,Class = Weapons,Container = "+container+",useInfo = {}"]
[H: object = json.fromStrProp(object,",")]

[H: WeaponsDetails = json.set(WeaponsDetails,name,object)]

[H: list = ""]
[H, foreach(item,WeaponsDetails), code:{
 [list = listAppend(list,item)]
}]

[H: list = listSort(list,"A")]
[H: ItemCategoryOptions = json.set(ItemCategoryOptions,"Weapons",list)]

[R: name] added.

!!
@@ @Modify Armor In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen1 = input(
 "change|Name,Class,Qty,Location,LocPrior,Container,Cap,Weight,Description,useInfo|Changing What?|list|select = 6 value = string"
)]
[H: abort(screen1)]

[H: list = ""]
[H: shortlist = ""]
[H, foreach(item,ArmorDetails), code:{
 [addition = item+" ("+json.get(json.get(ArmorDetails,item),change)+")"]
 [shortlist = listAppend(shortlist,item)]
 [list = listAppend(list,addition)]
}]

[H: screen2 = input(
 "pick|"+list+"|Change the "+change+" of which item?|list|select = 0 value = number",
 "var|0|Change to what?"
)]
[H: abort(screen2)]

[H: itemlabel = listGet(shortlist,pick)]
[H: item = json.get(ArmorDetails,itemlabel)]
[H: item = json.set(item,change,var)]
[H: ArmorDetails = json.set(ArmorDetails,itemlabel,item)]

!!
@@ @Modify Goods In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen1 = input(
 "change|Name,Class,Qty,Location,LocPrior,Container,Cap,Weight,Description,useInfo|Changing What?|list|select = 6 value = string"
)]
[H: abort(screen1)]

[H: list = ""]
[H: shortlist = ""]
[H, foreach(item,GoodsDetails), code:{
 [addition = item+" ("+json.get(json.get(GoodsDetails,item),change)+")"]
 [shortlist = listAppend(shortlist,item)]
 [list = listAppend(list,addition)]
}]

[H: screen2 = input(
 "pick|"+list+"|Change the "+change+" of which item?|list|select = 0 value = number",
 "var|0|Change to what?"
)]
[H: abort(screen2)]

[H: itemlabel = listGet(shortlist,pick)]
[H: item = json.get(GoodsDetails,itemlabel)]
[H: item = json.set(item,change,var)]
[H: GoodsDetails = json.set(GoodsDetails,itemlabel,item)]

!!
@@ @Modify Special In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen1 = input(
 "change|Name,Class,Qty,Location,LocPrior,Container,Cap,Weight,Description,useInfo|Changing What?|list|select = 6 value = string"
)]
[H: abort(screen1)]

[H: list = ""]
[H: shortlist = ""]
[H, foreach(item,SpecialDetails), code:{
 [addition = item+" ("+json.get(json.get(SpecialDetails,item),change)+")"]
 [shortlist = listAppend(shortlist,item)]
 [list = listAppend(list,addition)]
}]

[H: screen2 = input(
 "pick|"+list+"|Change the "+change+" of which item?|list|select = 0 value = number",
 "var|0|Change to what?"
)]
[H: abort(screen2)]

[H: itemlabel = listGet(shortlist,pick)]
[H: item = json.get(SpecialDetails,itemlabel)]
[H: item = json.set(item,change,var)]
[H: SpecialDetails = json.set(SpecialDetails,itemlabel,item)]

!!
@@ @Modify Tool In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen1 = input(
 "change|Name,Class,Qty,Location,LocPrior,Container,Cap,Weight,Description,useInfo|Changing What?|list|select = 6 value = string"
)]
[H: abort(screen1)]

[H: list = ""]
[H: shortlist = ""]
[H, foreach(item,ToolsDetails), code:{
 [addition = item+" ("+json.get(json.get(ToolsDetails,item),change)+")"]
 [shortlist = listAppend(shortlist,item)]
 [list = listAppend(list,addition)]
}]

[H: screen2 = input(
 "pick|"+list+"|Change the "+change+" of which item?|list|select = 0 value = number",
 "var|0|Change to what?"
)]
[H: abort(screen2)]

[H: itemlabel = listGet(shortlist,pick)]
[H: item = json.get(ToolsDetails,itemlabel)]
[H: item = json.set(item,change,var)]
[H: ToolsDetails = json.set(ToolsDetails,itemlabel,item)]

!!
@@ @Modify Weapon In Database
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: screen1 = input(
 "change|Name,Class,Qty,Location,LocPrior,Container,Cap,Weight,Description,useInfo|Changing What?|list|select = 8 value = string"
)]
[H: abort(screen1)]

[H: list = ""]
[H: shortlist = ""]
[H, foreach(item,WeaponsDetails), code:{
 [addition = item+" ("+json.get(json.get(WeaponsDetails,item),change)+")"]
 [shortlist = listAppend(shortlist,item)]
 [list = listAppend(list,addition)]
}]

[H: screen2 = input(
 "pick|"+list+"|Change the "+change+" of which item?|list|select = 0 value = number",
 "var|0|Change to what?"
)]
[H: abort(screen2)]

[H: itemlabel = listGet(shortlist,pick)]
[H: item = json.get(WeaponsDetails,itemlabel)]
[H: item = json.set(item,change,var)]
[H: WeaponsDetails = json.set(WeaponsDetails,itemlabel,item)]

!!
@@ @Set Armor UseInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useinfo = ""]
[H, foreach(item,ArmorDetails), code:{
 [H: armdeets = json.get(ArmorDetails,item)]
 [H: useinfo = json.get(armdeets,"UseInfo")]
 [H: empty = json.isEmpty(useinfo)]
 [H, if(empty == 1): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Armor?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useinfo = json.set("{}","Name",pick)]
[H: armorinfo = json.get(ArmorDetails,pick)]
[H: description = json.get(armorinfo,"Description")]

[H: screen3 = input(
 "junk|"+pick+"|Setting UseInfo for|label",
 "junk2|"+description+"|Details|label",
 "weightclass|Light,Medium,Heavy|Indicate the weight category|radio|value = string",
 "armorAC|0|Enter the armor class",
 "maxdex|0|Enter the maximum dex bonus allowed",
 "checkpen|0|Enter the armor check penalty",
 "fail|0|Enter the spell failure percentage"
)]
[H: abort(screen3)]

[H: useinfo = json.set(useinfo,"AC",armorAC)]
[H: useinfo = json.set(useinfo,"Check Penalty",checkpen)]
[H: useinfo = json.set(useinfo,"MaxDex",maxdex)]
[H: useinfo = json.set(useinfo,"Spell Fail",fail)]
[H: useinfo = json.set(useinfo,"Weight Class",weightclass)]

[H: armdeets = json.set(armorinfo,"UseInfo",useinfo)]
[H: ArmorDetails = json.set(ArmorDetails,pick,armdeets)]

{pick} set up.

!!
@@ @Set Armor useInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useInfo = ""]
[H, foreach(item,ArmorDetails), code:{
 [H: armdeets = json.get(ArmorDetails,item)]
 [H: useInfo = json.get(armdeets,"useInfo")]
 [H: empty = json.isEmpty(useInfo)]
 [H, if(empty == 1): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Armor?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useInfo = json.set("{}","Name",pick)]
[H: armorinfo = json.get(ArmorDetails,pick)]
[H: description = json.get(armorinfo,"Description")]

[H: screen3 = input(
 "junk|"+pick+"|Setting useInfo for|label",
 "junk2|"+description+"|Details|label",
 "weightclass|Light,Medium,Heavy|Indicate the weight category|radio|value = string",
 "armorAC|0|Enter the armor class",
 "maxdex|0|Enter the maximum dex bonus allowed",
 "checkpen|0|Enter the armor check penalty",
 "fail|0|Enter the spell failure percentage"
)]
[H: abort(screen3)]

[H: useInfo = json.set(useInfo,"AC",armorAC)]
[H: useInfo = json.set(useInfo,"Check Penalty",checkpen)]
[H: useInfo = json.set(useInfo,"MaxDex",maxdex)]
[H: useInfo = json.set(useInfo,"Spell Fail",fail)]
[H: useInfo = json.set(useInfo,"Weight Class",weightclass)]

[H: armdeets = json.set(armorinfo,"useInfo",useInfo)]
[H: ArmorDetails = json.set(ArmorDetails,pick,armdeets)]

{pick} set up.

!!
@@ @Set Shield UseInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useinfo = ""]
[H, foreach(item,ArmorDetails), code:{
 [H: armdeets = json.get(ArmorDetails,item)]
 [H: useinfo = json.get(armdeets,"UseInfo")]
 [H: empty = json.isEmpty(useinfo)]
 [H, if(empty == 1): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Armor?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useinfo = json.set("{}","Name",pick)]
[H: armorinfo = json.get(ArmorDetails,pick)]
[H: description = json.get(armorinfo,"Description")]

[H: screen3 = input(
 "junk|"+pick+"|Setting UseInfo for|label",
 "junk2|"+description+"|Details|label",
 "weightclass|Buckler,Light,Heavy|Indicate the weight category|radio|value = string",
 "armorAC|0|Enter the armor class",
 "maxdex|0|Enter the maximum dex bonus allowed",
 "checkpen|0|Enter the armor check penalty",
 "fail|0|Enter the spell failure percentage",
 "description|"+description+"|Enter a new description"
)]
[H: abort(screen3)]

[H: useinfo = json.set(useinfo,"AC",armorAC)]
[H: useinfo = json.set(useinfo,"Check Penalty",checkpen)]
[H: useinfo = json.set(useinfo,"MaxDex",maxdex)]
[H: useinfo = json.set(useinfo,"Spell Fail",fail)]
[H: useinfo = json.set(useinfo,"Weight Class",weightclass)]

[H: armdeets = json.set(armorinfo,"Description",description)]
[H: armdeets = json.set(armdeets,"UseInfo",useinfo)]
[H: armdeets = json.set(armdeets,"Class","Shield")]
[H: ArmorDetails = json.set(ArmorDetails,pick,armdeets)]

{pick} set up.

!!
@@ @Set Shield useInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useInfo = ""]
[H, foreach(item,ArmorDetails), code:{
 [H: armdeets = json.get(ArmorDetails,item)]
 [H: useInfo = json.get(armdeets,"useInfo")]
 [H: empty = json.isEmpty(useInfo)]
 [H, if(empty == 1): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Armor?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useInfo = json.set("{}","Name",pick)]
[H: armorinfo = json.get(ArmorDetails,pick)]
[H: description = json.get(armorinfo,"Description")]

[H: screen3 = input(
 "junk|"+pick+"|Setting useInfo for|label",
 "junk2|"+description+"|Details|label",
 "weightclass|Buckler,Light,Heavy|Indicate the weight category|radio|value = string",
 "armorAC|0|Enter the armor class",
 "maxdex|0|Enter the maximum dex bonus allowed",
 "checkpen|0|Enter the armor check penalty",
 "fail|0|Enter the spell failure percentage",
 "description|"+description+"|Enter a new description"
)]
[H: abort(screen3)]

[H: useInfo = json.set(useInfo,"AC",armorAC)]
[H: useInfo = json.set(useInfo,"Check Penalty",checkpen)]
[H: useInfo = json.set(useInfo,"MaxDex",maxdex)]
[H: useInfo = json.set(useInfo,"Spell Fail",fail)]
[H: useInfo = json.set(useInfo,"Weight Class",weightclass)]

[H: armdeets = json.set(armorinfo,"Description",description)]
[H: armdeets = json.set(armdeets,"useInfo",useInfo)]
[H: armdeets = json.set(armdeets,"Class","Shield")]
[H: ArmorDetails = json.set(ArmorDetails,pick,armdeets)]

{pick} set up.

!!
@@ @Set Weapon UseInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useinfo = ""]
[H, foreach(item,WeaponsDetails), code:{
 [H: weapondeets = json.get(WeaponsDetails,item)]
 [H: useinfo = json.get(weapondeets,"UseInfo")]
 [H: empty = json.get(useinfo,"Empty")]
 [H, if(empty == "Yes"): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Weapon?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useinfo = json.set("{}","Desig",pick)]

[H: screen3 = input(
 "junk|"+pick+"|Setting UseInfo for|label",
 "wield|1H,2H,V,D|Wielded How?|radio|select = 0 value = string orient = H",
 "sdie|1d|Damage Die (Small)",
 "mdie|1d|Damage Die (Medium)",
 "dmgtype|B,P,S,BaP,BaS,PaS,BoP,BoS,PoS|What type of damage does it do?|radio|select = 0 value = string orient = H",
 "threat|18,19,20|Base Threat Range|radio|select = 2 value = string orient = H",
 "mult|2,3,4|Base Crit Multiplier|radio|select = 0 value = string orient = H",
 "meleeonly|0|Melee Weapon Only?|check",
 "rangedonly|0|Ranged Weapon Only?|check",
 "maxstr|0,999|Maximum Strength Bonus|radio|select = 1 value = string orient = H",
 "nostrpen|0|Check for Crossbows|check",
 "increment|0|Enter the Range Increment",
 "finesse|0|Is this weapon finesseable?|check"
)]
[H: abort(screen3)]

[H: useinfo = json.set(useinfo,"Wield",wield)]
[H: useinfo = json.set(useinfo,"SDie",sdie)]
[H: useinfo = json.set(useinfo,"MDie",mdie)]
[H: useinfo = json.set(useinfo,"DmgType",dmgtype)]
[H: useinfo = json.set(useinfo,"Threat",threat)]
[H: useinfo = json.set(useinfo,"Mult",number(mult))]
[H: useinfo = json.set(useinfo,"MeleeOnly",number(meleeonly))]
[H: useinfo = json.set(useinfo,"RangedOnly",number(rangedonly))]
[H: useinfo = json.set(useinfo,"MaxStr",number(maxstr))]
[H: useinfo = json.set(useinfo,"NoStrPen",number(nostrpen))]
[H: useinfo = json.set(useinfo,"Increment",number(increment))]
[H: useinfo = json.set(useinfo,"Finesseable",number(finesse))]
[H: useinfo = json.set(useinfo,"DmgBonus",0)]
[H: useinfo = json.set(useinfo,"Material","")]
[H: useinfo = json.set(useinfo,"Enhance","")]
[H: useinfo = json.set(useinfo,"Enchantments","")]

[H: weaponinfo = json.get(WeaponsDetails,pick)]
[H: WeaponsDetails = json.set(WeaponsDetails,pick,json.set(weaponinfo,"UseInfo",useinfo))]

{pick} set up.

!!
@@ @Set Weapon useInfo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=99 ; color=default ; playerEditable=false ; applyToSelected=false ; group=9 Update Items ; tooltip= ; minWidth=140
[H: shortlist = ""]
[H: useInfo = ""]
[H, foreach(item,WeaponsDetails), code:{
 [H: weapondeets = json.get(WeaponsDetails,item)]
 [H: useInfo = json.get(weapondeets,"useInfo")]
 [H: empty = json.get(useInfo,"Empty")]
 [H, if(empty == "Yes"): shortlist = listAppend(shortlist,item)]
}]

[H: screen2 = input(
 "pick|"+shortlist+"|Add Use Info For Which Weapon?|list|select = 0 value = string"
)]
[H: abort(screen2)]

[H: useInfo = json.set("{}","Desig",pick)]

[H: screen3 = input(
 "junk|"+pick+"|Setting useInfo for|label",
 "wield|1H,2H,V,D|Wielded How?|radio|select = 0 value = string orient = H",
 "sdie|1d|Damage Die (Small)",
 "mdie|1d|Damage Die (Medium)",
 "dmgtype|B,P,S,BaP,BaS,PaS,BoP,BoS,PoS|What type of damage does it do?|radio|select = 0 value = string orient = H",
 "threat|18,19,20|Base Threat Range|radio|select = 2 value = string orient = H",
 "mult|2,3,4|Base Crit Multiplier|radio|select = 0 value = string orient = H",
 "meleeonly|0|Melee Weapon Only?|check",
 "rangedonly|0|Ranged Weapon Only?|check",
 "maxstr|0,999|Maximum Strength Bonus|radio|select = 1 value = string orient = H",
 "nostrpen|0|Check for Crossbows|check",
 "increment|0|Enter the Range Increment",
 "finesse|0|Is this weapon finesseable?|check"
)]
[H: abort(screen3)]

[H: useInfo = json.set(useInfo,"Wield",wield)]
[H: useInfo = json.set(useInfo,"SDie",sdie)]
[H: useInfo = json.set(useInfo,"MDie",mdie)]
[H: useInfo = json.set(useInfo,"DmgType",dmgtype)]
[H: useInfo = json.set(useInfo,"Threat",threat)]
[H: useInfo = json.set(useInfo,"Mult",number(mult))]
[H: useInfo = json.set(useInfo,"MeleeOnly",number(meleeonly))]
[H: useInfo = json.set(useInfo,"RangedOnly",number(rangedonly))]
[H: useInfo = json.set(useInfo,"MaxStr",number(maxstr))]
[H: useInfo = json.set(useInfo,"NoStrPen",number(nostrpen))]
[H: useInfo = json.set(useInfo,"Increment",number(increment))]
[H: useInfo = json.set(useInfo,"Finesseable",number(finesse))]
[H: useInfo = json.set(useInfo,"DmgBonus",0)]
[H: useInfo = json.set(useInfo,"Material","")]
[H: useInfo = json.set(useInfo,"Enhance","")]
[H: useInfo = json.set(useInfo,"Enchantments","")]

[H: weaponinfo = json.get(WeaponsDetails,pick)]
[H: WeaponsDetails = json.set(WeaponsDetails,pick,json.set(weaponinfo,"useInfo",useInfo))]

{pick} set up.

!!
@@ @<b>Open Inventory Test</b>
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=true ; group=10 Test ; tooltip=Drag this to a token or the campaign or global panels to use on selected tokens. ; minWidth=140
[R, macro("Invent Main Starter Test@Lib:inventory"): ""]

!!
@@ @Coinpurse HTML Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) !=  "OBJECT"): cpData = "{}"]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) !=  "OBJECT"): denomData = "{}"]
[H: denomLength = json.length(denomData)]
[H: countDenoms = denomLength/5]
[H, if(countDenoms > 0): cellWidth = (100/countDenoms); cellWidth = "1"]
[H: denomList = ""]
[H: abbvDenomList = ""]
[H, c(countDenoms), code:{
	[denomList = listAppend(denomList, json.get(denomData, "Denom"+roll.count))]
	[abbvDenomList = listAppend(abbvDenomList, json.get(denomData, "abbvDenom"+roll.count))]
}]
[H: personalCpData = json.get(cpData, "Personal")]
[H, if(json.type(personalCpData) !=  "OBJECT"): personalCpData = "{}"]
[H: partyCpData = json.get(cpData, "Party")]
[H, if(json.type(partyCpData) !=  "OBJECT"): partyCpData = "{}"]
[H: personalwealthlist = ""]
[H: partywealthlist = ""]
[H, foreach(denom, denomList), code:{
	[varvar = json.get(personalCpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[personalWealthList = listAppend(personalWealthList,varvar)]
	[varvar = json.get(partyCpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[partyWealthList = listAppend(partyWealthList,varvar)]
}]
[H: showParty = json.get(cpData, "showParty")]
[H, if(showParty ==  ""): showParty = "Open"]
[H: countWeight = json.get(cpData, "Countweight")]
[H: countPartyWeight = json.get(cpData, "Countpartyweight")]
[H, if( !isNumber(countWeight) ): countWeight = 1]
[H, if( !isNumber(countPartyWeight) ): countPartyWeight = 0]
[H: curToken = upper(token.name)+"'S COINPURSE"]
[H, macro("Calc Coin Weight@this"):"Party"]
[H: partyCalcWealth = macro.return]
[H, if(countPartyWeight ==  0): coinWeight = "["+round(macro.return,3)+"]"; coinWeight = macro.return]

[H: linkConfigCurrency = macroLink('Configure Currency','Configure Currency@this','none','',token.name)]
[H: linkPartyWealth = macroLink(showParty+' Party Wealth', 'Toggle Party@this', 'none', '', token.name)]
[H, macro("Calc Coin Weight@this"): "Personal"]
[H: resultVar = macro.return]
[H, if(countWeight ==  0): coinWeight = '['+round(macro.return,3)+']'; coinWeight = macro.return]
[H: linkCountCoinWeight = macroLink(coinWeight, 'Count Coinweight@this', 'none', 'Personal', token.name)]

[H: output =          strformat('<table>')]
[H: output = output + strformat('<tr style="width:100%;"><td colspan="%{countDenoms}" style="width:100%; text-align:center;"><b>%{curToken}</b></td></tr>')]
[H: output = output + strformat('<tr style="width:100%;"><td colspan="2" style="width:100%; text-align:center;">%{linkConfigCurrency}</td><td colspan="2" style="width:100%; text-align:center;">%{linkPartyWealth}</td></tr>')]
[H: output = output + strformat('<tr><td colspan="%{countDenoms}" style="width:100%; text-align:center;"><b>Personal</b>&nbsp; weight: %{linkCountCoinWeight}</td></tr>')]

[H: output = output+strformat('<tr>')]
[H, foreach(abbvDenom, abbvDenomList, ""), code:{
   [H: output = output+strformat('<td style="width:%{cellWidth}%; text-align:center;">%{abbvDenom}</td>')]
}]
[H: output = output+strformat('</tr>')]
[H: output = output+strformat('<tr>')]
[H, foreach(bitowealth, personalWealthList, ""), code:{
   [H: linkAdjPersonalWealth = macroLink(bitowealth, "Adj Personal Wealth@this", "none", roll.count, token.name)]
   [H: output = output+strformat('<td style="width:%{cellWidth}%; text-align:center;">%{linkAdjPersonalWealth}</td>')]
}]
[H: output = output+strformat('</tr>')]

[H, if(showParty == "Hide"), code:{
   [H: linkCountCoinWeightParty = macroLink(coinweight, "Count Coinweight@this", "none", "Party", token.name)]
   [H: output = output+strformat('<tr><td style="width:100%; text-align:center;"><b>Party</b>&nbsp; weight: &nbsp;%{partyCalcWealth}%{linkCountCoinWeightParty}</td></tr>')]
   [H, foreach(abbvDenom, abbvDenomList, ""), code:{
      [H: output = output+strformat('<tr><td style="width:%{cellWidth}%; text-align:center;">%{abbvDenom}</td></tr>')]
   }]
   [H, foreach(bitowealth, partyWealthList, ""), code:{
      [H: linkAdjPartyWealth = macroLink(bitowealth, "Adj Party Wealth@this", "none", roll.count, token.name)]
      [H: output = output+strformat('<tr><td style="width:%{cellWidth}%; text-align:center;"><b>%{linkAdjPartyWealth}</b></td></tr>')]
   }]
};{}]

[H, if(isGM()), code:{
	[H: linkShowPlayerWealth = macroLink("Show All Player Wealth", "Get All Player Wealth Test@this", "none", "", getMacroLocation())]
   [H: linkCheckPlayerWealth = macroLink("Check A Player's Wealth", "Get Particular Player Wealth@this", "none", "", getMacroLocation())]
   [H: output = output+strformat('<tr style="width:100%;"><td colspan="2" style="width:100%;">%{linkShowPlayerWealth}</td><td colspan="2" style="width:100%;">%{linkCheckPlayerWealth}</td></tr>')]
}; {}]
[H: output = output+strformat('</table>')]
[H: macro.return = output]

!!
@@ @Invent Main Starter Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: itemcheck = getProperty("Items")]
[H, if(json.type(itemcheck) !=  "ARRAY"): itemcheck = "[]"]

[H, if(json.isEmpty(itemcheck) == 1), code:{
 [macro("Empty Invent Main@Lib:inventory"): ""]
}; {
 [macro("Invent Main Test@Lib:inventory"): "loc.name"]
}]

!!
@@ @Invent Main Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: sortby = macro.args]

[R, frame5("Inventory"):{
 [R, macro("Invent Main Text Test@Lib:inventory"): sortby]
}]

!!
@@ @Invent Main Text Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H, if(sortby == ""): sortby = "loc.name"; sortby = sortby]

[H: curToken              = token.name+"'s"]
[H: linkAddItem           = macroLink("Add An Item","Add Item@Lib:inventory","self","",token.name)]
[H: linkClearInventory    = macroLink("Empty Inventory","Clear Invent@Lib:inventory","none","",token.name)]
[H,                         macro("Coinpurse HTML Test@Lib:inventory"): ""]
[H: htmlCoinpurse         = macro.return]
[H: linkMainInventoryName = macroLink("Name","Invent Main Test@Lib:inventory","none","loc.name",token.name)]
[H: linkMainInventoryWeight   = macroLink("Weight.","Invent Main Test@Lib:inventory","none","Weight",token.name)]
[H: linkMainInventoryQty  = macroLink("Qty.","Invent Main Test@Lib:inventory","none","qty",token.name)]
[H,                         macro("List Populate Test@Lib:inventory"): sortby]
[H: htmlInventoryList     = macro.return]
[H,                         macro("Weight Total Test@Lib:inventory"): ""]
[H: weightCarried         = macro.return]
[H: weightLoad            = getProperty("weightLoad")]
[H, if(string(weightLoad) == ""): weightLoad = "Light"]
[H: linkWeightLoad        = macroLink(weightLoad,"Set Weight Load@Lib:inventory","none",weightCarried,token.name)]
[H: cssText = "
body {
   font-family: Arial, Helvetica, sans-serif;
   font-size: 12px;
   background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
}
a {
	color: black;
}
table {
   width: 100%;
   background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
   color: black;
   border-collapse: collapse;
   border-spacing: 0;
   text-decoration: none;
}
th {
   height: 30px;
}
tr {
   height: 30px;
}
td {
   padding: 0px;
}
table.banded {
   width: 100%;
   background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
   color: black;
   border-collapse: collapse;
   border-spacing: 0;
   text-decoration: none;
}
table.banded tr:hover a {
	color: orange;
}
table.banded th {
	height:30px;
   color: orange;
	background-color: #4b4b4b;
}
table.banded tr:hover {
  color: orange !important;
  background-color: #4b4b4b !important;
}
table.banded tr:nth-child(odd) {
   color: black;
   background-color: rgb(242, 242, 242, 0.5);
}
"]

[H: output =        strformat('<html><head><style>%{cssText}</style></head>')]
[H: output = output+strformat('<body><table><tr style="width:100%;"><td style="width:50%; text-align:center;"><table>')]
[H: output = output+strformat('<tr><td colspan="2" style="width:50%; text-align:center;"><b>%{curToken} Inventory</b></td></tr>')]
[H: output = output+strformat('<tr><td style="text-align:center;">%{linkAddItem}</td>')]
[H: output = output+strformat('<td style="text-align:center;">%{linkClearInventory}</td></tr></table></td>')]
[H: output = output+strformat('<td style="width=50%;">%{htmlCoinpurse}</td></tr></table>')]
[H: output = output+strformat('<table class="banded" style="overflow-x:auto;"><tr>')]
[H: output = output+strformat('<th style="width:25%; text-align:left;">%{linkMainInventoryName}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryWeight}</th>')]
[H: output = output+strformat('<th style="width:12.5%; text-align:center;">%{linkMainInventoryQty}</th>')]
[H: output = output+strformat('<th style="width:50%; text-align:left;">Details</th>')]
[H: output = output+strformat('</tr>%{htmlInventoryList}<tr>')]
[H: output = output+strformat('<td style="width:25%; text-align:left;"><b>Total Weight:</b></td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{weightCarried}</td>')]
[H: output = output+strformat('<td style="width:12.5%; text-align:center;">%{linkWeightLoad}</td>')]
[H: output = output+strformat('<td style="width:50%; text-align:left;"></td>')]
[H: output = output+strformat('</tr></table>')]
[H: output = output+strformat('<table><tr><td>Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions ')]
[H: output = output+strformat('represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions ')]
[H: output = output+strformat('are kept within your Stash.</td></tr></table>')]
[H: output = output+strformat('</body></html>')]
[H: setProperty("tm.Test", output)]
[R: output]

!!
@@ @List Populate Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H, if(sortby == ""): sortby = "loc.name"; sortby = sortby]
[H: sortMacro = "List Sort "+sortby+" Test@Lib:inventory"]

[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) !=  "ARRAY"): curItems = "[]"]

[H, macro(sortMacro): curItems]
[H: curItems = macro.return]
[H: setProperty("Items", curItems)]
[H: output = ""]

[H, foreach(itemInventory, curItems, ""), code:{
   [H: itemCount = json.get(itemInventory, "itemWeightCount")]
   [H: itemQty = json.get(itemInventory, "itemQuantity")]
   [H: itemWeight = json.get(itemInventory, "itemWeight")]
   [H: isContainer = json.get(itemInventory, "itemContainer")]
   [H: itemLocation = json.get(itemInventory, "itemLocation")]
   [H: itemName = json.get(itemInventory, "itemName")]
   [H: itemClass = json.get(itemInventory, "itemClass")]
   [H: itemDescription = json.get(itemInventory, "itemDescription")]
   [H, if(itemClass == "Wands"), code:{
      [H: itemUseInfo = json.get(itemInventory, "useInfo")]
      [H: itemCharges = json.get(itemUseInfo, "Charges")]
      [H: displayName = itemName+" (x"+itemCharges+")"]
   };{
      [H: displayName = itemName]
   }]
   [H: output = output+strformat('<tr>')]
   [H, if(itemLocation == "General" || itemLocation == itemName), code:{
      [H: linkItemClick = macroLink(displayName,"Item Click@Lib:inventory","none",itemInventory,token.name)]
      [H: output = output+strformat('<td style="width:25%;"><b>%{linkItemClick}</b></td>')]
   };{
      [H: linkItemClick = macroLink(displayName,"Item Click@Lib:inventory","none",itemInventory,token.name)]
      [H: output = output+strformat('<td style="width:25%;">%{linkItemClick}</td>')]
   }]
   [H, if(itemCount == 0), code:{
      [H: linkWeightCount = "["+macroLink(itemWeight*itemQty, "Weight Count Toggle@this", "none", itemInventory, token.name)+"]"]
      [H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkWeightCount}</b></td>')]
   };{
      [H: linkWeightCount = macroLink(itemWeight*itemQty, "Weight Count Toggle@this", "none", itemInventory, token.name)]
      [H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkWeightCount}</b></td>')]
   }]
   [H: linkAdjustQuantity = macroLink(itemQty, "Adj Qty@this", "none", itemInventory, token.name)]
   [H: output = output+strformat('<td style="width:12.5%; text-align:center;"><b>%{linkAdjustQuantity}</b></td>')]
   [H: output = output+strformat('<td style="width=50%;">%{itemDescription}</td></tr>')]
}]
[H: macro.return = output]

!!
@@ @List Sort loc.name Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: curItems = macro.args]

[H: sortItems = json.sort(curItems, "a", "itemLocation", "itemLocationPrior", "itemName")]

[H: macro.return = sortItems]

!!
@@ @Weight Total Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=30 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) != "ARRAY"): curItems = "[]"]
[H: cpData  = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]
[H: countWeight = json.get(cpData, "countWeight")]
[H: countPartyWeight = json.get(cpData, "countPartyWeight")]

[H: totalWeight = 0]
[H, foreach(item, curItems), code:{
   [itemQuantity       = json.get(item, "itemQuantity")]
   [itemWeight    = json.get(item, "itemWeight")]
   [itemWeightCount       = json.get(item, "itemWeightCount")]
   [ttlItemWeight = (itemQuantity * itemWeight) * itemWeightCount]
   [totalWeight   = totalWeight + ttlItemWeight]
}]

[H, if(countWeight == 1), code:{
	[macro("Calc Coin Weight@Lib:inventory"): "Personal"]
	[totalWeight = totalWeight + macro.return]
}]

[H, if(countPartyWeight == 1), code:{
	[macro("Calc Coin Weight@Lib:inventory"): "Party"]
	[totalWeight = totalWeight + macro.return]
}]

[R: totalWeight]

!!
@@ @Frame5 Test
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
[frame5("Awoo", "width=500; height=300;"): {
[r: getMacroCommand(number(getMacroIndexes("chattext")))]
}]

!!
@@ @chattext
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
<html>
   <head>
	<style>
	body {
   font-family: Arial, Helvetica, sans-serif; 
   font-size:12px;
   background-color:#04AA6D;
}
table {
   width: 100%;
   background-color: #f2f2f2;
   color: black;
   border-collapse: collapse;
}
td {
   padding: 0px;
}
</style>      
</head>
   <body>
      <table>
         <tr style="width:100%;">
            <td style="width:50%; text-align:center;">
               <table>
                  <tr>
                     <td colspan="2" style="width:50%; text-align:center;">
                        <b>Lib:inventory Inventory</b>
                     </td>
                  </tr>
                  <tr>
                     <td style="text-align:center;">
                        <a href='macro://Add Item@Lib:inventory/self/Lib:inventory?'>Add An Item</a>
                     </td>
                     <td style="text-align:center;">
                        <a href='macro://Clear Invent@Lib:inventory/none/Lib:inventory?'>Empty Inventory</a>
                     </td>
                  </tr>
               </table>
            </td>
            <td style="width=50%;">
               <table>
                  <tr style="width:100%; ">
                     <td colspan="4" style="width:100%; text-align:center;">
                        <b>LIB:INVENTORY COINPURSE</b>
                     </td>
                  </tr>
                  <tr style="width:100%;">
                     <td colspan="2" style="width:100%; text-align:center;">
                        <a href='macro://Configure Currency@Lib:inventory/none/Lib:inventory?'>Configure Currency</a>
                     </td>
                     <td colspan="2" style="width:100%; text-align:center;">
                        <a href='macro://Toggle Party@Lib:inventory/none/Lib:inventory?'>Open Party Wealth</a>
                     </td>
                  </tr>
                  <tr>
                     <td colspan="4" style="width:100%; text-align:center;">
                        <b>Personal</b>&nbsp; weight: <a href='macro://Count Coinweight@Lib:inventory/none/Lib:inventory?Personal'>0.240</a>
                     </td>
                  </tr>
                  <tr>
                     <td style="width:25%%; text-align:center;">CP</td>
                     <td style="width:25%%; text-align:center;">SP</td>
                     <td style="width:25%%; text-align:center;">GP</td>
                     <td style="width:25%%; text-align:center;">PP</td>
                  </tr>
                  <tr>
                     <td style="width:25%%; text-align:center;">
                        <a href='macro://Adj Personal Wealth@Lib:inventory/none/Lib:inventory?0'>0</a>
                     </td>
                     <td style="width:25%%; text-align:center;">
                        <a href='macro://Adj Personal Wealth@Lib:inventory/none/Lib:inventory?1'>0</a>
                     </td>
                     <td style="width:25%%; text-align:center;">
                        <a href='macro://Adj Personal Wealth@Lib:inventory/none/Lib:inventory?2'>12</a>
                     </td>
                     <td style="width:25%%; text-align:center;">
                        <a href='macro://Adj Personal Wealth@Lib:inventory/none/Lib:inventory?3'>0</a>
                     </td>
                  </tr>
                  <tr style="width:100%;">
                     <td colspan="2" style="width:100%;">
                        <a href='macro://Get All Player Wealth Test@Lib:inventory/none/Lib:inventory?'>Show All Player Wealth</a>&nbsp; &nbsp;<td colspan="2" style="width:100%;">
                           <a href='macro://Get Particular Player Wealth@Lib:inventory/none/Lib:inventory?'>Check A Players Wealth</a>
                        </td>
                     </tr>
                  </table>
               </td>
            </tr>
         </table>
         <table>
            <tr style="height:30px; background-color:#017fff;">
               <td style="width:100px; text-align:left;">
                  <span style="color:#01ff81; text-decoration:none;">
                     <a href='macro://Invent Main Test@Lib:inventory/none/Lib:inventory?loc.name'>Name</a>
                  </span>
               </td>
               <td style="width:80px; text-align:center;">
                  <span style="color:#01ff81; text-decoration:none;">
                     <a href='macro://Invent Main Test@Lib:inventory/none/Lib:inventory?Weight'>Weight.</a>
                  </span>
               </td>
               <td style="width:40px; text-align:center;">
                  <span style="color:#01ff81; text-decoration:none;">
                     <a href='macro://Invent Main Test@Lib:inventory/none/Lib:inventory?qty'>Qty.</a>
                  </span>
               </td>
               <td style="width:100%; text-align:left;">
                  <span style="color:black; text-decoration:none;">Details</span>
               </td>
            </tr>
            <tr style="height:30px; background-color:#017fff;">
               <td style="width:100px;">
                  <b>
                     <a href='macro://Item Click@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Backpack%22%2C%22itemContainer%22%3A1%2C%22itemWeight%22%3A2%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Backpack%22%2C%22itemLocationPrior%22%3A0%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22itemClass%22%3A%22Goods%22%2C%22itemDescription%22%3A%22Pack+to+hold+gear.%22%2C%22useInfo%22%3A%7B%7D%7D'>Backpack</a>
                  </b>
               </td>
               <td style="width:80px; text-align:center">
                  <b>
                     <a href='macro://Weight Count Toggle@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Backpack%22%2C%22itemContainer%22%3A1%2C%22itemWeight%22%3A2%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Backpack%22%2C%22itemLocationPrior%22%3A0%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22itemClass%22%3A%22Goods%22%2C%22itemDescription%22%3A%22Pack+to+hold+gear.%22%2C%22useInfo%22%3A%7B%7D%7D'>2</a>
                  </b>
               </td>
               <td style="width:40px; text-align:center;">
                  <b>
                     <a href='macro://Adj Qty@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Backpack%22%2C%22itemContainer%22%3A1%2C%22itemWeight%22%3A2%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Backpack%22%2C%22itemLocationPrior%22%3A0%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22itemClass%22%3A%22Goods%22%2C%22itemDescription%22%3A%22Pack+to+hold+gear.%22%2C%22useInfo%22%3A%7B%7D%7D'>1</a>
                  </b>
               </td>
               <td style="width=100%;">Pack to hold gear.</td>
            </tr>
            <td style="width:100px;">
               <b>
                  <a href='macro://Item Click@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Bastard+Sword%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A6%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Bastard+Sword%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Weapon%22%2C%22itemDescription%22%3A%221H+Weapon+%28Heavy+Blade%29+-+Dmg%3A1d10%2C+Prof%3A3%2C+Range%3A--%2C+Properties%3A+Versatile%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%7D%7D'>Bastard Sword</a>
               </b>
            </td>
            <td style="width:80px; text-align:center">
               <b>
                  <a href='macro://Weight Count Toggle@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Bastard+Sword%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A6%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Bastard+Sword%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Weapon%22%2C%22itemDescription%22%3A%221H+Weapon+%28Heavy+Blade%29+-+Dmg%3A1d10%2C+Prof%3A3%2C+Range%3A--%2C+Properties%3A+Versatile%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%7D%7D'>6</a>
               </b>
            </td>
            <td style="width:40px; text-align:center;">
               <b>
                  <a href='macro://Adj Qty@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Bastard+Sword%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A6%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Bastard+Sword%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Weapon%22%2C%22itemDescription%22%3A%221H+Weapon+%28Heavy+Blade%29+-+Dmg%3A1d10%2C+Prof%3A3%2C+Range%3A--%2C+Properties%3A+Versatile%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%7D%7D'>1</a>
               </b>
            </td>
            <td style="width=100%;">1H Weapon (Heavy Blade) - Dmg:1d10, Prof:3, Range:--, Properties: Versatile</td>
         </tr>
         <tr style="height:30px; background-color:#017fff;">
            <td style="width:100px;">
               <b>
                  <a href='macro://Item Click@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A0.1%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Wands%22%2C%22itemDescription%22%3A%22Short+pointer+imbued+with+magical+powers%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%22Charges%22%3A49%7D%7D'>Wand: Cure Light Wounds (x49)</a>
               </b>
            </td>
            <td style="width:80px; text-align:center">
               <b>
                  <a href='macro://Weight Count Toggle@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A0.1%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Wands%22%2C%22itemDescription%22%3A%22Short+pointer+imbued+with+magical+powers%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%22Charges%22%3A49%7D%7D'>0.1</a>
               </b>
            </td>
            <td style="width:40px; text-align:center;">
               <b>
                  <a href='macro://Adj Qty@Lib:inventory/none/Lib:inventory?%7B%22itemName%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemContainer%22%3A0%2C%22itemWeight%22%3A0.1%2C%22itemCapacity%22%3A0%2C%22itemLocation%22%3A%22Wand%3A+Cure+Light+Wounds%22%2C%22itemLocationPrior%22%3A0%2C%22itemClass%22%3A%22Wands%22%2C%22itemDescription%22%3A%22Short+pointer+imbued+with+magical+powers%22%2C%22itemWeightCount%22%3A1%2C%22itemQuantity%22%3A1%2C%22useInfo%22%3A%7B%22Charges%22%3A49%7D%7D'>1</a>
               </b>
            </td>
            <td style="width=100%;">Short pointer imbued with magical powers</td>
         </tr>
         <tr>
            <td style="width:100px; text-align:left;">
               <span style="color:#01ff81; text-decoration:none;">
                  <b>Total Weight:</b>
               </span>
            </td>
            <td style="width:80px; text-align:center;">
               <span style="color:#01ff81; text-decoration:none;">0.240</span>
            </td>
            <td style="width:40px; text-align:center;">
               <span style="color:#01ff81; text-decoration:none;">
                  <a href='macro://Set Weight Load@Lib:inventory/none/Lib:inventory?0.240'>Light</a>
               </span>
            </td>
         </tr>
      </table>
      <table>
         <tr>
            <td>Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions are kept within your Stash.</td>
         </tr>
      </table>
   </body>
</html>

!!
@@ @cssPageNameTest
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=10 Test ; tooltip= ; minWidth=140
body {
   font-family: Arial, Helvetica, sans-serif;
   font-size: 12px;
   background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
}
table {
   width: 100%;
   background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3);
   color: black;
   border-collapse: collapse;
}
tr:nth-child(odd) {
   background-color: #f2f2f2;
}
td {
   padding: 0px;
}

!!
@@ @<b>Open Inventory</b>
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=true ; group=1 General ; tooltip=Drag this to a token or the campaign or global panels to use on selected tokens. ; minWidth=140
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Empty Invent Main
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[frame5("Inventory"):{

 [macro("Empty Invent Main Text@Lib:inventory"): ""]

}]

!!
@@ @Empty Invent Main Text
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]

<html>
<head>
  <link rel = "stylesheet" type = "text/css" href = "cssPageName@Lib:inventory">
</head>
<body>
  <table>
   <tr>
     <td style="width:100%">
      <tr>
        <td style="text-align:center;">
         <font size = "+1"><b>[R: token.name +"'s"] Inventory</b></font><br>
         [R: macroLink("Add An Item","Add Item@Lib:inventory","self","",token.name)]
         &#160; &#160; &#160; &#160; [R: macroLink("Empty Inventory","Clear Invent@Lib:inventory","none","",token.name)]
        </td>
        <td>
         [macro("Coinpurse HTML@Lib:inventory"): ""]
        </td>
      </tr>
     </td>
   </tr>
  </table>
  <table>
   <tr>
     <td>
      <tr style="height:30px; background-color:#017fff">
        <td style="width:100px; text-align:left">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Name","Invent Main@Lib:inventory","none","loc.name",token.name)]</span>
        </td>
        <td style="width:80px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Weight.","Invent Main@Lib:inventory","none","Weight",token.name)]</span>
        </td>
        <td style="width:40px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Qty.","Invent Main@Lib:inventory","none","qty",token.name)]</span>
        </td>
        <td>
         &#160; &#160; Details
        </td>
      </tr>
      <tr style="height:30px; background-color:#017fff">
        <td style="width:100px; text-align:left">
         <span style="color:#01ff81; text-decoration:none;">Total Weight:</span>
        </td>
        <td style="width:80px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[macro("Weight Total@Lib:inventory"): ""][H: weightCarried = macro.return][H: weightLoad = getProperty("weightLoad")][H, if(string(weightLoad) == ""): weightLoad = "Light"]</span>
        </td>
        <td style="width:40px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink(weightLoad,"Set Weight Load@Lib:inventory","none",weightCarried,token.name)]</span>
        </td>
        <td>
         
        </td>
      </tr>
     </td>
   </tr>
  </table>
  <table>
   <tr>
     <td style="width:100%; rowspan = 4">
      Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions are kept within your Stash.
     </td>
   </tr>
  </table>
 </body>
</html>

!!
@@ @Invent Main
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]

[frame5("Inventory"):{
 [macro("Invent Main Text@Lib:inventory"): sortby]
}]

!!
@@ @Invent Main Starter
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: itemcheck = getProperty("Items")]
[H, if(json.type(itemcheck) != "ARRAY"): itemcheck = "[]"]

[H, if(json.isEmpty(itemcheck) == 1), code:{
 [macro("Empty Invent Main@Lib:inventory"): ""]
}; {
 [macro("Invent Main@Lib:inventory"): "loc.name"]
}]

!!
@@ @Invent Main Text
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]

<html>
<head>
   <link rel = "stylesheet" type = "text/css" href = "cssPageName@Lib:inventory">
</head>
<body>
  <table>
   <tr>
     <td style="width:400px">
      <tr>
         <td style="text-align:center;">
            <font size = "+1"><b>[R: token.name +"'s"] Inventory</b></font><br>
            [R: macroLink("Add An Item","Add Item@Lib:inventory","self","",token.name)]
            &#160; &#160; &#160; &#160; [R: macroLink("Empty Inventory","Clear Invent@Lib:inventory","none","",token.name)]
         </td>
         <td>
            [macro("Coinpurse HTML@Lib:inventory"): ""]
         </td>
      </tr>
     </td>
   </tr>
  </table>
  <table>
   <tr>
     <td>
      <tr style="height:30px; background-color:#017fff">
        <td style="width:100px; text-align:left">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Name","Invent Main@Lib:inventory","none","loc.name",token.name)]</span>
        </td>
        <td style="width:80px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Weight.","Invent Main@Lib:inventory","none","Weight",token.name)]</span>
        </td>
        <td style="width:40px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink("Qty.","Invent Main@Lib:inventory","none","qty",token.name)]</span>
        </td>
        <td>
         &#160; &#160; Details
        </td>
      </tr>
        [macro("List Populate@Lib:inventory"): sortby]
      <tr style="height:30px; background-color:#017fff">
        <td style="width:100px; text-align:left">
         <span style="color:#01ff81; text-decoration:none;"><b>Total Weight:</b></span>
        </td>
        <td style="width:80px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">
            [macro("Weight Total@Lib:inventory"): ""]
            [H: weightCarried = macro.return]
            [H: weightLoad = getProperty("weightLoad")]
            [H, if(string(weightLoad) == ""): weightLoad = "Light"]</span>
        </td>
        <td style="width:40px; text-align:center">
         <span style="color:#01ff81; text-decoration:none;">[R: macroLink(weightLoad,"Set Weight Load@Lib:inventory","none",weightCarried,token.name)]</span>
        </td>
        <td>
         
        </td>
      </tr>
     </td>
   </tr>
  </table>
  <table>
   <tr>
     <td style="width:100%; rowspan = 4">
      Your inventory lists the items, weapons and equipment that you bring with you into the field. The item restrictions represent what you can quickly and easily store or retrieve in the heat of battle while also remaining unburdened. All other possessions are kept within your Stash.
     </td>
   </tr>
  </table>
 </body>
</html>

!!
@@ @List Populate
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) != "ARRAY"): curItems = "[]"]

[H, macro("List Sort "+sortby+"@Lib:inventory"): curItems]
[H: curItems = macro.return]
[H: setProperty("Items", curItems)]

[H: row = "odd"]
[R, foreach(item, curItems,""), code:{
   [H: countIt = json.get(item, "WeightCount")]
   [H: qty = json.get(item, "Qty")]
   [H: Weight = json.get(item, "Weight")]
   [H: iscont = json.get(item, "Container")]
   [R, if(row == "odd"): "<tr style = 'height:30px; background-color:#017fff'>";"<tr>"]
   [R: "<td style = 'width:100px'>"]
   [H: location = json.get(item, "Location")]
   [H: itemName = json.get(item, "Name")]
   [H: class = json.get(item, "Class")]
   [H, if(class == "Wands"), code:{
      [charges = json.get(json.get(item, "useInfo"), "Charges")]
      [displayName = itemName+" (x"+charges+")"]
   };{
      [displayName = itemName]
   }]
   [R, if(location == "General" || location == itemName), code:{
      <b>[R: macroLink(displayName,"Item Click@Lib:inventory","none",item,token.name)]</b>
   };{
      [R: "<tr><td style = 'width:10%'><td><td style'width:90%'>&#160; &#160;"+macroLink(itemName,"Item Click@Lib:inventory","none",item,token.name)][R: "</td></tr>"]
   }]
   [R: "</td>"]
   [R: "<td style = 'width:80px; text-align:center'>"]
      [R, if(countIt == 0): "["]
         <b>[R: macroLink(Weight*qty, "Weight Count Toggle@this", "none", item, token.name)]</b>
      [R, if(countIt == 0): "]"]
   </td>
   [R: "<td style = 'width:40px; text-align:center'><b>"+macroLink(qty, "Adj Qty@this", "none", item, token.name)+"</b></td>"]
   [R: "<td>"+json.get(item,"Description")]
   [R: "</tr>"]
   [H: row = if(row == "odd","even","odd")]
}]

!!
@@ @List Populate Backup
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=default ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: sortby = macro.args]
[H: Items = getProperty("Items")]
[H, if(json.type(Items) != "ARRAY"): Items = "[]"]

[macro("List Sort "+sortby+"@Lib:inventory"): Items]
[H: Items = macro.return]
[H: setProperty("Items", Items)]

[H: row = "odd"]
[R, foreach(item,Items,""), code:{
   [H: countIt = json.get(item,"WeightCount")]
   [H: qty = json.get(item,"Qty")]
   [H: Weight = json.get(item,"Weight")]
   [H: iscont = json.get(item,"Container")]
   [R, if(row == "odd"): "<tr style = 'height:30px; background-color:#017fff'>";"<tr>"]
   [R: "<td style = 'width:100px'>"]
   [H: location = json.get(item,"Location")]
   [H: itemName = json.get(item,"Name")]
   [H: class = json.get(item,"Class")]
   [H, if(class == "Wands"), code:{
      [charges = json.get(json.get(item,"useInfo"),"Charges")]
      [displayname = itemName+" (x"+charges+")"]
   };{
      [displayname = itemName]
   }]
   [R, if(location == "General" || location == itemName), code:{
      <b>[R: macroLink(displayname,"Item Click@Lib:inventory","none",item,token.name)]</b>
   };{
      [R: "<tr><td style = 'width:10%'><td><td style'width:90%'>&#160; &#160;"+macroLink(itemName,"Item Click@Lib:inventory","none",item,token.name)][R: "</td></tr>"]
   }]
   [R: "</td>"]
   [R: "<td style = 'width:80px; text-align:center'>"]
      [R, if(countIt == 0): "["]
         <b>[R: macroLink(Weight*qty, "Weight Count Toggle@this", "none", item, token.name)]</b>
      [R, if(countIt == 0): "]"]
   </td>
   [R: "<td style = 'width:40px; text-align:center'><b>"+macroLink(qty, "Adj Qty@this", "none", item, token.name)+"</b></td>"]
   [R: "<td>"+json.get(item,"Description")]
   [R: "</tr>"]
   [H: row = if(row == "odd","even","odd")]
}]

!!
@@ @List Sort Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: Items = macro.args]

[H: Items2 = json.sort(Items,"d","Weight")]

[H: macro.return = Items2]

!!
@@ @List Sort loc.name
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: Items = macro.args]

[H: Items2 = json.sort(Items,"a","Location","LocPrior","Name")]

[H: macro.return = Items2]

!!
@@ @List Sort qty
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: Items = macro.args]

[H: Items2 = json.sort(Items,"d","Qty")]

[H: macro.return = Items2]

!!
@@ @List Sort wt
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: Items = macro.args]

[H: Items2 = json.sort(Items,"d","Wt")]

[H: macro.return = Items2]

!!
@@ @Set Weight Load
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=90 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: weightCarried = macro.args]
[H: weightLoad = getProperty("weightLoad")]
[H, if(string(weightLoad) == ""): weightLoad = "Light"]
[H: weightList = "Light,Heavy,Overburdened!!"]

[H: thisStr = getProperty("Strength")]
[H, if( !isNumber(thisStr) ): thisStr = 0]
[H: heavyFloor = thisStr*10]
[H: heavyCeiling = thisStr*20]

[H, if(weightCarried < heavyCeiling): num = 1; num = 2]
[H, if(weightCarried < heavyFloor): num = 0]

[H: screen = input(
 "junkvar|"+weightLoad+"|Your weightLoad is currently set to|label",
 "junk1|"+thisStr+"|Your strength is listed as|label",
 "junk4|"+weightCarried+"|You currently carry|label",
 "junk2|"+heavyFloor+"|You can carry w/o penalty up to|label",
 "junk3|"+heavyCeiling+"|With effort, you can carry up to|label",
 "weightLoad|"+weightList+"|Where does your current weight carried put you?|radio|select = "+num+" value = string"
)]
[H: abort(screen)]

[H: setProperty("weightLoad", weightLoad)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Weight Total
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=30 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
[H: curItems = getProperty("Items")]
[H, if(json.type(curItems) != "ARRAY"): curItems = "[]"]
[H: cpData  = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]
[H: countWeight = json.get(cpData, "countWeight")]
[H: countPartyWeight = json.get(cpData, "countPartyWeight")]

[H: totalWeight = 0]
[H, foreach(item, curItems), code:{
   [itemQty       = json.get(item, "Qty")]
   [itemWeight    = json.get(item, "Weight")]
   [countIt       = json.get(item, "WeightCount")]
   [ttlItemWeight = (itemQty * itemWeight) * countIt]
   [totalWeight   = totalWeight + ttlItemWeight]
}]

[H, if(countWeight == 1), code:{
	[macro("Calc Coin Weight@Lib:inventory"): "Personal"]
	[totalWeight = totalWeight + macro.return]
}]

[H, if(countPartyWeight == 1), code:{
	[macro("Calc Coin Weight@Lib:inventory"): "Party"]
	[totalWeight = totalWeight + macro.return]
}]

[H: macro.return = totalWeight]

!!
@@ @cssPageName
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=true ; applyToSelected=false ; group=1 General ; tooltip= ; minWidth=140
body {
	font-family:Arial, sans-serif; 
	font-size:12; 
	background-image: url(asset://e93b29b8da82d69f0f9c9e7f819d74b3); 
	color:#ff0201; 
}

a {
	text-decoration:none; 
	color:black; 
}

tr:nth-child(odd) {
	background-color: Lightgreen; 
}
.oddRow {
   background-color: #FFFFFF;
}

.evenRow {
   background-color: #EEEEAA
}

table (
   cellspacing:0;
   padding:0px; 
   border:0px;
)

!!
@@ @Add 4E Item
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: categorypick = macro.args]

[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),categorypick)]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually)|Select the item to add|list|select = 0 value = string",
 "junkvar|---------|--OR--|label",
 "entermanually|0|Check here to enter an item not in the database|check"
)]
[H: abort(screen1)]

[H, if(entermanually == 1 || itemtoadd == "(Enter Manually)"), code:{
 [macro("Add 4E Item Manually@Lib:inventory"): ""]
}; {
 [objectToAdd = json.get(getLibProperty(categorypick+"Details","Lib:inventory"),itemtoadd)]
 [objectToAdd = json.set(objectToAdd, "Qty", 1)]
 [setProperty("Items", json.append(getProperty("Items"),objectToAdd))]
 [macro("Invent Main Starter@Lib:inventory"): ""]
}]

!!
@@ @Add 4E Item Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "itemName|Name|Item Name|text|width = 40","itemWeight|1|Weight|text|width = 4","itemContainer|0|Is this a container?|check","itemDesc|Description|Description|text|width = 80"
)]
[H: abort(screen)]

[H: objectToAdd = json.set("{}", "Name", itemName, "Weight", itemWeight, "Container", itemContainer, "Description", itemDesc, "Qty", 1, "Location", itemName, "LocPrior", 0, "Cap", 0, "Capacity", 0, "WeightCount", 1, "Class", "Goods", "useInfo", "{}")]

[H: Items = getProperty("Items")]
[H: setProperty("Items", json.append(Items,objectToAdd))]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Ammo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Ammo")]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually - Weapon Isn't Listed)|Select the item to add|list|select = 0 value = string",
 "qty|1|How many you got?",
 "wmaterial|(None),Adamantine,Darkwood,Cold Iron,Mithral,Silvered|Select Any Special Materials|RADIO|SELECT = 0 VALUE = STRING",
 "wenhance|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING",
 "wench1|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench2|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench3|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench4|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench5|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench6|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench7|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench8|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "wench9|(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING"
)]
[H: abort(screen1)]

[H, if(itemtoadd == "(Enter Manually - Weapon Isn't Listed)"), code:{
 [macro("Add Ammo Manually@Lib:inventory"): ""]
 [H: objectToAdd = macro.return]
 [H: itemtoadd = json.get(objectToAdd,"Name")]
 }; {
 [H: objectToAdd = json.get(getLibProperty("AmmoDetails","Lib:inventory"),itemtoadd)]
}]

[H: useInfo = json.get(objectToAdd,"useInfo")]

[H: moniker = ""]
[H: enchantments = ""]
[H, if(wenhance!= 0 && wenhance!= "Masterwork"): moniker = "+"+wenhance+" "]
[H, if(wenhance == "Masterwork"): moniker = "Mwk "]
[H, if(wench1!= "(None)"), code:{[moniker = moniker+" "+wench1][enchantments = listAppend(enchantments,wench1)]}; {}]
[H, if(wench2!= "(None)"), code:{[moniker = moniker+" "+wench2][enchantments = listAppend(enchantments,wench2)]}; {}]
[H, if(wench3!= "(None)"), code:{[moniker = moniker+" "+wench3][enchantments = listAppend(enchantments,wench3)]}; {}]
[H, if(wench4!= "(None)"), code:{[moniker = moniker+" "+wench4][enchantments = listAppend(enchantments,wench4)]}; {}]
[H, if(wench5!= "(None)"), code:{[moniker = moniker+" "+wench5][enchantments = listAppend(enchantments,wench5)]}; {}]
[H, if(wench6!= "(None)"), code:{[moniker = moniker+" "+wench6][enchantments = listAppend(enchantments,wench6)]}; {}]
[H, if(wench7!= "(None)"), code:{[moniker = moniker+" "+wench7][enchantments = listAppend(enchantments,wench7)]}; {}]
[H, if(wench8!= "(None)"), code:{[moniker = moniker+" "+wench8][enchantments = listAppend(enchantments,wench8)]}; {}]
[H, if(wench9!= "(None)"), code:{[moniker = moniker+" "+wench9][enchantments = listAppend(enchantments,wench9)]}; {}]

[H, if(wmaterial!= "(None)"): moniker = if(moniker == "",wmaterial+" ",moniker+" "+wmaterial+" ")]
[H: wdesig = moniker+" "+itemtoadd]

[H: description = json.get(objectToAdd,"Description")]
[H, if(Size!= "Medium"): objectToAdd = json.set(objectToAdd,"Description",description+" {"+Size+"}")]

[H: Weight = json.get(objectToAdd,"Weight")]
[H, if(Size == "Small"), code:{
 [Weight = Weight/2]
}; {}]
[H, if(Size!= "Small" && Size!= "Medium"), code:{
 [screen = input(
  "junkvar|You have to help us out|We are missing some info|label",
  "Weight|5|Enter the correct weight of the ammo"
 )]
 [abort(screen)]
}; {}]

[H: objectToAdd = json.set(objectToAdd,"Weight",Weight)]
[H: useInfo = json.set(useInfo,"Material",wmaterial,"Enhance",wenhance,"Enchantments",enchantments,"Desig",wdesig)]

[H: objectToAdd = json.set(objectToAdd,"useInfo",useInfo,"Name",wdesig,"Location",wdesig,"Qty",qty)]
[H: Items = json.append(Items,objectToAdd)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Ammo Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name|Name|BASE name of the ammo type",
 "Weight|1|How much does a MEDIUM version weigh?",
 "description|Ammunition for ???|Enter text to display in inventory menu"
)]
[H: abort(screen)]

[H: object = "Name = "+name+"##Weight = "+Weight+"##WeightCount = 1##Description = "+description+"##Qty = 1##Location = "+name+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Ammo##Container = 0##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]

[H: useInfo = "Desig = "+name]
[H: useInfo = json.fromStrProp(useInfo,"##")]

[H: object = json.set(object,"useInfo",useInfo)]

[H: macro.return = object]

!!
@@ @Add Armor Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "junkvar|Do not add +1s or change the base stats|Enter values for the armor BEFORE any enhancemnts|label",
 "armname|Custom Armor|Name|text|width = 40",
 "armAC|1|Armor Value",
 "armcheckpen|1|Enter the armor check penalty",
 "armmaxdex|1|Enter the maximum dex bonus the armor allows",
 "armfail|5|Enter the spell failure %",
 "armweightclass|Light,Medium,Heavy|Set armor weight class|radio|orient = h value = string",
 "Weight|20|Enter the weight of the armor at MEDIUM size"
)]
[H: abort(screen)]

[H: object = "Name = "+armname+"##Weight = "+Weight+"##Description = Armor##Qty = 1##Location = "+armname+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Armor##Container = 0##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]
[H: useInfo = json.set("{}","Name",armname,"AC",armAC,"Check Penalty",armcheckpen,"MaxDex",armmaxdex,"Spell Fail",armfail,"Weight Class",armweightclass)]
[H: object = json.set(object,"useInfo",useInfo)]

[H: macro.return = object]

!!
@@ @Add Armor Wrap
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: itemtoadd = macro.args]
[H: enchlist = "(None),Acid Resist,Acid Resist Improved,Acid Resist Greater,Cold Resist,Cold Resist Improved,Cold Resist Greater,Electricity Resist,Electricity Resist Improved,Electricity Resist Greater,Etherealness,Fire Resist,Fire Resist Improved,Fire Resist Greater,Fortification Heavy,Fortification Light,Fortification Moderate,Ghost Touch,Glammered,Invulnerability,Shadow,Shadow Improved,Shadow Greater,Silent Moves,Silent Moves Improved,Silent Moves Greater,Slick,Slick Improved,Slick Greater,Sonic Resist,Sonic Resist Improved,Sonic Resist Greater,Spell Resist 13,Spell Resist 15,Spell Resist 17,Spell Resist 19,Undead Controlling,Wild"]

[H, if(itemtoadd == "(Enter Manually)"), code:{
 [macro("Add Armor Manually@Lib:inventory"): ""]
 [objectToAdd = macro.return]
 [itemtoadd = json.get(objectToAdd,"Name")]
}; {
 [objectToAdd = json.get(getLibProperty("ArmorDetails","Lib:inventory"),itemtoadd)]
}]

[H: screen1 = input(
 "junkvar|"+itemtoadd+"|Enter material/enchantment info for|label",
 "material|(None),Adamantine,Dragonhide,Mithral|Indicate Any Special Materials|RADIO|SELECT = 0 VALUE = STRING",
 "enhance|0,Masterwork,1,2,3,4,5|Select Enhancement Value|RADIO|SELECT = 0 VALUE = STRING",
 "ench1|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench2|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench3|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench4|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench5|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench6|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench7|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench8|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench9|"+enchlist+"|Select a Special Enchantment|list|value = string"
)]
[H: abort(screen1)]

[H: useInfo = json.get(objectToAdd,"useInfo")]

[H: enchlist = ""]
[H, foreach(ench,ench1+","+ench2+","+ench3+","+ench4+","+ench5+","+ench6+","+ench7+","+ench8+","+ench9), code:{
 [if(ench!= "(None)"): enchlist = listAppend(enchlist,ench)]
}]
[H, if(enchlist == ""): enchlist = "(None)"]
[H: useInfo = json.set(useInfo,"Enchantments",enchlist,"Enhancement",enhance,"Material",material)]

[H: Weight = json.get(objectToAdd,"Weight")]
[H, if(Size == "Small"), code:{
 [Weight = Weight/2]
}; {}]
[H, if(Size!= "Small" && Size!= "Medium"), code:{
 [screen = input(
  "junkvar|You have to help us out|We are missing some info|label",
  "Weight|5|Enter the correct weight of this armor"
 )]
 [abort(screen)]
}; {}]

[H: armmaxdex = json.get(useInfo,"MaxDex")]
[H: armweightclass = json.get(useInfo,"Weight Class")]
[H: armcheckpen = json.get(useInfo,"Check Penalty")]
[H: armfail = json.get(useInfo,"Spell Fail")]

[H, if(material == "Mithral"), code:{
 [Weight = Weight/2]
 [if(weightclass == "Medium"): armweightclass = "Light")]
 [if(weightclass == "Heavy"): armweightclass = "Medium")]
 [armmaxdex = min(999,armmaxdex+2)]
 [armcheckpen = max(0,armcheckpen-2)]
 [armfail = max(0,armfail-10)]
}; {}]

[H, if(material!= "(None)"): Mwk = 1; Mwk = 0]
[H, if(enhance == "Masterwork"), code:{
 [Mwk = 1]
 [enhance = 0]
}; {}]
[H, if(enhance>0): Mwk = 1]

[H: armAC = json.get(useInfo,"AC")+enhance]

[H: objectToAdd = json.set(objectToAdd,"Weight",Weight)]
[H, if(Mwk == 1): armcheckpen = max(0,armcheckpen-1)]

[H: moniker = ""]
[H, if(enhance<1 && Mwk == 1 && material == "(None)"): moniker = "Mwk "]
[H, if(enhance>0): moniker = "+"+enhance+" "]

[H, if(material!= "(None)"): moniker = moniker+material+" "]
[H: moniker = moniker+itemtoadd]
[H, if(enchlist!= "" && enchlist!= "(None)"): moniker = moniker+" ("+enchlist+")"]

[H: useInfo = json.set(useInfo,"AC",armAC,"Check Penalty",armcheckpen,"Weight Class",armweightclass,"Material",material,"MaxDex",armmaxdex,"Name",moniker,"Shortname",itemtoadd,"Spell Fail",armfail)]
[H, if(armmaxdex> = 999): armmaxdex = "Unlimited"]
[H: description = armweightclass+" Armor: AC "+armAC+", MaxDex "+armmaxdex+", Check "+armcheckpen+", Fail "+armfail]

[H, if(enhance>0): description = "Magic "+description]
[H, if(Size!= "Medium"): objectToAdd = json.set(objectToAdd,"Description",description+" {"+Size+"}")]

[H: objectToAdd = json.set(objectToAdd,"Name",moniker,"Weight",Weight,"useInfo",useInfo,"Description",description,"Location",moniker)]
[H: Items = json.append(Items,objectToAdd)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Armor/Shields
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: armors = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Armor")]

[H: screen1 = input(
 "itemtoadd|"+armors+",(Enter Manually)|Select the armor to add|list|select = 0 value = string"
)]
[H: abort(screen1)]

[H: itemdetails = json.get(getLibProperty("ArmorDetails"),itemtoadd)]
[H, if(itemtoadd!= "(Enter Manually)"): class = json.get(itemdetails,"Class"); class = "Armor"]

[H: screen2 = input(
 "class|Armor,Shield|Which kind of armor is it?|radio|value = string"
)]
[H: abort(screen2)]

[macro("Add "+class+" Wrap@Lib:inventory"): itemtoadd]

!!
@@ @Add Double Weapon Wrap
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: objectToAdd = macro.args]
[H: bridgename = json.get(objectToAdd,"Name")]

[H: useInfo = json.get(objectToAdd,"useInfo")]
[H: wepends = json.get(useInfo,"Ends")]
[H: wep1name = listGet(wepends,0)]
[H: wep2name = listGet(wepends,1)]
[H: wep1details = json.get(useInfo,"End 1")]
[H: wep2details = json.get(useInfo,"End 2")]
[H: shortname = wep1name+" end of "+bridgename]
[H: shortname2 = wep2name+" end of "+bridgename]

[H: wepenchants = "(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Unholy,Vicious,Vorpal,Wounding"]

[H: screen1 = input(
 "tab 0|General Weapon Details||tab",
 "miscABbonus|0|Enter Misc. AB Bonus (From Weapon Focus, Etc.)##miscdmgbonus|0|Enter Misc. Dmg. Bonus (From Weapon Spec., Etc.)##keen|0|Do You Have Improved Critical for this Weapon?|CHECK##nonprof|0|Check If You Are _NOT_ Proficient With This Weapon (-4 Penalty)|CHECK",
 "tab 1|"+wep1name+" End Details||tab",
 "wmaterial|(None),Adamantine,Darkwood,Cold Iron,Mithral,Silvered|Select Any Special Materials|RADIO|SELECT = 0 VALUE = STRING##wenhance|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING##wench1|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench3|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench4|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench5|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench6|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench7|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench8|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench9|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING",
 "tab 2|"+wep2name+" End Details||tab",
 "wmaterial2|(None),Adamantine,Darkwood,Cold Iron,Mithral,Silvered|Select Any Special Materials|RADIO|SELECT = 0 VALUE = STRING##wenhance2|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING##wench1_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench2_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench3_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench4_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench5_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench6_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench7_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench8_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench9_2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING"
)]
[H: abort(screen1)]

[H, if(nonprof == 1): miscABbonus = miscABbonus-4]

[H: moniker = ""]
[H: enchantments = ""]
[H, if(wenhance!= 0 && wenhance!= "Masterwork"): moniker = "+"+wenhance+" "]
[H, if(wenhance == "Masterwork"): moniker = "Mwk "]
[H, if(wench1!= "(None)"), code:{[moniker = moniker+" "+wench1][enchantments = listAppend(enchantments,wench1)]}; {}]
[H, if(wench2!= "(None)"), code:{[moniker = moniker+" "+wench2][enchantments = listAppend(enchantments,wench2)]}; {}]
[H, if(wench3!= "(None)"), code:{[moniker = moniker+" "+wench3][enchantments = listAppend(enchantments,wench3)]}; {}]
[H, if(wench4!= "(None)"), code:{[moniker = moniker+" "+wench4][enchantments = listAppend(enchantments,wench4)]}; {}]
[H, if(wench5!= "(None)"), code:{[moniker = moniker+" "+wench5][enchantments = listAppend(enchantments,wench5)]}; {}]
[H, if(wench6!= "(None)"), code:{[moniker = moniker+" "+wench6][enchantments = listAppend(enchantments,wench6)]}; {}]
[H, if(wench7!= "(None)"), code:{[moniker = moniker+" "+wench7][enchantments = listAppend(enchantments,wench7)]}; {}]
[H, if(wench8!= "(None)"), code:{[moniker = moniker+" "+wench8][enchantments = listAppend(enchantments,wench8)]}; {}]
[H, if(wench9!= "(None)"), code:{[moniker = moniker+" "+wench9][enchantments = listAppend(enchantments,wench9)]}; {}]

[H: moniker2 = ""]
[H: enchantments2 = ""]
[H, if(wenhance2!= 0 && wenhance2!= "Masterwork"): moniker2 = "+"+wenhance2+" "]
[H, if(wenhance2 == "Masterwork"): moniker2 = "Mwk "]
[H, if(wench1_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench1_2][enchantments2 = listAppend(enchantments2,wench1_2)]}; {}]
[H, if(wench2_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench2_2][enchantments2 = listAppend(enchantments2,wench2_2)]}; {}]
[H, if(wench3_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench3_2][enchantments2 = listAppend(enchantments2,wench3_2)]}; {}]
[H, if(wench4_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench4_2][enchantments2 = listAppend(enchantments2,wench4_2)]}; {}]
[H, if(wench5_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench5_2][enchantments2 = listAppend(enchantments2,wench5_2)]}; {}]
[H, if(wench6_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench6_2][enchantments2 = listAppend(enchantments2,wench6_2)]}; {}]
[H, if(wench7_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench7_2][enchantments2 = listAppend(enchantments2,wench7_2)]}; {}]
[H, if(wench8_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench8_2][enchantments2 = listAppend(enchantments2,wench8_2)]}; {}]
[H, if(wench9_2!= "(None)"), code:{[moniker2 = moniker2+" "+wench9_2][enchantments2 = listAppend(enchantments2,wench9_2)]}; {}]

[H, if(wmaterial!= "(None)"): moniker = if(moniker == "",wmaterial+" ",moniker+" "+wmaterial+" ")]
[H, if(wmaterial2!= "(None)"): moniker2 = if(moniker2 == "",wmaterial2+" ",moniker2+" "+wmaterial2+" ")]

[H, if(wenhance == "Masterwork"), code:{
  [wAB = miscABbonus+1)]
  [dmgbonus = miscdmgbonus]
}; {
  [wAB = miscABbonus+wenhance]
  [dmgbonus = miscdmgbonus+wenhance]
}]
[H, if(wenhance2 == "Masterwork"), code:{
  [wAB2 = miscABbonus+1)]
  [dmgbonus2 = miscdmgbonus]
}; {
  [wAB2 = miscABbonus+wenhance2]
  [dmgbonus2 = miscdmgbonus+wenhance2]
}]

[H, if(wmaterial == "Silvered"): dmgbonus = dmgbonus-1]
[H, if(wench1 == "Keen" || wench2 == "Keen" || wench3 == "Keen" ||wench4 == "Keen" ||wench5 == "Keen" ||wench6 == "Keen" ||wench7 == "Keen" ||wench8 == "Keen" ||wench9 == "Keen"): keen = 1; keen = keen]
[H, if(wmaterial2 == "Silvered"): dmgbonus2 = dmgbonus2-1]
[H, if(wench1_2 == "Keen" || wench2_2 == "Keen" || wench3_2 == "Keen" ||wench4_2 == "Keen" ||wench5_2 == "Keen" ||wench6_2 == "Keen" ||wench7_2 == "Keen" ||wench8_2 == "Keen" ||wench9_2 == "Keen"): keen2 = 1; keen2 = keen]

[H, if(keen == 1), code:{
 [H: threat = json.get(wep1details,"Threat")]
 [H: num = 21-threat]
 [H: threat = 21-(2*num)]
 [H: wep1details = json.set(wep1details,"Threat",threat)]
}; {}]
[H, if(keen2 == 1), code:{
 [H: threat = json.get(wep2details,"Threat")]
 [H: num = 21-threat]
 [H: threat = 21-(2*num)]
 [H: wep2details = json.set(wep2details,"Threat",threat)]
}; {}]

[H: wdesig = moniker+" "+wep1name]
[H: wdesig2 = moniker2+" "+wep2name]

[H: description = json.get(objectToAdd,"Description")]
[H, if(Size!= "Medium"): objectToAdd = json.set(objectToAdd,"Description",description+" {"+Size+"}")]

[H: Weight = json.get(objectToAdd,"Weight")]
[H, if(Size == "Small"), code:{
 [dmgdie = json.get(wep1details,"SDie")]
 [dmgdie2 = json.get(wep2details,"SDie")]
 [Weight = Weight/2]
}; {}]
[H, if(Size == "Medium"), code:{
 [dmgdie = json.get(wep1details,"MDie")]
 [dmgdie2 = json.get(wep2details,"MDie")]
}]
[H, if(Size!= "Small" && Size!= "Medium"), code:{
 [screen = input(
  "junkvar|You have to help us out|We are missing some info|label",
  "dmgdie|1d8|Enter the correct damage die for the "+wep1name+" end",
  "dmgdie2|1d8|Enter the correct damage die for the "+wep2name+" end",
  "Weight|5|Enter the correct weight of the weapon"
 )]
 [abort(screen)]
}; {}]

[H: wep1details = json.set(wep1details,"Material",wmaterial,"Enhance",wenhance,"DmgBonus",dmgbonus,"AB",wAB,"Enchantments",enchantments,"Desig",wdesig,"Shortname",shortname,"Moniker",moniker,"Die",dmgdie)]
[H: wep2details = json.set(wep2details,"Material",wmaterial2,"Enhance",wenhance2,"DmgBonus",dmgbonus2,"AB",wAB2,"Enchantments",enchantments2,"Desig",wdesig2,"Shortname",shortname2,"Moniker",moniker2,"Die",dmgdie2)]
[H: useInfo = json.set(useInfo,"End 1",wep1details,"End 2",wep2details)]

[H: mainname = bridgename+" ("+wdesig+" / "+wdesig2+")"]

[H: objectToAdd = json.set(objectToAdd,"useInfo",useInfo,"Name",mainname,"Location",mainname,"Weight",Weight)]

[H: macro.return = objectToAdd]

!!
@@ @Add Goods
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Goods")]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually)|Select the item to add|list|select = 0 value = string",
 "junkvar|---------|--OR--|label",
 "entermanually|0|Check here to enter an item not in the database|check"
)]
[H: abort(screen1)]

[H, if(entermanually == 1 || itemtoadd == "(Enter Manually)"), code:{
 [macro("Add Goods Manually@Lib:inventory"): ""]
}; {
 [objectToAdd = json.get(getLibProperty("GoodsDetails","Lib:inventory"),itemtoadd)]
 [Items = json.append(Items,objectToAdd)]
 [macro("Invent Main Starter@Lib:inventory"): ""]
}]

!!
@@ @Add Goods Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name|Name","Weight|1","cont|0","description|Text"
)]
[H: abort(screen)]

[H: object = "Name = "+name+"##Weight = "+Weight+"##Description = "+description+"##Qty = 1##Location = "+name+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Goods##Container = "+cont+"##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]

[H: Items = json.append(Items,object)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Item
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: options = getLibProperty("ItemCategories","Lib:inventory")]

[H: screen1 = input(
 "categorypick|"+options+"|To what category does the item belong?|radio|select = 0 value = string"
)]
[H: abort(screen1)]

[H, if(categorypick ==  "Armor/Shields"): categorypick = "Armor"]
[H, if(categorypick ==  "Goods/Gear"): categorypick = "Goods"]

[if(categorypick ==  "Wands"), code:{
	[macro("Add Wands@Lib:inventory"): ""]
}; {
	[macro("Add 4E Item@Lib:inventory"): categorypick]
}]

!!
@@ @Add Shield Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "junkvar|Do not add +1s or change the base stats|Enter values for the armor BEFORE any enhancemnts|label",
 "shname|Custom Shield|Name|text|width = 40",
 "shAC|1|Armor Value",
 "shcheckpen|1|Enter the armor check penalty",
 "shmaxdex|1|Enter the maximum dex bonus the armor allows",
 "shfail|5|Enter the spell failure %",
 "classnum|Buckler (Hand Free to Wield Weapons),Light (Hand Free to Hold/Gesture),Heavy (Hand Occupied by Shield)|Set shield class|radio|orient = h",
 "Weight|20|Enter the weight of the armor at MEDIUM size"
)]
[H: abort(screen)]

[H, if(classnum == 0): shweightclass = "Buckler"]
[H, if(classnum == 1): shweightclass = "Light"]
[H, if(classnum == 2): shweightclass = "Heavy"]

[H: object = "Name = "+shname+"##Weight = "+Weight+"##Description = Shield##Qty = 1##Location = "+shname+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Shield##Container = 0##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]
[H: useInfo = json.set("{}","Name",shname,"AC",shAC,"Check Penalty",shcheckpen,"MaxDex",shmaxdex,"Spell Fail",shfail,"Weight Class",shweightclass)]
[H: object = json.set(object,"useInfo",useInfo)]

[H: macro.return = object]

!!
@@ @Add Shield Wrap
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: itemtoadd = macro.args]
[H: enchlist = "(None),Acid Resist,Acid Resist Improved,Acid Resist Greater,Animated,Arrow Catching,Arrow Deflection,Bashing,Blinding,Cold Resist,Cold Resist Improved,Cold Resist Greater,Electricity Resist,Electricity Resist Improved,Electricity Resist Greater,Fire Resist,Fire Resist Improved,Fire Resist Greater,Fortification Heavy,Fortification Light,Fortification Moderate,Ghost Touch,Reflecting,Sonic Resist,Sonic Resist Improved,Sonic Resist Greater,Undead Controlling,Wild"]

[H, if(itemtoadd == "(Enter Manually)"), code:{
 [macro("Add Shield Manually@Lib:inventory"): ""]
 [objectToAdd = macro.return]
 [itemtoadd = json.get(objectToAdd,"Name")]
}; {
 [objectToAdd = json.get(getLibProperty("ArmorDetails","Lib:inventory"),itemtoadd)]
}]

[H: screen1 = input(
 "junkvar|"+itemtoadd+"|Enter material/enchantment info for|label",
 "material|(None),Adamantine,Darkwood,Dragonhide,Mithral|Indicate Any Special Materials|RADIO|SELECT = 0 VALUE = STRING",
 "enhance|0,Masterwork,1,2,3,4,5|Select Enhancement Value|RADIO|SELECT = 0 VALUE = STRING",
 "ench1|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench2|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench3|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench4|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench5|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench6|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench7|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench8|"+enchlist+"|Select a Special Enchantment|list|value = string",
 "ench9|"+enchlist+"|Select a Special Enchantment|list|value = string"
)]
[H: abort(screen1)]

[H: useInfo = json.get(objectToAdd,"useInfo")]

[H: enchlist = ""]
[H, foreach(ench,ench1+","+ench2+","+ench3+","+ench4+","+ench5+","+ench6+","+ench7+","+ench8+","+ench9), code:{
 [if(ench!= "(None)"): enchlist = listAppend(enchlist,ench)]
}]
[H, if(enchlist == ""): enchlist = "(None)"]
[H: useInfo = json.set(useInfo,"Enchantments",enchlist,"Enhancement",enhance,"Material",material)]

[H: Weight = json.get(objectToAdd,"Weight")]
[H, if(Size == "Small"), code:{
 [Weight = Weight/2]
}; {}]
[H, if(Size!= "Small" && Size!= "Medium"), code:{
 [screen = input(
  "junkvar|You have to help us out|We are missing some info|label",
  "Weight|5|Enter the correct weight of this type of shield"
 )]
 [abort(screen)]
}; {}]

[H: shmaxdex = json.get(useInfo,"MaxDex")]
[H: shcheckpen = json.get(useInfo,"Check Penalty")]
[H: shfail = json.get(useInfo,"Spell Fail")]

[H, if(material == "Mithral"), code:{
 [Weight = Weight/2]
 [shmaxdex = min(999,shmaxdex+2)]
 [shcheckpen = max(0,shcheckpen-2)]
 [shfail = max(0,shfail-10)]
}; {}]

[H, if(material == "Darkwood"), code:{
 [Weight = Weight/2]
 [shcheckpen = max(0,shcheckpen-1)]
}; {}]

[H, if(material!= "(None)"): Mwk = 1; Mwk = 0]
[H, if(enhance == "Masterwork"), code:{
 [Mwk = 1]
 [enhance = 0]
}; {}]
[H, if(enhance>0): Mwk = 1]

[H: shAC = json.get(useInfo,"AC")+enhance]

[H, if(Mwk == 1): shcheckpen = max(0,shcheckpen-1)]

[H: moniker = ""]
[H, if(enhance<1 && Mwk == 1 && material == "(None)"): moniker = "Mwk "]
[H, if(enhance>0): moniker = "+"+enhance+" "]

[H, if(material!= "(None)"): moniker = moniker+material+" "]
[H: moniker = moniker+itemtoadd]
[H, if(enchlist!= "" && enchlist!= "(None)"): moniker = moniker+" ("+enchlist+")"]

[H: useInfo = json.set(useInfo,"AC",shAC,"Check Penalty",shcheckpen,"Material",material,"MaxDex",shmaxdex,"Name",moniker,"Shortname",itemtoadd,"Spell Fail",shfail)]
[H, if(shmaxdex> = 999): shmaxdex = "Unlimited"]
[H: description = "Shield: AC "+shAC+", MaxDex "+shmaxdex+", Check "+shcheckpen+", Fail "+shfail]

[H, if(enhance>0): description = "Magic "+description]
[H, if(Size!= "Medium"): objectToAdd = json.set(objectToAdd,"Description",description+" {"+Size+"}")]

[H: objectToAdd = json.set(objectToAdd,"Name",moniker,"Weight",Weight,"useInfo",useInfo,"Description",description,"Location",moniker)]
[H: Items = json.append(Items,objectToAdd)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Single Weapon Wrap
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: objectToAdd = macro.args]
[H: itemtoadd = json.get(objectToAdd,"Name")]

[H: wepenchants = "(None),Anarchic,Axiomatic,Bane,Brilliant Energy,Dancing,Defending,Disrupting,Distance,Flaming,Flaming Burst,Frost,Ghost Touch,Holy,Icy Burst,Keen,Ki Focus,Merciful,Mighty Cleaving,Returning,Seeking,Shock,Shocking Burst,Speed,Spell Storing,Thundering,Throwing,Unholy,Vicious,Vorpal,Wounding"]

[H: screen1 = input(
 "tab 1|"+itemtoadd+" Details||tab",
 "miscABbonus|0|Enter Misc. AB Bonus (From Weapon Focus, Etc.)##miscdmgbonus|0|Enter Misc. Dmg. Bonus (From Weapon Spec., Etc.)##keen|0|Do You Have Improved Critical for this Weapon?|CHECK##nonprof|0|Check If You Are _NOT_ Proficient With This Weapon (-4 Penalty)|CHECK##wmaterial|(None),Adamantine,Darkwood,Cold Iron,Mithral,Silvered|Select Any Special Materials|RADIO|SELECT = 0 VALUE = STRING##wenhance|0,Masterwork,1,2,3,4,5|Select Enhancement Level|RADIO|SELECT = 0 VALUE = STRING##wench1|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench2|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench3|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench4|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench5|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench6|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench7|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench8|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING##wench9|"+wepenchants+"|Select Any Special Enchantments|LIST|SELECT = 0 VALUE = STRING"
)]
[H: abort(screen1)]

[H: useInfo = json.get(objectToAdd,"useInfo")]

[H, if(nonprof == 1): miscABbonus = miscABbonus-4]
[H: moniker = ""]
[H: enchantments = ""]
[H, if(wenhance!= 0 && wenhance!= "Masterwork"): moniker = "+"+wenhance+" "]
[H, if(wenhance == "Masterwork"): moniker = "Mwk "]
[H, if(wench1!= "(None)"), code:{[moniker = moniker+" "+wench1][enchantments = listAppend(enchantments,wench1)]}; {}]
[H, if(wench2!= "(None)"), code:{[moniker = moniker+" "+wench2][enchantments = listAppend(enchantments,wench2)]}; {}]
[H, if(wench3!= "(None)"), code:{[moniker = moniker+" "+wench3][enchantments = listAppend(enchantments,wench3)]}; {}]
[H, if(wench4!= "(None)"), code:{[moniker = moniker+" "+wench4][enchantments = listAppend(enchantments,wench4)]}; {}]
[H, if(wench5!= "(None)"), code:{[moniker = moniker+" "+wench5][enchantments = listAppend(enchantments,wench5)]}; {}]
[H, if(wench6!= "(None)"), code:{[moniker = moniker+" "+wench6][enchantments = listAppend(enchantments,wench6)]}; {}]
[H, if(wench7!= "(None)"), code:{[moniker = moniker+" "+wench7][enchantments = listAppend(enchantments,wench7)]}; {}]
[H, if(wench8!= "(None)"), code:{[moniker = moniker+" "+wench8][enchantments = listAppend(enchantments,wench8)]}; {}]
[H, if(wench9!= "(None)"), code:{[moniker = moniker+" "+wench9][enchantments = listAppend(enchantments,wench9)]}; {}]

[H, if(wmaterial!= "(None)"): moniker = if(moniker == "",wmaterial+" ",moniker+" "+wmaterial+" ")]

[H, if(wenhance == "Masterwork"), code:{
  [wAB = miscABbonus+1)]
  [dmgbonus = miscdmgbonus]
}; {
  [wAB = miscABbonus+wenhance]
  [dmgbonus = miscdmgbonus+wenhance]
}]

[H, if(wmaterial == "Silvered"): dmgbonus = dmgbonus-1]
[H, if(wench1 == "Keen" || wench2 == "Keen" || wench3 == "Keen" ||wench4 == "Keen" ||wench5 == "Keen" ||wench6 == "Keen" ||wench7 == "Keen" ||wench8 == "Keen" ||wench9 == "Keen"): keen = 1; keen = keen]

[H, if(wench1 == "Distance"||wench2 == "Distance"||wench3 == "Distance"||wench4 == "Distance"||wench5 == "Distance"||wench6 == "Distance"||wench7 == "Distance"||wench8 == "Distance"||wench9 == "Distance"||FarShot == 1): increment = (increment*2)]

[H, if(wench1 == "Throwing"||wench2 == "Throwing"||wench3 == "Throwing"||wench4 == "Throwing"||wench5 == "Throwing"||wench6 == "Throwing"||wench7 == "Throwing"||wench8 == "Throwing"||wench9 == "Throwing"): useInfo = json.set(useInfo,"MeleeOnly",1,"Increment",10)]

[H, if(keen == 1), code:{
 [H: threat = json.get(useInfo,"Threat")]
 [H: num = 21-threat]
 [H: threat = 21-(2*num)]
 [H: useInfo = json.set(useInfo,"Threat",threat)]
}; {}]

[H: wdesig = moniker+" "+itemtoadd]
[H: wdesig = trim(wdesig)]

[H: description = json.get(objectToAdd,"Description")]
[H, if(Size!= "Medium"): objectToAdd = json.set(objectToAdd,"Description",description+" {"+Size+"}")]

[H: Weight = json.get(objectToAdd,"Weight")]
[H, if(Size == "Small"), code:{
 [dmgdie = json.get(useInfo,"SDie")]
 [Weight = Weight/2]
}; {}]
[H, if(Size == "Medium"): dmgdie = json.get(useInfo,"MDie")]
[H, if(Size!= "Small" && Size!= "Medium"), code:{
 [screen = input(
  "junkvar|You have to help us out|We are missing some info|label",
  "dmgdie|1d8|Enter the correct damage dice",
  "Weight|5|Enter the correct weight of the weapon"
 )]
 [abort(screen)]
}; {}]

[H, if(itemtoadd == "Longbow (Composite)" || itemtoadd == "Shortbow (Composite)"), code:{
 [screen = input(
  "maxstr|0|Enter the strength bonus the bow allows"
 )]
 [abort(screen)]
 [useInfo = json.set(useInfo,"MaxStr",maxstr)]
}; {}]

[H: useInfo = json.set(useInfo,"Material",wmaterial,"Enhance",wenhance,"DmgBonus",dmgbonus,"AB",wAB,"Enchantments",enchantments,"Desig",wdesig,"Shortname",itemtoadd,"Moniker",moniker,"Die",dmgdie)]

[H: objectToAdd = json.set(objectToAdd,"useInfo",useInfo,"Name",wdesig,"Location",wdesig,"Weight",Weight)]

[H: macro.return = objectToAdd]

!!
@@ @Add Special
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Special")]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually)|Select the item to add|list|select = 0 value = string",
 "junkvar|---------|--OR--|label",
 "entermanually|0|Check here to enter an item not in the database|check"
)]
[H: abort(screen1)]

[H, if(entermanually == 1 || itemtoadd == "(Enter Manually)"), code:{
 [macro("Add Goods Manually@Lib:inventory"): ""]
}; {
 [objectToAdd = json.get(getLibProperty("SpecialDetails","Lib:inventory"),itemtoadd)]
 [Items = json.append(Items,objectToAdd)]
 [macro("Invent Main Starter@Lib:inventory"): ""]
}]

!!
@@ @Add Special Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name|Name","Weight|1","cont|0","description|Text"
)]
[H: abort(screen)]

[H: object = "Name = "+name+"##Weight = "+Weight+"##Description = "+description+"##Qty = 1##Location = "+name+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Special##Container = "+cont+"##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]

[H: Items = json.append(Items,object)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Tools
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Tools")]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually)|Select the item to add|list|select = 0 value = string",
 "junkvar|---------|--OR--|label",
 "entermanually|0|Check here to enter an item not in the database|check"
)]
[H: abort(screen1)]

[H, if(entermanually == 1 || itemtoadd == "(Enter Manually)"), code:{
 [macro("Add Tools Manually@Lib:inventory"): ""]
}; {
 [objectToAdd = json.get(getLibProperty("ToolsDetails","Lib:inventory"),itemtoadd)]
 [Items = json.append(Items,objectToAdd)]
 [macro("Invent Main Starter@Lib:inventory"): ""]
}]

!!
@@ @Add Tools Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name|Name","Weight|1","cont|0","description|Text"
)]
[H: abort(screen)]

[H: object = "Name = "+name+"##Weight = "+Weight+"##Description = "+description+"##Qty = 1##Location = "+name+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Tools##Container = "+cont+"##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]

[H: Items = json.append(Items,object)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Wands
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=3 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "spellname|Cure Light Wounds|What spell does the wand contain?|text|width = 50",
 "charges|50|How many charges does it have?"
)]
[H: abort(screen)]

[H: object = "Name = Wand: "+spellname+"##Weight = .1##Description = Short pointer imbued with magical powers##Qty = 1##Location = Wand: "+spellname+"##LocPrior = 0##Cap = 0##WeightCount = 1##Class = Wands##Container = 0##useInfo = {}"]
[H: object = json.fromStrProp(object,"##")]
[H: useInfo = json.set("{}","Charges",charges)]
[H: object = json.set(object,"useInfo",useInfo)]

[H: setProperty("Items", json.append(getProperty("Items"),object))]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Weapons
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: goods = json.get(getLibProperty("ItemCategoryOptions","Lib:inventory"),"Weapons")]

[H: screen1 = input(
 "itemtoadd|"+goods+",(Enter Manually - Weapon Isn't Listed)|Select the item to add|list|select = 0 value = string",
 "createcheck|0|Or, check here to create one|check"
)]
[H: abort(screen1)]

[H, if(itemtoadd == "(Enter Manually - Weapon Isn't Listed)" || createcheck == 1), code:{
 [macro("Add Weapons Manually@Lib:inventory"): ""]
 [H: objectToAdd = macro.return]
 [H: itemtoadd = json.get(objectToAdd,"Name")]
 }; {
 [H: objectToAdd = json.get(getLibProperty("WeaponsDetails","Lib:inventory"),itemtoadd)]
}]

[H: useInfo = json.get(objectToAdd,"useInfo")]
[H: wield = json.get(useInfo,"Wield")]
[H, if(wield == "D"), code:{
 [macro("Add Double Weapon Wrap@Lib:inventory"): objectToAdd]
 [objectToAdd = macro.return]
}; {
 [macro("Add Single Weapon Wrap@Lib:inventory"): objectToAdd]
 [objectToAdd = macro.return]
}]

[H: Items = json.append(Items,objectToAdd)]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Add Weapons Manually
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=true ; applyToSelected=false ; group=2 Adding Items ; tooltip= ; minWidth=140
[H: screen = input(
 "name|Name|BASE name of the weapon type",
 "Weight|1|How much does a medium version weigh?",
 "sdie|1d6|Damage dice if weapon is small",
 "mdie|1d8|Damage dice if weapon is medium",
 "dmgtype|Bludgeoning,Piercing,Slashing,Bludgeoning or Piercing,Bludgeoning or Slashing,Piercing or Slashing,Bludgeoning and Piercing,Bludgeoning and Slashing,Piercing and Slashing|Select the damage type the weapon deals|list|value = string",
 "wield|1H,2H,V,D|How is the weapon wielded?|list|value = string",
 "finesse|0|Check if the weapon accomodate weapon finesse|check",
 "threat|20|Enter the base threat range",
 "mult|2|Enter the base critical multiplier",
 "ammopick|Self,Other|Indicate if it uses other items for ammo|radio|orient = h value = string",
 "rangedonly|0|Check if the weapon is ONLY used as a ranged weapon|check",
 "meleeonly|0|Check if the weapon is ONLY used as a melee weapon|check",
 "nostrpen|0|Check if strength penalties are ignored (e.g. for crossbows)|check",
 "increment|0|Enter the range increment",
 "maxstr|999|Enter the maximum strengh bonus that can be applied to damage (999 if no limit)",
 "description|Weapon - 1H Simple B|Enter text to display in inventory menu"
)]
[H: abort(screen)]

[H: object = json.set("{}","Name",name,"Weight",Weight,"WeightCount",1,"Description",description,"Qty",1,"Location",name,"LocPrior",0,"Cap",0,"WeightCount",1,"Class","Weapons","Container",0)]

[H: useInfo = json.set("{}","Desig",name,"SDie",sdie,"MDie",mdie,"DmgType",dmgtype,"Wield",wield,"Finesseable",finesse,"Threat",threat,"Mult",mult,"RangedOnly",rangedonly,"MeleeOnly",meleeonly,"NosStrPen",nostrpen,"Increment",increment,"MaxStr",maxstr,"Ammo",ammopick)]

[H: object = json.set(object,"useInfo",useInfo)]

[H: macro.return = object]

!!
@@ @Add Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]
[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: denom0 = json.get(denomData, "Denom0")]
[H: abbvDenom0 = json.get(denomData, "abbvDenom0")]

[H: screen = input(
	"thisDenom|Silver Pieces|Full name",
	"thisAbbvDenom|SP|Short name",
	"thisValue|10|Number of "+abbvDenom0+" one of these can buy",
	"thisWeight|.02|Weight of one of these"
)]
[H: abort(screen)]

[H: thisValueReport = "1 "+thisAbbvDenom+" = "+thisValue+" "+abbvDenom0]
[H: denomData = json.set(denomData, "Denom"+numDenoms, thisDenom, "abbvDenom"+numDenoms, thisAbbvDenom, "Value"+numDenoms, thisValue, "ValueReport"+numDenoms, thisValueReport, "Weight"+numDenoms, thisWeight)]
[H: setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]

!!
@@ @Adj Party Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: numtochange = macro.args]

[H: denomData = json.get(getProperty("Coinpurse"), "denomData")]
[H: numDenoms = json.length(denomData)/5]
[H: denomlist = ""]
[H, c(numDenoms): denomlist = listAppend(denomlist, json.get(denomData, "Denom"+roll.count))]
[H: denomtochange = listGet(denomlist, numtochange)]
[H: partycpData = json.get(getProperty("Coinpurse"), "Party")]
[H, if(json.type(partycpData) != "OBJECT"): partycpData = "{}"]
[H: thisAmount = json.get(partycpData, denomtochange)]

[H: screen = input(
	"newamount|"+thisAmount+"|How many "+denomtochange+"?",
	"junk|OR-------------|--------------|label",
	"changeamount|0|Change by how much?"
)]

[H: assert(isNumber(newamount) && isNumber(changeamount), "Entries must be numbers", 0)]

[H, if(changeamount!= 0): newamount = thisAmount+changeamount]
[H: partycpData = json.set(partycpData, denomtochange, newamount)]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Party", partycpData))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Personal Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: numToChange = macro.args]

[H: denomData = json.get(getProperty("Coinpurse"), "denomData")]
[H: numDenoms = json.length(denomData)/5]
[H: denomList = ""]
[H, c(numDenoms): denomList = listAppend(denomList, json.get(denomData, "Denom"+roll.count))]
[H: denomToChange = listGet(denomList, numToChange)]
[H: personalCpData = json.get(getProperty("Coinpurse"), "Personal")]
[H, if(json.type(personalCpData) != "OBJECT"): personalCpData = "{}"]
[H: thisAmount = json.get(personalCpData, denomToChange)]

[H: screen = input(
	"newAmount|"+thisAmount+"|How many "+denomToChange+"?",
	"junk|OR-------------|--------------|label",
	"changeamount|0|Change by how much?"
)]

[H: assert(isNumber(newAmount) && isNumber(changeAmount), "Entries must be numbers", 0)]

[H, if(changeamount!= 0): newAmount = thisAmount+changeamount]
[H: personalCpData = json.set(personalCpData, denomToChange, newAmount)]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Personal", personalCpData))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Calc Coin Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: calcWhich = macro.args]
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]

[H: wealthData = json.get(cpData, calcWhich)]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) != "OBJECT"): denomData = "{}"]
[H, if(json.type(wealthData) != "OBJECT"): wealthData = "{}"]

[H: numDenoms = json.length(denomData)/5]

[H: weightTotal = 0]
[H, c(numDenoms), code:{
	[thisDenom = json.get(denomData, "Denom"+roll.count)]
	[thisWeight = json.get(denomData, "Weight"+roll.count)]
	[thisAmount = json.get(wealthData, thisDenom)]
	[if( !isNumber(thisAmount) ): thisAmount = 0]
	[weightTotal = weightTotal + (thisWeight * thisAmount)]
}]

[H: macro.return = round(weightTotal, 3)]

!!
@@ @Calc Coin Wt
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: calcWhich = macro.args]
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]

[H: wealthData = json.get(cpData, calcWhich)]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) != "OBJECT"): denomData = "{}"]
[H, if(json.type(wealthData) != "OBJECT"): wealthData = "{}"]

[H: numDenoms = json.length(denomData)/5]

[H: weightTotal = 0]
[H, c(numDenoms), code:{
	[thisDenom = json.get(denomData, "Denom"+roll.count)]
	[thisWeight = json.get(denomData, "Weight"+roll.count)]
	[thisAmount = json.get(wealthData, thisDenom)]
	[if( !isNumber(thisAmount) ): thisAmount = 0]
	[weightTotal = weightTotal + (thisWeight * thisAmount)]
}]

[H: macro.return = round(weightTotal, 3)]

!!
@@ @Change Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]

[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: list = ""]
[H, c(numDenoms), code:{
	[addthis = json.get(denomData, "Denom"+roll.count)+" "+json.get(denomData, "Valreport"+roll.count)]
	[list = listAppend(list, addthis)]
}]

[H: screen = input(
	"optionpick|"+list+"|Change Which?|radio|"
)][H: abort(screen)]

[H: baseshort = json.get(denomData, "abbvDenom0")]

[H: thisDenom = json.get(denomData, "Denom"+optionpick)]
[H: thisabbvDenom = json.get(denomData, "abbvDenom"+optionpick)]
[H: thisValue = json.get(denomData, "Value"+optionpick)]
[H: thisWeight = json.get(denomData, "Weight"+optionpick)]

[H, if(optionpick == 0), code:{
	[screen = input(
		"thisDenom|"+thisDenom+"|Full Name",
		"thisabbvDenom|"+thisabbvDenom+"|Short Name",
		"thisWeight|"+thisWeight+"|Weight of One"
	)][abort(screen)]
}; {
	[screen = input(
		"thisDenom|"+thisDenom+"|Full Name",
		"thisabbvDenom|"+thisabbvDenom+"|Short Name",
		"thisValue|"+thisValue+"|How many "+baseshort+" can 1 of these buy?",
		"thisWeight|"+thisWeight+"|Weight of One"
	)]
}]

[H: thisvalreport = "1 "+thisabbvDenom+" = "+thisValue+" "+baseshort]
[H: denomData = json.set(denomData, "Denom"+optionpick, thisDenom, "abbvDenom"+optionpick, thisabbvDenom, "Value"+optionpick, thisValue, "Valreport"+optionpick, thisvalreport, "Weight"+optionpick, thisWeight)]

[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "denomData", denomData))]

!!
@@ @Coinpurse Frame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[frame("Coinpurse"):{
	[macro("Coinpurse HTML@this"): ""]
}]

!!
@@ @Coinpurse HTML
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) !=  "OBJECT"): cpData = "{}"]
[H: denomData = json.get(cpData, "denomData")]
[H, if(json.type(denomData) !=  "OBJECT"): denomData = "{}"]
[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H, if(numDenoms>0): cellwidth = (100/numDenoms)+"%"; cellwidth = "1%"]
[H: denomlist = ""]
[H: abbvDenomlist = ""]
[H, c(numDenoms), code:{
	[denomlist = listAppend(denomlist, json.get(denomData, "Denom"+roll.count))]
	[abbvDenomlist = listAppend(abbvDenomlist, json.get(denomData, "abbvDenom"+roll.count))]
}]
[H: personalcpData = json.get(cpData, "Personal")]
[H, if(json.type(personalcpData) !=  "OBJECT"): personalcpData = "{}"]
[H: partycpData = json.get(cpData, "Party")]
[H, if(json.type(partycpData) !=  "OBJECT"): partycpData = "{}"]
[H: personalwealthlist = ""]
[H: partywealthlist = ""]
[H, foreach(denom, denomlist), code:{
	[varvar = json.get(personalcpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[personalwealthlist = listAppend(personalwealthlist,varvar)]
	[varvar = json.get(partycpData, denom)]
	[if(string(varvar) ==  ""): varvar = 0]
	[partywealthlist = listAppend(partywealthlist,varvar)]
}]
[H: showparty = json.get(cpData, "Showparty")]
[H, if(showparty ==  ""): showparty = "Open"]
[H: countweight = json.get(cpData, "Countweight")]
[H: countpartyweight = json.get(cpData, "Countpartyweight")]
[H, if(!isNumber(countweight)): countweight = 1]
[H, if(!isNumber(countpartyweight)): countpartyweight = 0]

<table style="cellspacing:0; cellpadding:0px; border-width:1px; border-style:solid; border-color:black width:100%;">
	<tr>
		<td style="width:100%; text-align:center;">
         <b>[R: upper(token.name)+"'S"] COINPURSE</b>
      </td>
	</tr>
	<tr>
		<td style="width:100%; text-align:center;">
         <font size = -2>
            [R: macroLink("Configure Currency","Configure Currency@this","none","",token.name)]
            &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
            [R: macroLink(showparty+" Party Wealth", "Toggle Party@this", "none", "", token.name)]
         </font>
      </td>
	</tr>
	<tr>
		<td style="width:100%; text-align:center;">
         <b>Personal</b>
         &nbsp; &nbsp; &nbsp; 
         <font size = -1>
            weight: 
            [H, macro("Calc Coin Weight@this"):"Personal"]
            [H, if(countweight ==  0): coinweight = "["+round(macro.return,3)+"]"; coinweight = macro.return]
            [R: macroLink(coinweight, "Count Coinweight@this", "none", "Personal", token.name)]
         </font>
      </td>
	</tr>
	<tr>
      [R, foreach(abbvDenom, abbvDenomlist, ""), code:{
         [R: strformat('<td style="width:%{cellwidth}%; text-align:center">')]
            <b>[R: abbvDenom]</b>
         [R: "</td>"]
      }]
	</tr>
	<tr>
      [R, foreach(bitowealth, personalwealthlist, ""), code:{
         [R: strformat('<td style="width:%{cellwidth}%; text-align:center">')]
            [R: macroLink(bitowealth, "Adj Personal Wealth@this", "none", roll.count, token.name)]
         [R: "</td>"]
      }]
	</tr>
</table>
[R, if(showparty == "Hide"), code:{
<table style="cellspacing:0px; cellpadding:0px; width:100%;">
	<tr>
		<td style="width:100%; text-align:center;">
         <b>Party</b>
         &nbsp; &nbsp; &nbsp; 
         <font size = -2>
            weight: 
            [H, macro("Calc Coin Weight@this"):"Party"]
            [H, if(countpartyweight ==  0): coinweight = "["+round(macro.return,3)+"]"; coinweight = macro.return][R: macroLink(coinweight, "Count Coinweight@this", "none", "Party", token.name)]
         </font>
      </td>
	</tr>
</table>
<table style="cellspacing:0px; cellpadding:0px; width:100%;">
   <tr>
      [R, foreach(abbvDenom, abbvDenomlist, ""), code:{
         [R: strformat('<td style="width:%{cellwidth}%; text-align:center">')]
            [R: abbvDenom]
         [R: "</td>"]
      }]
	</tr>
	<tr>
      [R, foreach(bitowealth, partywealthlist, ""), code:{
         [R: strformat('<td style="width:%{cellwidth}%; text-align:center">')]
            <b>[R: macroLink(bitowealth, "Adj Party Wealth@this", "none", roll.count, token.name)]
         [R: "</b></td>"]
      }]
	</tr>
</table>
}; {}]

[R, if(isGM()), code:{
	[R: "<font size = -1>"]
	[R: macroLink("Show All Player Wealth", "Get All Player Wealth@this", "none", "", getMacroLocation())]
	[R: "&nbsp; &nbsp;"]
	[R: macroLink("Check A Player's Wealth", "Get Particular Player Wealth@this", "none", "", getMacroLocation())]
	[R: "</font>"]
}; {}]

!!
@@ @Configure Currency
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]

[H: denomData = json.get(cpData, "denomData")]
[H, if(string(denomData) ==  ""): denomData = "{}"]
[H, if(json.contains(denomData, "Denom0")), code:{
	[if(json.get(denomData, "Denom0") == ""): check = 1; check = 0]
}; {
	[check = 1]
}]

[H, if(check ==  1), code:{
	[screen = input(
		"tab0|Base Currency||tab",
		"denom0|Copper Pieces|Base Currency",
		"abbvDenom0|CP|Abbreviation",
		"weight0|.02|Weight of One Piece",
		"tab1|Instructions||tab",
		"junk1|A long and a short label|Each denomination needs|label",
		"junk2|Value of other denominations is based on this|Start by setting a base denomination|label",
		"junk4|Value of others will be set in terms of how much of the base they can buy|It is easiest to have base denomination be the lowest available|label",
		"junk3|You may change it or add/remove other forms of currency through the configure link|Once this is set|label"
	)][abort(screen)]
	[denomData = json.set(denomData, "Denom0", denom0, "abbvDenom0", abbvDenom0, "Value0", 1, "Valreport0", "1 "+abbvDenom0+" = 1 "+abbvDenom0, "Weight0", weight0)]
	[setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]
}; {
	[numofden = json.length(denomData)]
	[numtorun = (numofden/5)-1]
	[list = json.get(denomData, "Denom0")+" (Base)"]
	[c(numtorun), code:{
		[list = listAppend(list, json.get(denomData, "Denom"+(roll.count+1)))]
	}]	
	[screen = input(
		"junk1|"+list+"|Denoms currently defined|label",
		"optionpick|Change A Denomination,Add A New Denomination,Remove A Denomination|What would you like to do?|radio|"
	)][abort(screen)]
	[if(optionpick == 0), code:{[macro("Change Denom@this"): ""]}; {}]
	[if(optionpick == 1), code:{[macro("Add Denom@this"): ""]}; {}]
	[if(optionpick == 2), code:{[macro("Remove Denom@this"): ""]}; {}]
}]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Count Coinweight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H, if(macro.args ==  "Party"): countWeight = "Countpartyweight"; countWeight = "Countweight"]

[H: cpData = getProperty("Coinpurse")]
[H: varvar = json.get(cpData, countWeight)]
[H, if(varvar ==  1): varvar = 0; varvar = 1]
[H: setProperty("Coinpurse", json.set(cpData, countWeight, varvar))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Get All Player Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cond = '{ pc:1 }']
[H: tokenList = getTokenNames(",", cond)]

[H: displayJson = "{}"]
[H, foreach(token, tokenList), code:{
	[token(token), code:{
		[H: thisPersonalWealth = json.get(getProperty("Coinpurse"), "Personal")]
		[H, if(string(thisPersonalWealth) ==  ""): thisPersonalWealth = "{}"]
		[H, if(json.length(thisPersonalWealth) > 0): displayJson = json.set(displayJson, token+"'s Personal", thisPersonalWealth)]
		[H: thisPartyWealth = json.get(getProperty("Coinpurse"), "Party")]
		[H, if(string(thisPartyWealth) ==  ""): thisPartyWealth = "{}"]
		[H, if(json.length(thisPartyWealth) > 0): displayJson = json.set(displayJson, token+"'s Party", thisPartyWealth)]
	}]
}]

[H: output = ""]
[H, foreach(entry, displayJson), code:{
	[H: entryData = json.get(displayJson, entry)]
	[H: numDenoms = json.length(entryData)]
	[H: cellWidth = 100/numDenoms+"%"]
	[H: output = output+strformat('%{entry}<table style="cellspacing:0px; cellpadding:0px; border:1px solid black; width:100%;">')]
	[H, foreach(denom, entryData): output = output+strformat('<tr><td style="width:%{cellwidth}">%{denom}</td></tr>')]
	[H, foreach(denom, entryData): output = output+strformat('<tr><td style="width:%{cellwidth}">%{denom}</td></tr>')]
	[H: output = output+strformat('</table><br>')]
}]
[R: setproperty("tm.test",output)]
[frame5("Player Wealth"):{
	[R: output]
}]

!!
@@ @Get All Player Wealth Test
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cond = '{ pc:1 }']
[H: tokenList = getTokenNames(",", cond)]

[H: displayJson = "{}"]
[H, foreach(token, tokenList), code:{
	[token(token), code:{
		[H: thisPersonalWealth = json.get(getProperty("Coinpurse"), "Personal")]
		[H, if(string(thisPersonalWealth) ==  ""): thisPersonalWealth = "{}"]
		[H, if(json.length(thisPersonalWealth) > 0): displayJson = json.set(displayJson, token+"'s Personal", thisPersonalWealth)]
		[H: thisPartyWealth = json.get(getProperty("Coinpurse"), "Party")]
		[H, if(string(thisPartyWealth) ==  ""): thisPartyWealth = "{}"]
		[H, if(json.length(thisPartyWealth) > 0): displayJson = json.set(displayJson, token+"'s Party", thisPartyWealth)]
	}]
}]

[H: output = ""]
[H, foreach(entry, displayJson), code:{
	[H: entryData = json.get(displayJson, entry)]
	[H: numDenoms = json.length(entryData)]
	[H: cellWidth = 100/numDenoms+"%"]
	[H: output = output+strformat('%{entry}<table style="cellspacing:0px; cellpadding:0px; border:1px solid black; width:100%;">')]
	[H, foreach(denom, entryData): output = output+strformat('<tr><td style="width:%{cellwidth}">%{denom}</td></tr>')]
	[H, foreach(denom, entryData): output = output+strformat('<tr><td style="width:%{cellwidth}">%{denom}</td></tr>')]
	[H: output = output+strformat('</table><br>')]
}]
[R: setproperty("tm.test",output)]
[frame5("Player Wealth"):{
	[R: output]
}]

!!
@@ @Get Particular Player Wealth
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: tokenlist = getTokenNames()]
[H: pclist = ""]
[H, foreach(token, tokenlist), code:{
	[token(token): thisispc = isPC()]
	[if(thisispc): pclist = listAppend(pclist, token)]
}]

[H: screen = input(
	"playerpick|"+pclist+"|Which player do you want to spy on?|radio|value = string"
)][H: abort(screen)]

[macro("Get All Player Wealth@this"): playerpick]

!!
@@ @Remove Denom
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H: denomData = json.get(cpData, "denomData")]

[H: datalength = json.length(denomData)]
[H: numDenoms = datalength/5]
[H: assert(numDenoms ==  round(numDenoms), "Error - numDenoms is not right", 0)]

[H: list = ""]
[H, c(numDenoms), code:{
	[addthis = json.get(denomData, "Denom"+roll.count)+" "+json.get(denomData, "Valreport"+roll.count)]
	[list = listAppend(list, addthis)]
}]

[H: screen = input(
	"optionpick|"+list+"|Change Which?|radio|"
)][H: abort(screen)]

[H: assert(optionpick>0, "Cannot Remove Base Denomination", 0)]

[H: numtorun = numDenoms-optionpick]
[H, c(numtorun), code:{
	[nextdenom = json.get(denomData, "Denom"+(optionpick+1))]
	[nextabbvDenom = json.get(denomData, "abbvDenom"+(optionpick+1))]
	[nextvalue = json.get(denomData, "Value"+(optionpick+1))]
	[nextvalreport = json.get(denomData, "Valreport"+(optionpick+1))]
	[nextweight = json.get(denomData, "Weight"+(optionpick+1))]
	[denomData = json.set(denomData, "Denom"+optionpick, nextdenom, "abbvDenom"+optionpick, nextabbvDenom, "Value"+optionpick, nextvalue, "Valreport"+optionpick, nextvalreport, "Weight"+optionpick, nextweight)]
	[optionpick = optionpick+1]
}]

[H: lastone = numDenoms-1]
[H: denomData = json.remove(denomData, "Denom"+lastone)]
[H: denomData = json.remove(denomData, "abbvDenom"+lastone)]
[H: denomData = json.remove(denomData, "Value"+lastone)]
[H: denomData = json.remove(denomData, "Valreport"+lastone)]
[H: denomData = json.remove(denomData, "Weight"+lastone)]

[H: setProperty("Coinpurse", json.set(cpData, "denomData", denomData))]

!!
@@ @Toggle Party
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=0 Coinpurse ; tooltip= ; minWidth=140
[H: cpData = getProperty("Coinpurse")]
[H, if(json.type(cpData) != "OBJECT"): cpData = "{}"]
[H: showparty = json.get(cpData, "Showparty")]
[H, if(showparty ==  ""): showparty = "Hide"]
[H, if(showparty ==  "Hide"): showparty = "Open"; showparty = "Hide"]
[H: setProperty("Coinpurse", json.set(getProperty("Coinpurse"), "Showparty", showparty))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Desc
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: index = json.indexOf(getProperty("Items"),item)]
[H: olddesc = json.get(item,"Description")]

[H: screen = input(
 "newdesc|"+olddesc+"|Enter new description"
)]
[H: abort(screen)]

[H: item = json.set(item,"Description",newdesc)]
[H: setProperty("Items",json.set(getProperty("Items"),index,item))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Loc
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: Items = getProperty("Items")]
[H: index = json.indexOf(Items,item)]
[H: itemName = json.get(item,"Name")]
[H: oldloc = json.get(item,"Location")]
[H: oldprior = json.get(item,"LocPrior")]

[H: contlist = ""]
[H, foreach(entry,Items), code:{
 [if(json.get(entry,"Container") == 1), code:{
  [contlist = listAppend(contlist,json.get(entry,"Name"))]
 }; {}]
}]

 [H: screen2 = input(
  "pick|General Inventory,"+contlist+"|Where would you like to place this item?|list|select = 0 value = number"
 )]
 [H: abort(screen2)]
 [H, if(pick == 0), code:{
  [item = json.set(item,"Location",itemName)]
  [item = json.set(item,"LocPrior",0)]
  [setProperty("Items",json.set(Items,index,item))]
 }; {
  [newloc = listGet(contlist,pick-1)]
  [item = json.set(item,"Location",newloc)]
  [item = json.set(item,"LocPrior",1)]
  [setProperty("Items",json.set(Items,index,item))]
 }]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Qty
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: Items = getProperty("Items")]
[H: index = json.indexOf(Items,item)]
[H: oldqty = json.get(item,"Qty")]

[H: screen = input(
 "newqty|"+oldqty+"|Alright, how many you got?"
)]
[H: abort(screen)]

[H: item = json.set(item,"Qty",newqty)]
[H: setProperty("Items",json.set(Items,index,item))]

[R: "You now have "+newqty+" x "+json.get(item,"Name")]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Weight
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: Items = getProperty("Items")]
[H: index = json.indexOf(Items,item)]
[H: oldWeight = json.get(item,"Weight")]

[H: screen = input(
 "newWeight|"+oldWeight+"|What's it weigh?"
)]
[H: abort(screen)]

[H: item = json.set(item,"Weight",newWeight)]
[H: setProperty("Items",json.set(Items,index,item))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Adj Wt
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: Items = getProperty("Items")]
[H: index = json.indexOf(Items,item)]
[H: oldwt = json.get(item,"Wt")]

[H: screen = input(
 "newwt|"+oldwt+"|What is the item weight?"
)]
[H: abort(screen)]

[H: item = json.set(item,"Wt",newwt)]
[H: setProperty("Items",json.set(Items,index,item))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Item Click
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: thisclass = json.get(item, "Class")]

[H, if(thisclass ==  "Wands"): list = "Use Wand, Recharge Wand"; list = ""]
[H: list = listAppend(list,"Organize,Modify,Give,Remove")]
[H: countIt = json.get(item,"WeightCount")]

[H: screen = input(
 "pick|"+list+"|What would you like to do?|radio|select = 0 value = string"
)]
[H: abort(screen)]

[if(pick == "Use Wand"), code:{[macro("Use Wand@Lib:inventory"): item]}; {}]
[if(pick == "Recharge Wand"), code:{[macro("Recharge Wand@Lib:inventory"): item]}; {}]
[if(pick == "Organize"), code:{[macro("Adj Loc@Lib:inventory"): item]}; {}]
[if(pick == "Remove"), code:{[macro("Remove Item@Lib:inventory"): item]}; {}]
[if(pick == "Modify"), code:{[macro("Modify Entry@Lib:inventory"): item]}; {}]
[if(pick == "Give"), code:{[macro("Give Item@Lib:inventory"): item]}; {}]

!!
@@ @Modify Entry
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: index = json.indexOf(getProperty("Items"),item)]
[H: oldWeight = json.get(item,"Weight")]
[H: oldcont = json.get(item, "Container")]
[H: olddesc = json.get(item, "Description")]

[H: screen = input(
	"newWeight|"+oldWeight+"|Weight per unit",
	"newdesc|"+olddesc+"|Description",
	"newcont|"+oldcont+"|Treat as a container|check"
)]
[H: abort(screen)]

[H: item = json.set(item,"Container",newcont,"Weight",newWeight,"Description",newdesc)]
[H: setProperty("Items", json.set(getProperty("Items"),index,item))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Recharge Wand
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: wanddetails = macro.args]

[H: itemindex = json.indexOf(getProperty("Items"),wanddetails)]
[H: useInfo = json.get(wanddetails,"useInfo")]
[H: charges = json.get(useInfo,"Charges")]

[H: screen = input(
 "var|"+charges+" charges|You currently have|label",
 "charges|50|Enter the number of charges this wand should have"
)]
[H: abort(screen)]

[H: itemName = json.get(wanddetails,"Name")]
[H: useInfo = json.set(useInfo,"Charges",charges)]
[H: wanddetails = json.set(wanddetails,"useInfo",useInfo)]
[H: setProperty("Items", json.set(getProperty("Items"),itemindex,wanddetails))]

[R: itemName+" recharged. "+charges+" charges now remain."]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Use 1 Ammo
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=3 ; color=default ; playerEditable=true ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: ammoname = macro.args]
[H: done = 0]

[H, foreach(item,Items), code:{
 [name = json.get(item,"Name")]
 [if(name == ammoname && done!= 1), code:{
  [qty = json.get(item,"Qty")]
  [newitem = json.set(item,"Qty",qty-1)]
  [Items = json.set(Items,roll.count,newitem)]
  [done = 1]
 }; {}]
}]

!!
@@ @Use Wand
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: wanddetails = macro.args]
[H: itemindex = json.indexOf(getProperty("Items"),wanddetails)]

[H: useInfo = json.get(wanddetails,"useInfo")]
[H: charges = json.get(useInfo,"Charges")]
[H: useInfo = json.set(useInfo,"Charges",charges-1)]
[H: wanddetails = json.set(wanddetails,"useInfo",useInfo)]

[H: itemName = json.get(wanddetails,"Name")]
[H: setProperty("Items", json.set(getProperty("Items"),itemindex,wanddetails))]

[H: plo.specOutput("all",token.name+" uses "+itemName)]
[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Weight Count Toggle
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=3 Modifying Item Entries ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: index = json.indexOf(getProperty("Items"),item)]
[H: oldcountIt = json.get(item,"WeightCount")]
[H, if(oldcountIt == 1): newcountIt = 0; newcountIt = 1]

[H: item = json.set(item,"WeightCount",newcountIt)]
[H: setProperty("Items", json.set(getProperty("Items"),index,item))]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Clear Invent
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=true ; applyToSelected=false ; group=4 Removing Items ; tooltip= ; minWidth=140
[H: screen = input(
 "conf|No,Yes|This will completely blank your inventory. Are you sure you want to do this?|radio"
)]
[H: abort(screen)]

[R, if(conf == 1), code:{
 [H: setProperty("Items","[]")]
 [macro("Invent Main Starter@Lib:inventory"): ""]
}; {}]

!!
@@ @Remove Item
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=4 Removing Items ; tooltip= ; minWidth=140
[H: item = macro.args]
[H: itemlist = getProperty("Items")]
[H: removename = json.get(item,"Name")]

[H: index = json.indexOf(itemlist,item)]
[H: itemlist = json.remove(itemlist,index)]

[H, foreach(entry,itemlist), code:{
 [if(json.get(entry,"Location") == removename), code:{
  [entry = json.set(entry,"Location",json.get(entry,"Name"))]
  [itemlist = json.set(itemlist,roll.count,entry)]
 }; {}]
}]

[H: setProperty("Items",itemlist)]

[macro("Invent Main Starter@Lib:inventory"): ""]

!!
@@ @Complete Gift
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy=3 ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: passed = macro.args]
[H: giverid = json.get(passed,"Giver")]
[H: recipientid = json.get(passed,"Recipient")]
[H: giveQty = json.get(passed,"Give Qty")]
[H: itemdetails = json.get(passed,"Itemdetails")]
[H: itemName = json.get(itemdetails,"Name")]

[H, token(giverid): assert(isOwner(),"<font color = 'red'>Dude! Keep your hands to yourself!</font>",0)]

[H: itemindex = json.indexOf(getProperty("Items"),itemdetails)]

[H: assert(itemindex>-1,"<font color = red>Numbers are not lining up - you may have already removed this item, or it may have been altered by another function. You will have to manually fix things.</font>")]

[H: currentQty = json.get(itemdetails,"Qty")]

[H, if(currentQty == giveQty || currentQty<giveQty), code:{
 [setProperty("Items",json.remove(getProperty("Items"),itemindex))]
}; {
 [newitemdetails = json.set(itemdetails,"Qty",currentQty-giveQty)]
 [setProperty("Items", json.set(getProperty("Items"),itemindex,newitemdetails))]
}]

[R: giveQty+" x "+itemName+" removed from your inventory."]
[H: plo.specOutput('gm',giverid+" has removed "+giveqty+" x "+itemName+" from inventory")]

!!
@@ @Get Targets
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: tokenList = listSort(getVisibleTokenNames(),"A")]
[H: imgList = tokenList]
[H: Num = listCount(imgList)]
[H, COUNT(Num), code:{
 [H: tokenName = listGet(imgList,roll.count)]
 [H, token(tokenName): image = getTokenImage()]
 [H: distance = getDistance(tokenName)]
 [H: imgList = listReplace(imgList,roll.count,tokenName+" ("+distance+" feet) "+image)] 
}]
[H: targlist = imglist]
[H: macro.return = targlist]

!!
@@ @Give Item
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: itemdetails = macro.args]
[H: itemqty = json.get(itemdetails,"Qty")]
[H: itemName = json.get(itemdetails,"Name")]

[H: get.targets()]
[H: targimglist = macro.return]
[H: targidlist = listSort(getVisibleTokenNames(),"A")]
[H: blurb = token.name]

[H, if(itemqty == 1), code:{
 [H: screen = input(
  "recipient|"+targimglist+"|To whom would you like to give this item?|list|ICON = TRUE ICONSIZE = 20"
 )]
 [H: abort(screen)]
 [H: giveqty = 1]
 [H: blurb = blurb+" offers a "+itemName]
}; {
 [H: screen = input(
  "recipient|"+targimglist+"|To whom would you like to give some of these?|list|ICON = TRUE ICONSIZE = 20",
  "giveqty|1|Give how many (you currently have "+itemqty+")?"
 )]
 [H: abort(screen)]
 [H: blurb = blurb+" offers "+giveqty+" x "+itemName]
}]

[H: recipientid = listGet(targidlist,recipient)]
[H: blurb = blurb+" to "+recipientid]
[H: giverid = token.name]
[H: pass = json.set("{}","Itemdetails",itemdetails,"Recipient",recipientid,"Giver",giverid,"Give Qty",giveqty)]

[H: tosend = macroLink("Click Here","Receive Item@Lib:inventory","self",pass,recipientid)]

[H: ownerlist = getOwners(",", recipientid)]
[H, if(isOwnedByAll(recipientid)): ownerlist = getAllPlayerNames()]
[H: assert(ownerlist!= "", "<font color = red>The chosen token is unowned - please ask the GM to assign it an owner to proceed</font>",0)]
[H: recipientowner = listGet(ownerlist,0)]
[H: linktarget = json.append("",recipientowner)]
[H: plo.specOutput('gm',blurb+" "+tosend+" to accept it")]

!!
@@ @Give Item.bak
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: itemdetails = macro.args]
[H: itemqty = json.get(itemdetails,"Qty")]
[H: itemName = json.get(itemdetails,"Name")]

[H: get.targets()]
[H: targimglist = macro.return]
[H: targidlist = listSort(getVisibleTokenNames(),"A")]
[H: blurb = token.name]

[H, if(itemqty == 1), code:{
 [H: screen = input(
  "recipient|"+targimglist+"|To whom would you like to give this item?|list|ICON = TRUE ICONSIZE = 20"
 )]
 [H: abort(screen)]
 [H: giveqty = 1]
 [H: blurb = blurb+" offers a "+itemName]
}; {
 [H: screen = input(
  "recipient|"+targimglist+"|To whom would you like to give some of these?|list|ICON = TRUE ICONSIZE = 20",
  "giveqty|1|Give how many (you currently have "+itemqty+")?"
 )]
 [H: abort(screen)]
 [H: blurb = blurb+" offers "+giveqty+" x "+itemName]
}]

[H: recipientid = listGet(targidlist,recipient)]
[H: blurb = blurb+" to "+recipientid]
[H: giverid = token.name]
[H: pass = json.set("{}","Itemdetails",itemdetails,"Recipient",recipientid,"Giver",giverid,"Give Qty",giveqty)]

[H: tosend = macroLink("Click Here","Receive Item@Lib:inventory","self",pass,recipientid)]

[H: ownerlist = getOwners(",", recipientid)]
[H, if(isOwnedByAll(recipientid)): ownerlist = getAllPlayerNames()]
[H: assert(ownerlist!= "", "<font color = red>The chosen token is unowned - please ask the GM to assign it an owner to proceed</font>",0)]
[H: recipientowner = listGet(ownerlist,0)]
[H: linktarget = json.append("",recipientowner)]
[H: plo.specOutput(linktarget,blurb+" "+tosend+" to accept it")]

!!
@@ @Receive Item
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: passed = macro.args]
[H: giverid = json.get(passed,"Giver")]
[H: recipientid = json.get(passed,"Recipient")]
[H: giveQty = json.get(passed,"Give Qty")]
[H: itemdetails = json.get(passed,"Itemdetails")]
[H: itemName = json.get(itemdetails,"Name")]

[H, token(recipientid): assert(isOwner(),"<font color = 'red'>Dude! Keep your hands to yourself!</font>",0)]

[H: newitemdetails = json.set(itemdetails,"Qty",giveQty,"Location",itemName,"LocPrior",0)]
[H: setProperty("Items", json.append(getProperty("Items"),newitemdetails))]

[H: linksentback = macroLink("Click Here","Complete Gift@Lib:inventory","self",passed,giverid)]

[H, if(isOwnedByAll(giverid)): ownerlist = getAllPlayerNames(); ownerlist = getOwners(",", giverid)]
[H: assert(ownerlist!= "", "<font color = red>The token that started all this doesn't have an owner assigned - please ask the GM to assign it an owner to proceed</font>",0)]
[H: giverowner = listGet(ownerlist,0)]

[H: linktarget = json.append("",giverowner)]
<b><i>[recipientid] has received [itemName]x[giveqty] from [giverid].</i></b>

!!
@@ @Receive Item.bak
@PROPS@ fontColor=black ; autoExecute=false ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=5 Item Transfer ; tooltip= ; minWidth=140
[H: passed = macro.args]
[H: giverid = json.get(passed,"Giver")]
[H: recipientid = json.get(passed,"Recipient")]
[H: giveQty = json.get(passed,"Give Qty")]
[H: itemdetails = json.get(passed,"Itemdetails")]
[H: itemName = json.get(itemdetails,"Name")]

[H, token(recipientid): assert(isOwner(),"<font color = 'red'>Dude! Keep your hands to yourself!</font>",0)]

[H: newitemdetails = json.set(itemdetails,"Qty",giveQty,"Location",itemName,"LocPrior",0)]
[H: setProperty("Items", json.append(getProperty("Items"),newitemdetails))]

[H: linksentback = macroLink("Click Here","Complete Gift@Lib:inventory","self",passed,giverid)]

[H, if(isOwnedByAll(giverid)): ownerlist = getAllPlayerNames(); ownerlist = getOwners(",", giverid)]
[H: assert(ownerlist!= "", "<font color = red>The token that started all this does not have an owner assigned - please ask the GM to assign it an owner to proceed</font>",0)]
[H: giverowner = listGet(ownerlist,0)]

[H: linktarget = json.append("",giverowner)]
[H: plo.specOutput(linktarget,recipientid+" accepts your generous gift. "+linksentback+" to remove "+giveQty+" x "+itemName+" from your inventory")]
[H: plo.specOutput('gm',recipientid+" has accepted "+giveqty+" x "+itemName+" from "+giverid)]

!!
@@ @am.csvToObj
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
<!-- csvToObj(data,prefix,keyIndexes): returnObj

   data - raw csv tabbed data with header row. Last column must have data or dummy column else empty data could be truncated.
      note: be sure to delete the last tab in the header when having a dummy column.
   prefix - prefix to add to key name
   keyIndexes - for generating unique identifiers. Uses index of table and defaults to 0
   
   returnObj - object of objects representing the table
   
-->

[H: data = arg(0)]
[H, if(argCount() >= 2): prefix = arg(1); prefix =""]
[H, if(argCount() >= 3): keyIndexes = arg(2); keyIndexes = "0"]

[H: TAB = decode("%09")]
[H: EOL = decode("%0A")]

[H: data = json.fromList(data,EOL)]
[H: headers = json.fromList(json.get(data,0),TAB)]
[H: data = json.remove(data,0)]

[H: returnObj = "{}"]
[H, foreach(line,data), code: {
   [H: keyProp = prefix]
   [H, foreach(index,keyIndexes): keyProp = keyProp + "_" + replace(lower(listGet(line,index,TAB)),"[^0-9a-z_]","")]
   [H: obj = "{}"]
   [H, foreach(header,headers): obj = json.set(obj,header,listGet(line,roll.count,TAB))]
   [H: returnObj = json.set(returnObj,keyProp,obj)]
}]

[H: macro.return = returnObj]

!!
@@ @am.csvToRecord
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
<!-- csvToRecord(data): returnRecord

   data - raw csv tabbed data with header row. Last column must have data in every row or you can have a
      dummy column with data in each row, but that column must not have a header. Otherwise, empty data could be truncated.
   
   returnRecord - array of objects representing the table
   
-->

[H: data = arg(0)]

[H: TAB = decode("%09")]
[H: EOL = decode("%0A")]

[H: data = json.fromList(data,EOL)]
[H: headers = json.fromList(json.get(data,0),TAB)]
[H: data = json.remove(data,0)]

[H: returnRecord = "[]"]
[H, foreach(line,data), code: {
   [H: obj = "{}"]
   [H, foreach(header,headers): obj = json.set(obj,header,listGet(line,roll.count,TAB))]
   [H: returnRecord = json.append(returnRecord,obj)]
}]

[H: macro.return = returnRecord]

!!
@@ @plo.conditionalOutput
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
[R: json.get(macro.args, 'toSend')]

!!
@@ @plo.specOutput
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=cyan ; playerEditable=false ; applyToSelected=false ; group=UDFs ; tooltip= ; minWidth=140
[H: toSend = '{}']
[H: argTest = json.type(macro.args)]
[H, if(argTest == 'ARRAY'), code:
{
  [H: toWho = 'list']
  [H: toSend = json.set(toSend, 'mlOutputList', macro.args)]
}; {
  [H: toWho = macro.args]
}]
[H: toSend = json.set(toSend, 'toSend', arg(1))]
[H: conditionalOutput = macroLinkText('plo.conditionalOutput@this', toWho, toSend)]
[H: execLink(conditionalOutput, 1)]

!!